 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 1 - 09/11/2024 10:24:32 PM


    1/   0 :                            CALL    MACRO address
    2/   0 :                                    SEP R4
    3/   0 :                            		dw address
    4/   0 :                                    ENDM
    5/   0 :                            
    6/   0 :                            RETURN  MACRO
    7/   0 :                                    SEP R5
    8/   0 :                                    ENDM
    9/   0 :                            
   10/   0 :                            SERIAL_B MACRO address
   11/   0 :                            		B2 address
   12/   0 :                            		ENDM
   13/   0 :                            
   14/   0 :                            SERIAL_BN MACRO address
   15/   0 :                            		BN2 address
   16/   0 :                            		ENDM
   17/   0 :                            		
   18/   0 :                            KB_B MACRO address
   19/   0 :                            		B3 address
   20/   0 :                            		ENDM
   21/   0 :                            
   22/   0 :                            KB_BN MACRO address
   23/   0 :                            		BN3 address
   24/   0 :                            		ENDM
   25/   0 :                            
   26/   0 : =0H                        R0		EQU		0		;REGISTER DEFINITION
   27/   0 : =1H                        R1		EQU		1		;REGISTER DEFINITION
   28/   0 : =2H                        R2		EQU		2		;REGISTER DEFINITION
   29/   0 : =3H                        R3		EQU		3		;REGISTER DEFINITION
   30/   0 : =4H                        R4		EQU		4		;REGISTER DEFINITION
   31/   0 : =5H                        R5		EQU		5		;REGISTER DEFINITION
   32/   0 : =6H                        R6		EQU		6		;REGISTER DEFINITION
   33/   0 : =7H                        R7		EQU		7		;REGISTER DEFINITION
   34/   0 : =8H                        R8		EQU		8		;REGISTER DEFINITION
   35/   0 : =9H                        R9		EQU		9		;REGISTER DEFINITION
   36/   0 : =0AH                       RA		EQU		10		;REGISTER DEFINITION
   37/   0 : =0BH                       RB		EQU		11		;REGISTER DEFINITION
   38/   0 : =0CH                       RC		EQU		12		;REGISTER DEFINITION
   39/   0 : =0DH                       RD		EQU		13		;REGISTER DEFINITION
   40/   0 : =0EH                       RE		EQU		14		;REGISTER DEFINITION
   41/   0 : =0FH                       RF		EQU		15		;REGISTER DEFINITION
   42/   0 :                            
   43/   0 : C0 01 00                   addr0000:        lbr addr0100      ; Long branch
   44/   3 : C0 1F 40                   addr0003:        lbr 8000      ; Long branch
   45/   6 : D0                         addr0006:        sep R0         ; Set P=R0 as program counter
   46/   7 : 00                         addr0007:        idl            ; Idle or wait for interrupt or DMA request
   47/   8 :                            
   48/   8 :                            TVXY:            
   49/   8 : 0F                                          DB       0Fh   ; DISPLAY CURSOR LOCATION
   50/   9 : 00                                          DB       00h
   51/   A : 00                                          DB       00h   ;BIT LOCATION OF CURSOR
   52/   B : 00                                          DB       00h
   53/   C :                            MASK:            
   54/   C : 0E                                          DB     14     ;E0
   55/   D :                            TIME_:           
   56/   D : 9A                                          DB       9Ah
   57/   E : 27                                          DB       27h
   58/   F : 3A                                          DB       3Ah
   59/  10 : 00                                          DB       00h
   60/  11 : 00                                          DB       00h
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 2 - 09/11/2024 10:24:32 PM


   61/  12 : 00                                          DB       00h
   62/  13 :                            BS:              
   63/  13 : 08                                          DB       08h
   64/  14 :                            CAN:             
   65/  14 : 1B                                          DB       1Bh
   66/  15 :                            PAD:             
   67/  15 : 00                                          DB       00h
   68/  16 :                            TAPEMODE:        
   69/  16 : 00                                          DB       00h
   70/  17 :                            SPARE:           
   71/  17 : 19                                          DB       19h
   72/  18 :                            XEQ:            
   73/  18 : 19                                          DB       19h
   74/  19 :                            LEND:            
   75/  19 : 34                                          DB       34h
   76/  1A :                            AEPTR:           
   77/  1A : 80                                          DB       80h
   78/  1B :                            TTYCC:           
   79/  1B : 00                                          DB       00h
   80/  1C :                            NXA:             
   81/  1C : 07 73                                       DW       0773h
   82/  1E :                            AIL:             
   83/  1E : 07 66                                       DW       0766h
   84/  20 :                            BASIC:           
   85/  20 : 0F 40                                       DW       0F40h     ;LOWEST ADD. FOR PROGRAM
   86/  22 :                            STACK:           
   87/  22 : 3F F7                                       DW       3FF7h     ;HIGHEST ADD. FOR PROGRAM
   88/  24 :                            MEND:            
   89/  24 : 10 9B                                       DW       109Bh     ;PROGRAM END + STACK RESERVE
   90/  26 :                            TOPS:            
   91/  26 : 3F F7                                       DW       3FF7h     ;TOP OF GOSUB STACK
   92/  28 :                            LINO:            
   93/  28 : 00 AA                                       DW       00AAh     ;CURRENT BASIC LINE NUMBER
   94/  2A :                            WORK:            
   95/  2A : 10 83                                       DW       1083h
   96/  2C : 00 34                                       DW       0034h
   97/  2E :                            SP:              
   98/  2E : 00 33                                       DW       0033h
   99/  30 :                            LINE:            
  100/  30 : 00 00                                       DW       0000h     ;INPUT LINE BUFFER
  101/  32 :                            
  102/  80 :                                             org      0080h
  103/  80 : 00 00                      addr0080:        DW       0000h  ; RANDOM NUMBER GEN.
  104/  82 : 00 00                      addr0082:        DW       0000h  ; VAR. A
  105/  84 : 00 00                      addr0084:        DW       0000h  ; VAR. B
  106/  86 : 00 00                      addr0086:        DW       0000h  ; VAR. C
  107/  88 : 00 00                      addr0088:        DW       0000h  ; VAR. D
  108/  8A : 00 00                      addr008a:        DW       0000h  ; VAR. E
  109/  8C : 00 00                      addr008c:        DW       0000h  ; VAR. F
  110/  8E : 00 00                      addr008e:        DW       0000h  ; VAR. G
  111/  90 : 00 00                      addr0090:        DW       0000h  ; VAR. H
  112/  92 : 00 00                      addr0092:        DW       0000h  ; VAR. I
  113/  94 : 00 00                      addr0094:        DW       0000h  ; VAR. J
  114/  96 : 00 00                      addr0096:        DW       0000h  ; VAR. K
  115/  98 : 00 00                      addr0098:        DW       0000h  ; VAR. L
  116/  9A : 00 00                      addr009a:        DW       0000h  ; VAR. M
  117/  9C : 00 00                      addr009c:        DW       0000h  ; VAR. N
  118/  9E : 00 00                      addr009e:        DW       0000h  ; VAR. O
  119/  A0 : 00 00                      addr00a0:        DW       0000h  ; VAR. P
  120/  A2 : 00 00                      addr00a2:        DW       0000h  ; VAR. Q
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 3 - 09/11/2024 10:24:32 PM


  121/  A4 : 00 00                      addr00a4:        DW       0000h  ; VAR. R
  122/  A6 : 00 00                      addr00a6:        DW       0000h  ; VAR. S
  123/  A8 : 00 00                      addr00a8:        DW       0000h  ; VAR. T
  124/  AA : 00 00                      addr00aa:        DW       0000h  ; VAR. U
  125/  AC : 00 00                      addr00ac:        DW       0000h  ; VAR. V
  126/  AE : 00 00                      addr00ae:        DW       0000h  ; VAR. W
  127/  B0 : 00 00                      addr00b0:        DW       0000h  ; VAR. X
  128/  B2 : 00 00                      addr00b2:        DW       0000h  ; VAR. Y
  129/  B4 : 00 00                      addr00b4:        DW       0000h  ; VAR. Z
  130/  B6 :                            
  131/  B6 : A7                         addr00b6:        plo R7         ; Put low register R7
  132/  B7 : C3 02 1A                   addr00b7:        lbdf  021ah     ; Long branch on DF=1
  133/  BA : 9D                         addr00ba:        ghi RD         ; Get high register RD
  134/  BB : (MACRO)                    addr00bb:        KB_B  addr00e1        ; Short branch on EF3=1
  134/  BB : 36 E1                                      B3 ADDR00E1
  135/  BD : (MACRO)                    addr00bd:        SERIAL_B  addr00bb        ; Short branch on EF4=1
  135/  BD : 35 BB                                      B2 ADDR00BB
  136/  BF : (MACRO)                    addr00bf:        KB_B  addr00e1        ; Short branch on EF3=1
  136/  BF : 36 E1                                      B3 ADDR00E1
  137/  C1 : (MACRO)                    addr00c1:        SERIAL_BN  addr00bf      ; Short branch on EF4=0
  137/  C1 : 3D BF                                      BN2 ADDR00BF
  138/  C3 : 7B                         addr00c3:        seq            ; Set Q=1
  139/  C4 : AE                         addr00c4:        plo RE         ; Put low register RE
  140/  C5 : F8 08                      addr00c5:        ldi  08h        ; Load D immediate
  141/  C7 : FF 01                      addr00c7:        smi  01h        ; Substract D,DF to value
  142/  C9 : 3A C7                      addr00c9:        bnz  addr00c7       ; Short branch on D!=0
  143/  CB : 8E                         addr00cb:        glo RE         ; Get low register RE
  144/  CC : FC 02                      addr00cc:        adi  02h        ; Add D,DF with value
  145/  CE : 39 D3                      addr00ce:        bnq  addr00d3       ; Short branch on Q=0
  146/  D0 : (MACRO)                    addr00d0:        SERIAL_B  addr00c4        ; Short branch on EF4=1
  146/  D0 : 35 C4                                      B2 ADDR00C4
  147/  D2 : 7A                         addr00d2:        req            ; Reset Q=0
  148/  D3 : (MACRO)                    addr00d3:        SERIAL_BN  addr00c4       ; Short branch on EF4=0
  148/  D3 : 3D C4                                      BN2 ADDR00C4
  149/  D5 : C4                         addr00d5:        nop            ; No operation
  150/  D6 : C4                         addr00d6:        nop            ; No operation
  151/  D7 : FF 01                      addr00d7:        smi  01h        ; Substract D,DF to value
  152/  D9 : (MACRO)                    addr00d9:        SERIAL_BN  addr00de       ; Short branch on EF4=0
  152/  D9 : 3D DE                                      BN2 ADDR00DE
  153/  DB : 3A D4                      addr00db:        bnz  addr00d3+1       ; Short branch on D!=0
  154/  DD : 1E                         addr00dd:        inc RE         ; Increment (RE)
  155/  DE : 8E                         addr00de:        glo RE         ; Get low register RE
  156/  DF : FF 06                      addr00df:        smi  06h        ; Substract D,DF to value
  157/  E1 : BE                         addr00e1:        phi RE         ; Put high register RE
  158/  E2 : F8 0C                      addr00e2:        ldi  0ch        ; Load D immediate
  159/  E4 : (MACRO)                    addr00e4:        CALL   addr0a83    ; Set P=R4 as program counter
  159/  E4 : D4                                 SEP R4
  159/  E5 : 0A 8A                                      dw ADDR0A83
  160/  E7 : C0 02 04                   addr00e7:        lbr  0204h      ; Long branch
  161/  EA : FC 00                      addr00ea:        adi  00h        ; Add D,DF with value
  162/  EC : 9E                         addr00ec:        ghi RE         ; Get high register RE
  163/  ED : 3A F2                      addr00ed:        bnz  addr00f2       ; Short branch on D!=0
  164/  EF : (MACRO)                    addr00ef:        KB_BN  addr00ff       ; Short branch on EF3=0
  164/  EF : 3E FF                                      BN3 ADDR00FF
  165/  F1 : C8                         addr00f1:        lskp           ; Long skip
  166/  F2 : (MACRO)                    addr00f2:        SERIAL_B  addr00ff        ; Short branch on EF4=1
  166/  F2 : 35 FF                                      B2 ADDR00FF
  167/  F4 : FF 00                      addr00f4:        smi  00h        ; Substract D,DF to value
  168/  F6 : 9E                         addr00f6:        ghi RE         ; Get high register RE
  169/  F7 : FA FE                      addr00f7:        ani 254        ;  feh Logical AND D with value
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 4 - 09/11/2024 10:24:32 PM


  170/  F9 : AE                         -                plo RE         ; Put low register RE
  171/  FA : CE                         addr00fa:        lsz            ; Long skip on D=0
  172/  FB : 2E                         addr00fb:        dec RE         ; Decrement (RE)
  173/  FC : 8E                         addr00fc:        glo RE         ; Get low register RE
  174/  FD : 3A F9                      addr00fd:        bnz   -       ; Short branch on D!=0
  175/  FF : (MACRO)                    addr00ff:        RETURN         ; Set P=R5 as program counter
  175/  FF : D5                                 SEP R5
  176/ 100 :                            
  177/ 100 : C4                         addr0100:        nop            ; No operation
  178/ 101 : 30 B0                      addr0101:        br   COLD        ; Short branch
  179/ 103 : C0 01 ED                   addr0103:        lbr  01edh      ; Long branch
  180/ 106 : C0 0A 5A                   addr0106:        lbr  0a5ah      ; Long branch
  181/ 109 : C0 0A 8A                   addr0109:        lbr  addr0a83      ; Long branch
  182/ 10C : C0 00 EA                   addr010c:        lbr  00eah      ; Long branch
  183/ 10F : 08                         addr010f:        ldn R8         ; Load D with (R8)
  184/ 110 : 1B                         addr0110:        inc RB         ; Increment (RB)
  185/ 111 : 00                         addr0111:        idl            ; Idle or wait for interrupt or DMA request
  186/ 112 : 00                         addr0112:        idl            ; Idle or wait for interrupt or DMA request
  187/ 113 : 19                         addr0113:        inc R9         ; Increment (R9)
  188/ 114 : 30 22                      addr0114:        br  +          ; Short branch
  189/ 116 : 00                         addr0116:        idl            ; Idle or wait for interrupt or DMA request
  190/ 117 : 00                         addr0117:        idl            ; Idle or wait for interrupt or DMA request
  191/ 118 : 58                         addr0118:        str R8         ; Store D to (R8)
  192/ 119 : (MACRO)                    addr0119:        RETURN         ; Set P=R5 as program counter
  192/ 119 : D5                                 SEP R5
  193/ 11A :                            
  194/ 11A : 07                         addr011a:        ldn R7         ; Load D with (R7)
  195/ 11B : 66                         addr011b:        out 6          ; Output (R(X)); Increment R(X), N=110
  196/ 11C : 0F                         addr011c:        ldn RF         ; Load D with (RF)
  197/ 11D : 40                         addr011d:        lda R0         ; Load D from (R0), increment R0
  198/ 11E : 7F 00                      addr011e:        smbi  00h       ; Substract memory toh borrow, immediate
  199/ 120 : 48                         addr0120:        lda R8         ; Load D from (R8), increment R8
  200/ 121 : 38                         addr0121:        skp            ; Skip next byte
  201/ 122 : 9D                         +                ghi RD         ; Get high register RD
  202/ 123 : BA                         addr0123:        phi RA         ; Put high register RA
  203/ 124 : 48                         addr0124:        lda R8         ; Load D from (R8), increment R8
  204/ 125 : (MACRO)                    addr0125:        RETURN         ; Set P=R5 as program counter
  204/ 125 : D5                                 SEP R5
  205/ 126 :                            
  206/ 126 : C0 07 51                   addr0126:        lbr  0751h      ; Long branch
  207/ 129 : D3                         -                sep R3         ; Set P=R3 as program counter
  208/ 12A : BF                         addr012a:        phi RF         ; Put high register RF
  209/ 12B : E2                         addr012b:        sex R2         ; Set P=R2 as datapointer
  210/ 12C : 86                         addr012c:        glo R6         ; Get low register R6
  211/ 12D : 73                         addr012d:        stxd           ; Store via X and devrement
  212/ 12E : 96                         addr012e:        ghi R6         ; Get high register R6
  213/ 12F : 73                         addr012f:        stxd           ; Store via X and devrement
  214/ 130 : 83                         addr0130:        glo R3         ; Get low register R3
  215/ 131 : A6                         addr0131:        plo R6         ; Put low register R6
  216/ 132 : 93                         addr0132:        ghi R3         ; Get high register R3
  217/ 133 : B6                         addr0133:        phi R6         ; Put high register R6
  218/ 134 : 46                         addr0134:        lda R6         ; Load D from (R6), increment R6
  219/ 135 : B3                         addr0135:        phi R3         ; Put high register R3
  220/ 136 : 46                         addr0136:        lda R6         ; Load D from (R6), increment R6
  221/ 137 : A3                         addr0137:        plo R3         ; Put low register R3
  222/ 138 : 9F                         addr0138:        ghi RF         ; Get high register RF
  223/ 139 : 30 29                      addr0139:        br  -        ; Short branch
  224/ 13B : D3                         -                sep R3         ; Set P=R3 as program counter
  225/ 13C : BF                         addr013c:        phi RF         ; Put high register RF
  226/ 13D : E2                         addr013d:        sex R2         ; Set P=R2 as datapointer
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 5 - 09/11/2024 10:24:32 PM


  227/ 13E : 96                         addr013e:        ghi R6         ; Get high register R6
  228/ 13F : B3                         addr013f:        phi R3         ; Put high register R3
  229/ 140 : 86                         addr0140:        glo R6         ; Get low register R6
  230/ 141 : A3                         addr0141:        plo R3         ; Put low register R3
  231/ 142 : 12                         addr0142:        inc R2         ; Increment (R2)
  232/ 143 : 42                         addr0143:        lda R2         ; Load D from (R2), increment R2
  233/ 144 : B6                         addr0144:        phi R6         ; Put high register R6
  234/ 145 : 02                         addr0145:        ldn R2         ; Load D with (R2)
  235/ 146 : A6                         addr0146:        plo R6         ; Put low register R6
  236/ 147 : 9F                         addr0147:        ghi RF         ; Get high register RF
  237/ 148 : 30 3B                      addr0148:        br  -          ; Short branch
  238/ 14A : D3                         -                sep R3         ; Set P=R3 as program counter
  239/ 14B : 43                         addr014b:        lda R3         ; Load D from (R3), increment R3
  240/ 14C : AD                         addr014c:        plo RD         ; Put low register RD
  241/ 14D : F8 00                      addr014d:        ldi  00h        ; Load D immediate
  242/ 14F : BD                         addr014f:        phi RD         ; Put high register RD
  243/ 150 : 4D                         addr0150:        lda RD         ; Load D from (RD), increment RD
  244/ 151 : ED                         addr0151:        sex RD         ; Set P=RD as datapointer
  245/ 152 : 30 4A                      addr0152:        br  -          ; Short branch
  246/ 154 : 02 98                                       DW       0298h  ;BACK
  247/ 156 : 02 A0                                       DW       02A0h  ;HOP
  248/ 158 : 03 1F                                       DW       031Fh  ;MATCH
  249/ 15A : 02 DD                                       DW       02DDh  ;TSTV
  250/ 15C : 02 F0                                       DW       02F0h  ;TSTN
  251/ 15E : 02 D4                                       DW       02D4h  ;TEND
  252/ 160 : 05 81                                       DW       0581h  ;RTN
  253/ 162 : 03 49                                       DW       0349h  ;HOOK
  254/ 164 : 01 ED                                       DW       01EDh  ;WARM
  255/ 166 : 05 4E                                       DW       054Eh  ;XINIT
  256/ 168 : 02 04                                       DW       0204h  ;CLEAR
  257/ 16A : 06 A2                                       DW       06A2h  ;INSRT
  258/ 16C : 02 D3                                       DW       02D3h  ;RETN
  259/ 16E : 02 D3                                       DW       02D3h  ;RETN
  260/ 170 : 05 AA                                       DW       05AAh  ;GETLN
  261/ 172 : 02 D3                                       DW       02D3h  ;RETN
  262/ 174 : 02 D3                                       DW       02D3h  ;RETN
  263/ 176 : 03 C5                                       DW       03C5h  ;STRNG
  264/ 178 : 03 D5                                       DW       03D5h  ;CRLF
  265/ 17A : 04 03                                       DW       0403h  ;TAB
  266/ 17C : 03 79                                       DW       0379h  ;PRS
  267/ 17E : 04 18                                       DW       0418h  ;PRN
  268/ 180 : 06 3C                                       DW       063Ch  ;LIST
  269/ 182 : 02 D3                                       DW       02D3h  ;RETN
  270/ 184 : 05 29                                       DW       0529h  ;NXT
  271/ 186 : 04 6C                                       DW       046Ch  ;CMPR
  272/ 188 : 04 CB                                       DW       04CBh  ;IDIV
  273/ 18A : 04 A7                                       DW       04A7h  ;IMUL
  274/ 18C : 04 98                                       DW       0498h  ;ISUB
  275/ 18E : 04 9B                                       DW       049Bh  ;IADD
  276/ 190 : 05 0E                                       DW       050Eh  ;INEG
  277/ 192 : 05 60                                       DW       0560h  ;XFER
  278/ 194 : 05 6D                                       DW       056Dh  ;RSTR
  279/ 196 : 06 81                                       DW       0681h  ;SAV
  280/ 198 : 02 B6                                       DW       02B6h  ;STORE
  281/ 19A : 03 67                                       DW       0367h  ;IND
  282/ 19C : 04 48                                       DW       0448h  ;RSBP
  283/ 19E : 04 4B                                       DW       044Bh  ;SVBP
  284/ 1A0 : 02 D3                                       DW       02D3h  ;RETN
  285/ 1A2 : 02 D3                                       DW       02D3h  ;RETN
  286/ 1A4 : 02 C9                                       DW       02C9h  ;BPOP
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 6 - 09/11/2024 10:24:32 PM


  287/ 1A6 : 02 C5                                       DW       02C5h  ;APOP
  288/ 1A8 : 03 4E                                       DW       034Eh  ;DUPS
  289/ 1AA : 03 44                                       DW       0344h  ;LITN
  290/ 1AC : 03 41                                       DW       0341h  ;LIT1
  291/ 1AE : 02 D3                                       DW       02D3h  ;RETN
  292/ 1B0 :                            
  293/ 1B0 : F8 B3                      COLD:            ldi  0b3h        ; Load D immediate
  294/ 1B2 : A3                         addr01b2:        plo R3         ; Put low register R3
  295/ 1B3 : F8 01                      addr01b3:        ldi  01h        ; Load D immediate
  296/ 1B5 : B3                         addr01b5:        phi R3         ; Put high register R3
  297/ 1B6 : D3                         addr01b6:        sep R3         ; Set P=R3 as program counter
  298/ 1B7 : BA                         addr01b7:        phi RA         ; Put high register RA
  299/ 1B8 : F8 1C                      addr01b8:        ldi  1ch        ; Load D immediate
  300/ 1BA : AA                         addr01ba:        plo RA         ; Put low register RA
  301/ 1BB : 4A                         addr01bb:        lda RA         ; Load D from (RA), increment RA
  302/ 1BC : B2                         addr01bc:        phi R2         ; Put high register R2
  303/ 1BD : 4A                         addr01bd:        lda RA         ; Load D from (RA), increment RA
  304/ 1BE : A2                         addr01be:        plo R2         ; Put low register R2
  305/ 1BF : 4A                         addr01bf:        lda RA         ; Load D from (RA), increment RA
  306/ 1C0 : BD                         addr01c0:        phi RD         ; Put high register RD
  307/ 1C1 : F8 FF                      addr01c1:        ldi  0ffh        ; Load D immediate
  308/ 1C3 : AD                         addr01c3:        plo RD         ; Put low register RD
  309/ 1C4 : 0D                         addr01c4:        ldn RD         ; Load D with (RD)
  310/ 1C5 : BF                         addr01c5:        phi RF         ; Put high register RF
  311/ 1C6 : E2                         -                sex R2         ; Set P=R2 as datapointer
  312/ 1C7 : 12                         addr01c7:        inc R2         ; Increment (R2)
  313/ 1C8 : F0                         addr01c8:        ldx            ; Pop stack. Place value in D register
  314/ 1C9 : AF                         addr01c9:        plo RF         ; Put low register RF
  315/ 1CA : FB FF                      addr01ca:        xri  0ffh        ; Logical XOR D with value
  316/ 1CC : 52                         addr01cc:        str R2         ; Store D to (R2)
  317/ 1CD : F3                         addr01cd:        xor            ; Logical exclusive OR  D with (R(X))
  318/ 1CE : ED                         addr01ce:        sex RD         ; Set P=RD as datapointer
  319/ 1CF : C6                         addr01cf:        lsnz           ; Long skip on D!=0
  320/ 1D0 : 9F                         addr01d0:        ghi RF         ; Get high register RF
  321/ 1D1 : F3                         addr01d1:        xor            ; Logical exclusive OR  D with (R(X))
  322/ 1D2 : FC FF                      addr01d2:        adi  0ffh        ; Add D,DF with value
  323/ 1D4 : 8F                         addr01d4:        glo RF         ; Get low register RF
  324/ 1D5 : 52                         addr01d5:        str R2         ; Store D to (R2)
  325/ 1D6 : 3B C6                      addr01d6:        bnf  -      ; Short branch on DF=0
  326/ 1D8 : 22                         addr01d8:        dec R2         ; Decrement (R2)
  327/ 1D9 : 0A                         addr01d9:        ldn RA         ; Load D with (RA)
  328/ 1DA : BD                         addr01da:        phi RD         ; Put high register RD
  329/ 1DB : F8 23                      addr01db:        ldi  23h        ; Load D immediate
  330/ 1DD : AD                         addr01dd:        plo RD         ; Put low register RD
  331/ 1DE : 82                         addr01de:        glo R2         ; Get low register R2
  332/ 1DF : 73                         addr01df:        stxd           ; Store via X and devrement
  333/ 1E0 : 92                         addr01e0:        ghi R2         ; Get high register R2
  334/ 1E1 : 73                         addr01e1:        stxd           ; Store via X and devrement
  335/ 1E2 : 2A                         addr01e2:        dec RA         ; Decrement (RA)
  336/ 1E3 : 2A                         -                dec RA         ; Decrement (RA)
  337/ 1E4 : 0A                         addr01e4:        ldn RA         ; Load D with (RA)
  338/ 1E5 : 73                         addr01e5:        stxd           ; Store via X and devrement
  339/ 1E6 : 8D                         addr01e6:        glo RD         ; Get low register RD
  340/ 1E7 : FB 12                      addr01e7:        xri  12h       ; Logical XOR D with value
  341/ 1E9 : 3A E3                      addr01e9:        bnz  -       ; Short branch on D!=0
  342/ 1EB : F6                         addr01eb:        shr            ; Shift right D
  343/ 1EC : C8                         addr01ec:        lskp           ; Long skip
  344/ 1ED : FF 00                      addr01ed:        smi  00h        ; Substract D,DF to value
  345/ 1EF : F8 F2                      addr01ef:        ldi  0f2h        ; Load D immediate
  346/ 1F1 : A3                         addr01f1:        plo R3         ; Put low register R3
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 7 - 09/11/2024 10:24:32 PM


  347/ 1F2 : F8 01                      addr01f2:        ldi  01h        ; Load D immediate
  348/ 1F4 : B3                         addr01f4:        phi R3         ; Put high register R3
  349/ 1F5 : D3                         addr01f5:        sep R3         ; Set P=R3 as program counter
  350/ 1F6 : B4                         addr01f6:        phi R4         ; Put high register R4
  351/ 1F7 : B5                         addr01f7:        phi R5         ; Put high register R5
  352/ 1F8 : B7                         addr01f8:        phi R7         ; Put high register R7
  353/ 1F9 : F8 2A                      addr01f9:        ldi  2ah        ; Load D immediate
  354/ 1FB : A4                         addr01fb:        plo R4         ; Put low register R4
  355/ 1FC : F8 3C                      addr01fc:        ldi  3ch        ; Load D immediate
  356/ 1FE : A5                         addr01fe:        plo R5         ; Put low register R5
  357/ 1FF : F8 4B                      addr01ff:        ldi  4bh        ; Load D immediate
  358/ 201 : C0 00 B6                   addr0201:        lbr  00b6h      ; Long branch
  359/ 204 : D7                         addr0204:        sep R7         ; Set P=R7 as program counter
  360/ 205 : 20                         addr0205:        dec R0         ; Decrement (R0)
  361/ 206 : BB                         addr0206:        phi RB         ; Put high register RB
  362/ 207 : 4D                         addr0207:        lda RD         ; Load D from (RD), increment RD
  363/ 208 : AB                         addr0208:        plo RB         ; Put low register RB
  364/ 209 : 9D                         addr0209:        ghi RD         ; Get high register RD
  365/ 20A : 5B                         addr020a:        str RB         ; Store D to (RB)
  366/ 20B : 1B                         addr020b:        inc RB         ; Increment (RB)
  367/ 20C : 5B                         addr020c:        str RB         ; Store D to (RB)
  368/ 20D : D7                         addr020d:        sep R7         ; Set P=R7 as program counter
  369/ 20E : 16                         addr020e:        inc R6         ; Increment (R6)
  370/ 20F : 8B                         addr020f:        glo RB         ; Get low register RB
  371/ 210 : F4                         addr0210:        add            ; Add D: D,DF= D+(R(X))
  372/ 211 : BF                         addr0211:        phi RF         ; Put high register RF
  373/ 212 : D7                         addr0212:        sep R7         ; Set P=R7 as program counter
  374/ 213 : 24                         addr0213:        dec R4         ; Decrement (R4)
  375/ 214 : 9F                         addr0214:        ghi RF         ; Get high register RF
  376/ 215 : 73                         addr0215:        stxd           ; Store via X and devrement
  377/ 216 : 9B                         addr0216:        ghi RB         ; Get high register RB
  378/ 217 : 7C 00                      addr0217:        adci  00h       ; Add with carry immediate
  379/ 219 : 73                         addr0219:        stxd           ; Store via X and devrement
  380/ 21A : D7                         addr021a:        sep R7         ; Set P=R7 as program counter
  381/ 21B : 22                         addr021b:        dec R2         ; Decrement (R2)
  382/ 21C : B2                         addr021c:        phi R2         ; Put high register R2
  383/ 21D : 4D                         addr021d:        lda RD         ; Load D from (RD), increment RD
  384/ 21E : A2                         addr021e:        plo R2         ; Put low register R2
  385/ 21F : D7                         addr021f:        sep R7         ; Set P=R7 as program counter
  386/ 220 : 26                         addr0220:        dec R6         ; Decrement (R6)
  387/ 221 : 82                         addr0221:        glo R2         ; Get low register R2
  388/ 222 : 73                         addr0222:        stxd           ; Store via X and devrement
  389/ 223 : 92                         addr0223:        ghi R2         ; Get high register R2
  390/ 224 : 73                         addr0224:        stxd           ; Store via X and devrement
  391/ 225 : (MACRO)                    addr0225:        CALL   03cch    ; Set P=R4 as program counter
  391/ 225 : D4                                 SEP R4
  391/ 226 : 03 CC                                      dw 03CCH
  392/ 228 : D7                         addr0228:        sep R7         ; Set P=R7 as program counter
  393/ 229 : 1E                         addr0229:        inc RE         ; Increment (RE)
  394/ 22A : B9                         addr022a:        phi R9         ; Put high register R9
  395/ 22B : 4D                         addr022b:        lda RD         ; Load D from (RD), increment RD
  396/ 22C : A9                         addr022c:        plo R9         ; Put low register R9
  397/ 22D : E2                         addr022d:        sex R2         ; Set P=R2 as datapointer
  398/ 22E : 49                         addr022e:        lda R9         ; Load D from (R9), increment R9
  399/ 22F : FF 30                      addr022f:        smi  30h        ; Substract D,DF to value
  400/ 231 : 33 4B                      addr0231:        bdf  +   ; Short branch on DF=1
  401/ 233 : FD D7                      addr0233:        sdi  0d7h        ; Substract D,DF from value
  402/ 235 : 33 85                      addr0235:        bdf  addr0285  ; Short branch on DF=1
  403/ 237 : FE                         addr0237:        shl            ; Shift left D
  404/ 238 : FC B0                      addr0238:        adi  0b0h        ; Add D,DF with value
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 8 - 09/11/2024 10:24:32 PM


  405/ 23A : A6                         addr023a:        plo R6         ; Put low register R6
  406/ 23B : F8 2D                      addr023b:        ldi  2dh        ; Load D immediate
  407/ 23D : 22                         addr023d:        dec R2         ; Decrement (R2)
  408/ 23E : 22                         addr023e:        dec R2         ; Decrement (R2)
  409/ 23F : 73                         addr023f:        stxd           ; Store via X and devrement
  410/ 240 : 93                         addr0240:        ghi R3         ; Get high register R3
  411/ 241 : 73                         addr0241:        stxd           ; Store via X and devrement
  412/ 242 : 97                         addr0242:        ghi R7         ; Get high register R7
  413/ 243 : B6                         addr0243:        phi R6         ; Put high register R6
  414/ 244 : 46                         addr0244:        lda R6         ; Load D from (R6), increment R6
  415/ 245 : 52                         addr0245:        str R2         ; Store D to (R2)
  416/ 246 : 46                         addr0246:        lda R6         ; Load D from (R6), increment R6
  417/ 247 : A6                         addr0247:        plo R6         ; Put low register R6
  418/ 248 : F0                         addr0248:        ldx            ; Pop stack. Place value in D register
  419/ 249 : B6                         addr0249:        phi R6         ; Put high register R6
  420/ 24A : (MACRO)                    addr024a:        RETURN         ; Set P=R5 as program counter
  420/ 24A : D5                                 SEP R5
  421/ 24B :                            
  422/ 24B : FF 10                      +                smi  10h        ; Substract D,DF to value
  423/ 24D : 3B 6A                      addr024d:        bnf  addr026a       ; Short branch on DF=0
  424/ 24F : A6                         addr024f:        plo R6         ; Put low register R6
  425/ 250 : FA 1F                      addr0250:        ani  1fh        ; Logical AND D with value
  426/ 252 : 32 5C                      addr0252:        bz  addr025c        ; Short branch on D=0
  427/ 254 : 52                         addr0254:        str R2         ; Store D to (R2)
  428/ 255 : 89                         addr0255:        glo R9         ; Get low register R9
  429/ 256 : F4                         addr0256:        add            ; Add D: D,DF= D+(R(X))
  430/ 257 : 73                         addr0257:        stxd           ; Store via X and devrement
  431/ 258 : 99                         addr0258:        ghi R9         ; Get high register R9
  432/ 259 : 7C 00                      addr0259:        adci  00h       ; Add with carry immediate
  433/ 25B : 38                         addr025b:        skp            ; Skip next byte
  434/ 25C : 73                         addr025c:        stxd           ; Store via X and devrement
  435/ 25D : 73                         addr025d:        stxd           ; Store via X and devrement
  436/ 25E : 86                         addr025e:        glo R6         ; Get low register R6
  437/ 25F : F6                         addr025f:        shr            ; Shift right D
  438/ 260 : F6                         addr0260:        shr            ; Shift right D
  439/ 261 : F6                         addr0261:        shr            ; Shift right D
  440/ 262 : F6                         addr0262:        shr            ; Shift right D
  441/ 263 : FA FE                      addr0263:        ani  0feh        ; Logical AND D with value
  442/ 265 : FC 54                      addr0265:        adi  54h        ; Add D,DF with value
  443/ 267 : A6                         addr0267:        plo R6         ; Put low register R6
  444/ 268 : 30 42                      addr0268:        br  addr0242        ; Short branch
  445/ 26A : FC 08                      addr026a:        adi  08h        ; Add D,DF with value
  446/ 26C : FA 07                      addr026c:        ani  07h        ; Logical AND D with value
  447/ 26E : B6                         addr026e:        phi R6         ; Put high register R6
  448/ 26F : 49                         addr026f:        lda R9         ; Load D from (R9), increment R9
  449/ 270 : A6                         addr0270:        plo R6         ; Put low register R6
  450/ 271 : 33 7A                      addr0271:        bdf  addr027a       ; Short branch on DF=1
  451/ 273 : 89                         addr0273:        glo R9         ; Get low register R9
  452/ 274 : 73                         addr0274:        stxd           ; Store via X and devrement
  453/ 275 : 99                         addr0275:        ghi R9         ; Get high register R9
  454/ 276 : 73                         addr0276:        stxd           ; Store via X and devrement
  455/ 277 : (MACRO)                    addr0277:        CALL   0337h    ; Set P=R4 as program counter
  455/ 277 : D4                                 SEP R4
  455/ 278 : 03 37                                      dw 0337H
  456/ 27A : D7                         addr027a:        sep R7         ; Set P=R7 as program counter
  457/ 27B : 1E                         addr027b:        inc RE         ; Increment (RE)
  458/ 27C : 86                         addr027c:        glo R6         ; Get low register R6
  459/ 27D : F4                         addr027d:        add            ; Add D: D,DF= D+(R(X))
  460/ 27E : A9                         addr027e:        plo R9         ; Put low register R9
  461/ 27F : 96                         addr027f:        ghi R6         ; Get high register R6
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 9 - 09/11/2024 10:24:32 PM


  462/ 280 : 2D                         addr0280:        dec RD         ; Decrement (RD)
  463/ 281 : 74                         addr0281:        adc            ; Add with carry
  464/ 282 : B9                         addr0282:        phi R9         ; Put high register R9
  465/ 283 : 30 2D                      addr0283:        br  addr022d        ; Short branch
  466/ 285 : FD 07                      addr0285:        sdi  07h        ; Substract D,DF from value
  467/ 287 : 52                         addr0287:        str R2         ; Store D to (R2)
  468/ 288 : D7                         addr0288:        sep R7         ; Set P=R7 as program counter
  469/ 289 : 1A                         addr0289:        inc RA         ; Increment (RA)
  470/ 28A : AD                         addr028a:        plo RD         ; Put low register RD
  471/ 28B : E2                         addr028b:        sex R2         ; Set P=R2 as datapointer
  472/ 28C : F4                         addr028c:        add            ; Add D: D,DF= D+(R(X))
  473/ 28D : A6                         addr028d:        plo R6         ; Put low register R6
  474/ 28E : 9D                         addr028e:        ghi RD         ; Get high register RD
  475/ 28F : B6                         addr028f:        phi R6         ; Put high register R6
  476/ 290 : 0D                         addr0290:        ldn RD         ; Load D with (RD)
  477/ 291 : 52                         addr0291:        str R2         ; Store D to (R2)
  478/ 292 : 06                         addr0292:        ldn R6         ; Load D with (R6)
  479/ 293 : 5D                         addr0293:        str RD         ; Store D to (RD)
  480/ 294 : 02                         addr0294:        ldn R2         ; Load D with (R2)
  481/ 295 : 56                         addr0295:        str R6         ; Store D to (R6)
  482/ 296 : 30 2D                      addr0296:        br  addr022d        ; Short branch
  483/ 298 : 86                         addr0298:        glo R6         ; Get low register R6
  484/ 299 : FF 20                      addr0299:        smi  20h        ; Substract D,DF to value
  485/ 29B : A6                         addr029b:        plo R6         ; Put low register R6
  486/ 29C : 96                         addr029c:        ghi R6         ; Get high register R6
  487/ 29D : 7F 00                      addr029d:        smbi  00h       ; Substract memory toh borrow, immediate
  488/ 29F : 38                         addr029f:        skp            ; Skip next byte
  489/ 2A0 : 96                         addr02a0:        ghi R6         ; Get high register R6
  490/ 2A1 : C2 03 7F                   addr02a1:        lbz  037fh      ; Long branch on D=0
  491/ 2A4 : B9                         addr02a4:        phi R9         ; Put high register R9
  492/ 2A5 : 86                         addr02a5:        glo R6         ; Get low register R6
  493/ 2A6 : A9                         addr02a6:        plo R9         ; Put low register R9
  494/ 2A7 : 30 2D                      addr02a7:        br  addr022d        ; Short branch
  495/ 2A9 : 1B                         -                inc RB         ; Increment (RB)
  496/ 2AA : 0B                         addr02aa:        ldn RB         ; Load D with (RB)
  497/ 2AB : FF 20                      addr02ab:        smi  20h        ; Substract D,DF to value
  498/ 2AD : 32 A9                      addr02ad:        bz   -         ; Short branch on D=0
  499/ 2AF : FF 10                      addr02af:        smi  10h        ; Substract D,DF to value
  500/ 2B1 : C7                         addr02b1:        lsnf           ; Long skip on DF=0
  501/ 2B2 : FD 09                      addr02b2:        sdi  09h        ; Substract D,DF from value
  502/ 2B4 : 0B                         addr02b4:        ldn RB         ; Load D with (RB)
  503/ 2B5 : (MACRO)                    addr02b5:        RETURN         ; Set P=R5 as program counter
  503/ 2B5 : D5                                 SEP R5
  504/ 2B6 :                            
  505/ 2B6 : (MACRO)                    addr02b6:        CALL   02c5h    ; Set P=R4 as program counter
  505/ 2B6 : D4                                 SEP R4
  505/ 2B7 : 02 C5                                      dw 02C5H
  506/ 2B9 : 4D                         addr02b9:        lda RD         ; Load D from (RD), increment RD
  507/ 2BA : AD                         addr02ba:        plo RD         ; Put low register RD
  508/ 2BB : 9A                         addr02bb:        ghi RA         ; Get high register RA
  509/ 2BC : 5D                         addr02bc:        str RD         ; Store D to (RD)
  510/ 2BD : 1D                         addr02bd:        inc RD         ; Increment (RD)
  511/ 2BE : 8A                         addr02be:        glo RA         ; Get low register RA
  512/ 2BF : 5D                         addr02bf:        str RD         ; Store D to (RD)
  513/ 2C0 : 30 C9                      addr02c0:        br   +        ; Short branch
  514/ 2C2 : (MACRO)                    addr02c2:        CALL   02c5h    ; Set P=R4 as program counter
  514/ 2C2 : D4                                 SEP R4
  514/ 2C3 : 02 C5                                      dw 02C5H
  515/ 2C5 : (MACRO)                    addr02c5:        CALL   02c9h    ; Set P=R4 as program counter
  515/ 2C5 : D4                                 SEP R4
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 10 - 09/11/2024 10:24:32 PM


  515/ 2C6 : 02 C9                                      dw 02C9H
  516/ 2C8 : BA                         addr02c8:        phi RA         ; Put high register RA
  517/ 2C9 : D7                         +                sep R7         ; Set P=R7 as program counter
  518/ 2CA : 1A                         addr02ca:        inc RA         ; Increment (RA)
  519/ 2CB : 2D                         addr02cb:        dec RD         ; Decrement (RD)
  520/ 2CC : FC 01                      addr02cc:        adi  01h        ; Add D,DF with value
  521/ 2CE : 5D                         addr02ce:        str RD         ; Store D to (RD)
  522/ 2CF : AD                         addr02cf:        plo RD         ; Put low register RD
  523/ 2D0 : 2D                         addr02d0:        dec RD         ; Decrement (RD)
  524/ 2D1 : 4D                         addr02d1:        lda RD         ; Load D from (RD), increment RD
  525/ 2D2 : AA                         addr02d2:        plo RA         ; Put low register RA
  526/ 2D3 : (MACRO)                    addr02d3:        RETURN         ; Set P=R5 as program counter
  526/ 2D3 : D5                                 SEP R5
  527/ 2D4 :                            
  528/ 2D4 : (MACRO)                    addr02d4:        CALL   02aah    ; Set P=R4 as program counter
  528/ 2D4 : D4                                 SEP R4
  528/ 2D5 : 02 AA                                      dw 02AAH
  529/ 2D7 : FB 0D                      addr02d7:        xri  0dh        ; Logical XOR D with value
  530/ 2D9 : 32 2D                      addr02d9:        bz  addr022d        ; Short branch on D=0
  531/ 2DB : 30 A0                      addr02db:        br  addr02a0        ; Short branch
  532/ 2DD : (MACRO)                    addr02dd:        CALL   02aah    ; Set P=R4 as program counter
  532/ 2DD : D4                                 SEP R4
  532/ 2DE : 02 AA                                      dw 02AAH
  533/ 2E0 : FF 41                      addr02e0:        smi  41h        ; Substract D,DF to value
  534/ 2E2 : 3B A0                      addr02e2:        bnf   addr02a0       ; Short branch on DF=0
  535/ 2E4 : FF 1A                      addr02e4:        smi  1ah        ; Substract D,DF to value
  536/ 2E6 : 33 A0                      addr02e6:        bdf   addr02a0       ; Short branch on DF=1
  537/ 2E8 : 1B                         addr02e8:        inc RB         ; Increment (RB)
  538/ 2E9 : 9F                         addr02e9:        ghi RF         ; Get high register RF
  539/ 2EA : FE                         addr02ea:        shl            ; Shift left D
  540/ 2EB : (MACRO)                    addr02eb:        CALL   0359h    ; Set P=R4 as program counter
  540/ 2EB : D4                                 SEP R4
  540/ 2EC : 03 59                                      dw 0359H
  541/ 2EE : 30 2D                      addr02ee:        br  addr022d        ; Short branch
  542/ 2F0 : (MACRO)                    addr02f0:        CALL   02aah    ; Set P=R4 as program counter
  542/ 2F0 : D4                                 SEP R4
  542/ 2F1 : 02 AA                                      dw 02AAH
  543/ 2F3 : 3B A0                      addr02f3:        bnf  addr02a0       ; Short branch on DF=0
  544/ 2F5 : 9D                         addr02f5:        ghi RD         ; Get high register RD
  545/ 2F6 : BA                         addr02f6:        phi RA         ; Put high register RA
  546/ 2F7 : AA                         addr02f7:        plo RA         ; Put low register RA
  547/ 2F8 : (MACRO)                    addr02f8:        CALL   0354h    ; Set P=R4 as program counter
  547/ 2F8 : D4                                 SEP R4
  547/ 2F9 : 03 54                                      dw 0354H
  548/ 2FB : 4B                         addr02fb:        lda RB         ; Load D from (RB), increment RB
  549/ 2FC : FA 0F                      addr02fc:        ani  0fh        ; Logical AND D with value
  550/ 2FE : AA                         addr02fe:        plo RA         ; Put low register RA
  551/ 2FF : 9D                         addr02ff:        ghi RD         ; Get high register RD
  552/ 300 : BA                         addr0300:        phi RA         ; Put high register RA
  553/ 301 : F8 0A                      addr0301:        ldi  0ah        ; Load D immediate
  554/ 303 : AF                         addr0303:        plo RF         ; Put low register RF
  555/ 304 : ED                         addr0304:        sex RD         ; Set P=RD as datapointer
  556/ 305 : 1D                         addr0305:        inc RD         ; Increment (RD)
  557/ 306 : 8A                         addr0306:        glo RA         ; Get low register RA
  558/ 307 : F4                         addr0307:        add            ; Add D: D,DF= D+(R(X))
  559/ 308 : AA                         addr0308:        plo RA         ; Put low register RA
  560/ 309 : 9A                         addr0309:        ghi RA         ; Get high register RA
  561/ 30A : 2D                         addr030a:        dec RD         ; Decrement (RD)
  562/ 30B : 74                         addr030b:        adc            ; Add with carry
  563/ 30C : BA                         addr030c:        phi RA         ; Put high register RA
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 11 - 09/11/2024 10:24:33 PM


  564/ 30D : 2F                         addr030d:        dec RF         ; Decrement (RF)
  565/ 30E : 8F                         addr030e:        glo RF         ; Get low register RF
  566/ 30F : 3A 05                      addr030f:        bnz  addr0305       ; Short branch on D!=0
  567/ 311 : 9A                         addr0311:        ghi RA         ; Get high register RA
  568/ 312 : 5D                         addr0312:        str RD         ; Store D to (RD)
  569/ 313 : 1D                         addr0313:        inc RD         ; Increment (RD)
  570/ 314 : 8A                         addr0314:        glo RA         ; Get low register RA
  571/ 315 : 73                         addr0315:        stxd           ; Store via X and devrement
  572/ 316 : (MACRO)                    addr0316:        CALL   02aah    ; Set P=R4 as program counter
  572/ 316 : D4                                 SEP R4
  572/ 317 : 02 AA                                      dw 02AAH
  573/ 319 : C3 02 FB                   addr0319:        lbdf  02fbh     ; Long branch on DF=1
  574/ 31C : C0 02 2D                   addr031c:        lbr  022dh      ; Long branch
  575/ 31F : 9B                         addr031f:        ghi RB         ; Get high register RB
  576/ 320 : BA                         addr0320:        phi RA         ; Put high register RA
  577/ 321 : 8B                         addr0321:        glo RB         ; Get low register RB
  578/ 322 : AA                         addr0322:        plo RA         ; Put low register RA
  579/ 323 : (MACRO)                    addr0323:        CALL   02aah    ; Set P=R4 as program counter
  579/ 323 : D4                                 SEP R4
  579/ 324 : 02 AA                                      dw 02AAH
  580/ 326 : 1B                         addr0326:        inc RB         ; Increment (RB)
  581/ 327 : 52                         addr0327:        str R2         ; Store D to (R2)
  582/ 328 : 49                         addr0328:        lda R9         ; Load D from (R9), increment R9
  583/ 329 : F3                         addr0329:        xor            ; Logical exclusive OR  D with (R(X))
  584/ 32A : 32 23                      addr032a:        bz  addr0323        ; Short branch on D=0
  585/ 32C : FB 80                      addr032c:        xri  80h        ; Logical XOR D with value
  586/ 32E : 32 1C                      addr032e:        bz  addr031c        ; Short branch on D=0
  587/ 330 : 9A                         addr0330:        ghi RA         ; Get high register RA
  588/ 331 : BB                         addr0331:        phi RB         ; Put high register RB
  589/ 332 : 8A                         addr0332:        glo RA         ; Get low register RA
  590/ 333 : AB                         addr0333:        plo RB         ; Put low register RB
  591/ 334 : C0 02 A0                   addr0334:        lbr  02a0h      ; Long branch
  592/ 337 : D7                         addr0337:        sep R7         ; Set P=R7 as program counter
  593/ 338 : 24                         addr0338:        dec R4         ; Decrement (R4)
  594/ 339 : 82                         addr0339:        glo R2         ; Get low register R2
  595/ 33A : F5                         addr033a:        sd             ; Substract D: D,DF=(R(X))-D
  596/ 33B : 2D                         addr033b:        dec RD         ; Decrement (RD)
  597/ 33C : 92                         addr033c:        ghi R2         ; Get high register R2
  598/ 33D : 75                         addr033d:        sdb            ; Substract D with borrow
  599/ 33E : 33 7F                      addr033e:        bdf  addr037f       ; Short branch on DF=1
  600/ 340 : (MACRO)                    addr0340:        RETURN         ; Set P=R5 as program counter
  600/ 340 : D5                                 SEP R5
  601/ 341 :                            
  602/ 341 : 49                         addr0341:        lda R9         ; Load D from (R9), increment R9
  603/ 342 : 30 59                      addr0342:        br  addr0359        ; Short branch
  604/ 344 : 49                         addr0344:        lda R9         ; Load D from (R9), increment R9
  605/ 345 : BA                         addr0345:        phi RA         ; Put high register RA
  606/ 346 : 49                         addr0346:        lda R9         ; Load D from (R9), increment R9
  607/ 347 : 30 55                      addr0347:        br  addr0355        ; Short branch
  608/ 349 : (MACRO)                    addr0349:        CALL   0625h    ; Set P=R4 as program counter
  608/ 349 : D4                                 SEP R4
  608/ 34A : 06 25                                      dw 0625H
  609/ 34C : 30 55                      addr034c:        br  addr0355        ; Short branch
  610/ 34E : (MACRO)                    addr034e:        CALL   02c5h    ; Set P=R4 as program counter
  610/ 34E : D4                                 SEP R4
  610/ 34F : 02 C5                                      dw 02C5H
  611/ 351 : (MACRO)                    addr0351:        CALL   0354h    ; Set P=R4 as program counter
  611/ 351 : D4                                 SEP R4
  611/ 352 : 03 54                                      dw 0354H
  612/ 354 : 8A                         addr0354:        glo RA         ; Get low register RA
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 12 - 09/11/2024 10:24:33 PM


  613/ 355 : (MACRO)                    addr0355:        CALL   0359h    ; Set P=R4 as program counter
  613/ 355 : D4                                 SEP R4
  613/ 356 : 03 59                                      dw 0359H
  614/ 358 : 9A                         addr0358:        ghi RA         ; Get high register RA
  615/ 359 : 52                         addr0359:        str R2         ; Store D to (R2)
  616/ 35A : D7                         addr035a:        sep R7         ; Set P=R7 as program counter
  617/ 35B : 19                         addr035b:        inc R9         ; Increment (R9)
  618/ 35C : F7                         addr035c:        sm             ; Substract memory: DF,D=D-(R(X))
  619/ 35D : 33 7F                      addr035d:        bdf  addr037f       ; Short branch on DF=1
  620/ 35F : F8 01                      addr035f:        ldi  01h        ; Load D immediate
  621/ 361 : F5                         addr0361:        sd             ; Substract D: D,DF=(R(X))-D
  622/ 362 : 5D                         addr0362:        str RD         ; Store D to (RD)
  623/ 363 : AD                         addr0363:        plo RD         ; Put low register RD
  624/ 364 : 02                         addr0364:        ldn R2         ; Load D with (R2)
  625/ 365 : 5D                         addr0365:        str RD         ; Store D to (RD)
  626/ 366 : (MACRO)                    addr0366:        RETURN         ; Set P=R5 as program counter
  626/ 366 : D5                                 SEP R5
  627/ 367 :                            
  628/ 367 : (MACRO)                    addr0367:        CALL   02c9h    ; Set P=R4 as program counter
  628/ 367 : D4                                 SEP R4
  628/ 368 : 02 C9                                      dw 02C9H
  629/ 36A : AD                         addr036a:        plo RD         ; Put low register RD
  630/ 36B : 4D                         addr036b:        lda RD         ; Load D from (RD), increment RD
  631/ 36C : BA                         addr036c:        phi RA         ; Put high register RA
  632/ 36D : 4D                         addr036d:        lda RD         ; Load D from (RD), increment RD
  633/ 36E : 30 55                      addr036e:        br  addr0355        ; Short branch
  634/ 370 : FB 2F                      addr0370:        xri  2fh        ; Logical XOR D with value
  635/ 372 : 32 66                      addr0372:        bz  addr0366        ; Short branch on D=0
  636/ 374 : FB 22                      addr0374:        xri  22h        ; Logical XOR D with value
  637/ 376 : (MACRO)                    addr0376:        CALL   03f4h    ; Set P=R4 as program counter
  637/ 376 : D4                                 SEP R4
  637/ 377 : 03 F4                                      dw 03F4H
  638/ 379 : 4B                         addr0379:        lda RB         ; Load D from (RB), increment RB
  639/ 37A : FB 0D                      addr037a:        xri  0dh        ; Logical XOR D with value
  640/ 37C : 3A 70                      addr037c:        bnz  addr0370       ; Short branch on D!=0
  641/ 37E : 29                         addr037e:        dec R9         ; Decrement (R9)
  642/ 37F : D7                         addr037f:        sep R7         ; Set P=R7 as program counter
  643/ 380 : 18                         addr0380:        inc R8         ; Increment (R8)
  644/ 381 : B8                         addr0381:        phi R8         ; Put high register R8
  645/ 382 : (MACRO)                    addr0382:        CALL   03cch    ; Set P=R4 as program counter
  645/ 382 : D4                                 SEP R4
  645/ 383 : 03 CC                                      dw 03CCH
  646/ 385 : F8 21                      addr0385:        ldi  21h        ; Load D immediate
  647/ 387 : (MACRO)                    addr0387:        CALL   03f4h    ; Set P=R4 as program counter
  647/ 387 : D4                                 SEP R4
  647/ 388 : 03 F4                                      dw 03F4H
  648/ 38A : D7                         addr038a:        sep R7         ; Set P=R7 as program counter
  649/ 38B : 1E                         addr038b:        inc RE         ; Increment (RE)
  650/ 38C : 89                         addr038c:        glo R9         ; Get low register R9
  651/ 38D : F7                         addr038d:        sm             ; Substract memory: DF,D=D-(R(X))
  652/ 38E : AA                         addr038e:        plo RA         ; Put low register RA
  653/ 38F : 99                         addr038f:        ghi R9         ; Get high register R9
  654/ 390 : 2D                         addr0390:        dec RD         ; Decrement (RD)
  655/ 391 : 77                         addr0391:        smb            ; Substract memory with borrow
  656/ 392 : BA                         addr0392:        phi RA         ; Put high register RA
  657/ 393 : (MACRO)                    addr0393:        CALL   0415h    ; Set P=R4 as program counter
  657/ 393 : D4                                 SEP R4
  657/ 394 : 04 15                                      dw 0415H
  658/ 396 : 98                         addr0396:        ghi R8         ; Get high register R8
  659/ 397 : 32 A9                      addr0397:        bz  addr03a9        ; Short branch on D=0
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 13 - 09/11/2024 10:24:33 PM


  660/ 399 : F8 BD                      addr0399:        ldi  0bdh        ; Load D immediate
  661/ 39B : A9                         addr039b:        plo R9         ; Put low register R9
  662/ 39C : 93                         addr039c:        ghi R3         ; Get high register R3
  663/ 39D : B9                         addr039d:        phi R9         ; Put high register R9
  664/ 39E : (MACRO)                    addr039e:        CALL   03c5h    ; Set P=R4 as program counter
  664/ 39E : D4                                 SEP R4
  664/ 39F : 03 C5                                      dw 03C5H
  665/ 3A1 : D7                         addr03a1:        sep R7         ; Set P=R7 as program counter
  666/ 3A2 : 28                         addr03a2:        dec R8         ; Decrement (R8)
  667/ 3A3 : BA                         addr03a3:        phi RA         ; Put high register RA
  668/ 3A4 : 4D                         addr03a4:        lda RD         ; Load D from (RD), increment RD
  669/ 3A5 : AA                         addr03a5:        plo RA         ; Put low register RA
  670/ 3A6 : (MACRO)                    addr03a6:        CALL   0415h    ; Set P=R4 as program counter
  670/ 3A6 : D4                                 SEP R4
  670/ 3A7 : 04 15                                      dw 0415H
  671/ 3A9 : F8 07                      addr03a9:        ldi  07h        ; Load D immediate
  672/ 3AB : (MACRO)                    addr03ab:        CALL   0109h    ; Set P=R4 as program counter
  672/ 3AB : D4                                 SEP R4
  672/ 3AC : 01 09                                      dw 0109H
  673/ 3AE : (MACRO)                    addr03ae:        CALL   03d5h    ; Set P=R4 as program counter
  673/ 3AE : D4                                 SEP R4
  673/ 3AF : 03 D5                                      dw 03D5H
  674/ 3B1 : D7                         addr03b1:        sep R7         ; Set P=R7 as program counter
  675/ 3B2 : 1A                         addr03b2:        inc RA         ; Increment (RA)
  676/ 3B3 : 9D                         addr03b3:        ghi RD         ; Get high register RD
  677/ 3B4 : 5D                         addr03b4:        str RD         ; Store D to (RD)
  678/ 3B5 : D7                         addr03b5:        sep R7         ; Set P=R7 as program counter
  679/ 3B6 : 26                         addr03b6:        dec R6         ; Decrement (R6)
  680/ 3B7 : B2                         addr03b7:        phi R2         ; Put high register R2
  681/ 3B8 : 4D                         addr03b8:        lda RD         ; Load D from (RD), increment RD
  682/ 3B9 : A2                         addr03b9:        plo R2         ; Put low register R2
  683/ 3BA : C0 02 28                   addr03ba:        lbr  0228h      ; Long branch
  684/ 3BD : 20                         addr03bd:        dec R0         ; Decrement (R0)
  685/ 3BE : 41                         addr03be:        lda R1         ; Load D from (R1), increment R1
  686/ 3BF : 54                         addr03bf:        str R4         ; Store D to (R4)
  687/ 3C0 : 20                         addr03c0:        dec R0         ; Decrement (R0)
  688/ 3C1 : A3                         addr03c1:        plo R3         ; Put low register R3
  689/ 3C2 : (MACRO)                    addr03c2:        CALL   03f2h    ; Set P=R4 as program counter
  689/ 3C2 : D4                                 SEP R4
  689/ 3C3 : 03 F2                                      dw 03F2H
  690/ 3C5 : 49                         addr03c5:        lda R9         ; Load D from (R9), increment R9
  691/ 3C6 : FC 80                      addr03c6:        adi  80h        ; Add D,DF with value
  692/ 3C8 : 3B C2                      addr03c8:        bnf  addr03c2       ; Short branch on DF=0
  693/ 3CA : 30 F2                      addr03ca:        br   addr03f2        ; Short branch
  694/ 3CC : D7                         addr03cc:        sep R7         ; Set P=R7 as program counter
  695/ 3CD : 19                         addr03cd:        inc R9         ; Increment (R9)
  696/ 3CE : F8 80                      addr03ce:        ldi  80h        ; Load D immediate
  697/ 3D0 : 73                         addr03d0:        stxd           ; Store via X and devrement
  698/ 3D1 : 9D                         addr03d1:        ghi RD         ; Get high register RD
  699/ 3D2 : 73                         addr03d2:        stxd           ; Store via X and devrement
  700/ 3D3 : 73                         addr03d3:        stxd           ; Store via X and devrement
  701/ 3D4 : C8                         addr03d4:        lskp           ; Long skip
  702/ 3D5 : D7                         addr03d5:        sep R7         ; Set P=R7 as program counter
  703/ 3D6 : 1B                         addr03d6:        inc RB         ; Increment (RB)
  704/ 3D7 : FE                         addr03d7:        shl            ; Shift left D
  705/ 3D8 : 33 66                      addr03d8:        bdf  addr0366       ; Short branch on DF=1
  706/ 3DA : D7                         addr03da:        sep R7         ; Set P=R7 as program counter
  707/ 3DB : 15                         addr03db:        inc R5         ; Increment (R5)
  708/ 3DC : AA                         addr03dc:        plo RA         ; Put low register RA
  709/ 3DD : F8 0D                      addr03dd:        ldi  0dh        ; Load D immediate
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 14 - 09/11/2024 10:24:33 PM


  710/ 3DF : (MACRO)                    addr03df:        CALL   0109h    ; Set P=R4 as program counter
  710/ 3DF : D4                                 SEP R4
  710/ 3E0 : 01 09                                      dw 0109H
  711/ 3E2 : D7                         addr03e2:        sep R7         ; Set P=R7 as program counter
  712/ 3E3 : 1A                         addr03e3:        inc RA         ; Increment (RA)
  713/ 3E4 : 8A                         addr03e4:        glo RA         ; Get low register RA
  714/ 3E5 : FE                         addr03e5:        shl            ; Shift left D
  715/ 3E6 : 32 EF                      addr03e6:        bz  addr03ef        ; Short branch on D=0
  716/ 3E8 : 2A                         addr03e8:        dec RA         ; Decrement (RA)
  717/ 3E9 : 9D                         addr03e9:        ghi RD         ; Get high register RD
  718/ 3EA : C7                         addr03ea:        lsnf           ; Long skip on DF=0
  719/ 3EB : F8 FF                      addr03eb:        ldi  0ffh        ; Load D immediate
  720/ 3ED : 30 DF                      addr03ed:        br  addr03df        ; Short branch
  721/ 3EF : 73                         addr03ef:        stxd           ; Store via X and devrement
  722/ 3F0 : F8 8A                      addr03f0:        ldi  8ah        ; Load D immediate
  723/ 3F2 : FF 80                      addr03f2:        smi  80h        ; Substract D,DF to value
  724/ 3F4 : BF                         addr03f4:        phi RF         ; Put high register RF
  725/ 3F5 : D7                         addr03f5:        sep R7         ; Set P=R7 as program counter
  726/ 3F6 : 1B                         addr03f6:        inc RB         ; Increment (RB)
  727/ 3F7 : 2D                         addr03f7:        dec RD         ; Decrement (RD)
  728/ 3F8 : FC 81                      addr03f8:        adi  81h        ; Add D,DF with value
  729/ 3FA : FC 80                      addr03fa:        adi  80h        ; Add D,DF with value
  730/ 3FC : 3B 66                      addr03fc:        bnf  addr0366       ; Short branch on DF=0
  731/ 3FE : 5D                         addr03fe:        str RD         ; Store D to (RD)
  732/ 3FF : 9F                         addr03ff:        ghi RF         ; Get high register RF
  733/ 400 : C0 01 09                   addr0400:        lbr  0109h      ; Long branch
  734/ 403 : F8 20                      addr0403:        ldi  20h        ; Load D immediate
  735/ 405 : (MACRO)                    addr0405:        CALL   03f4h    ; Set P=R4 as program counter
  735/ 405 : D4                                 SEP R4
  735/ 406 : 03 F4                                      dw 03F4H
  736/ 408 : D7                         addr0408:        sep R7         ; Set P=R7 as program counter
  737/ 409 : 1B                         addr0409:        inc RB         ; Increment (RB)
  738/ 40A : FA 07                      addr040a:        ani  07h        ; Logical AND D with value
  739/ 40C : 3A 03                      addr040c:        bnz  addr0403       ; Short branch on D!=0
  740/ 40E : (MACRO)                    addr040e:        RETURN         ; Set P=R5 as program counter
  740/ 40E : D5                                 SEP R5
  741/ 40F :                            
  742/ 40F : (MACRO)                    addr040f:        CALL   03f4h    ; Set P=R4 as program counter
  742/ 40F : D4                                 SEP R4
  742/ 410 : 03 F4                                      dw 03F4H
  743/ 412 : 2A                         addr0412:        dec RA         ; Decrement (RA)
  744/ 413 : 30 0A                      addr0413:        br  addr040a        ; Short branch
  745/ 415 : (MACRO)                    addr0415:        CALL   0354h    ; Set P=R4 as program counter
  745/ 415 : D4                                 SEP R4
  745/ 416 : 03 54                                      dw 0354H
  746/ 418 : D7                         addr0418:        sep R7         ; Set P=R7 as program counter
  747/ 419 : 1A                         addr0419:        inc RA         ; Increment (RA)
  748/ 41A : AD                         addr041a:        plo RD         ; Put low register RD
  749/ 41B : (MACRO)                    addr041b:        CALL   0513h    ; Set P=R4 as program counter
  749/ 41B : D4                                 SEP R4
  749/ 41C : 05 13                                      dw 0513H
  750/ 41E : 3B 25                      addr041e:        bnf  addr0425       ; Short branch on DF=0
  751/ 420 : F8 2D                      addr0420:        ldi  2dh        ; Load D immediate
  752/ 422 : (MACRO)                    addr0422:        CALL   03f4h    ; Set P=R4 as program counter
  752/ 422 : D4                                 SEP R4
  752/ 423 : 03 F4                                      dw 03F4H
  753/ 425 : 9D                         addr0425:        ghi RD         ; Get high register RD
  754/ 426 : 73                         addr0426:        stxd           ; Store via X and devrement
  755/ 427 : BA                         addr0427:        phi RA         ; Put high register RA
  756/ 428 : F8 0A                      addr0428:        ldi  0ah        ; Load D immediate
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 15 - 09/11/2024 10:24:33 PM


  757/ 42A : (MACRO)                    addr042a:        CALL   0355h    ; Set P=R4 as program counter
  757/ 42A : D4                                 SEP R4
  757/ 42B : 03 55                                      dw 0355H
  758/ 42D : 1D                         addr042d:        inc RD         ; Increment (RD)
  759/ 42E : (MACRO)                    addr042e:        CALL   04e3h    ; Set P=R4 as program counter
  759/ 42E : D4                                 SEP R4
  759/ 42F : 04 E3                                      dw 04E3H
  760/ 431 : 8A                         addr0431:        glo RA         ; Get low register RA
  761/ 432 : F6                         addr0432:        shr            ; Shift right D
  762/ 433 : F9 30                      addr0433:        ori  30h        ; Logical OR D with value
  763/ 435 : 73                         addr0435:        stxd           ; Store via X and devrement
  764/ 436 : 1D                         addr0436:        inc RD         ; Increment (RD)
  765/ 437 : 4D                         addr0437:        lda RD         ; Load D from (RD), increment RD
  766/ 438 : ED                         addr0438:        sex RD         ; Set P=RD as datapointer
  767/ 439 : F1                         addr0439:        or             ; Logical OR  D with (R(X))
  768/ 43A : 2D                         addr043a:        dec RD         ; Decrement (RD)
  769/ 43B : 2D                         addr043b:        dec RD         ; Decrement (RD)
  770/ 43C : 3A 2E                      addr043c:        bnz  addr042e       ; Short branch on D!=0
  771/ 43E : 12                         addr043e:        inc R2         ; Increment (R2)
  772/ 43F : 02                         addr043f:        ldn R2         ; Load D with (R2)
  773/ 440 : C2 02 C2                   addr0440:        lbz  02c2h      ; Long branch on D=0
  774/ 443 : (MACRO)                    addr0443:        CALL   03f4h    ; Set P=R4 as program counter
  774/ 443 : D4                                 SEP R4
  774/ 444 : 03 F4                                      dw 03F4H
  775/ 446 : 30 3E                      addr0446:        br  addr043e        ; Short branch
  776/ 448 : D7                         addr0448:        sep R7         ; Set P=R7 as program counter
  777/ 449 : 2E                         addr0449:        dec RE         ; Decrement (RE)
  778/ 44A : 38                         addr044a:        skp            ; Skip next byte
  779/ 44B : 9B                         addr044b:        ghi RB         ; Get high register RB
  780/ 44C : FB 00                      addr044c:        xri  00h        ; Logical XOR D with value
  781/ 44E : 3A 5E                      addr044e:        bnz  addr045e       ; Short branch on D!=0
  782/ 450 : 8B                         addr0450:        glo RB         ; Get low register RB
  783/ 451 : 52                         addr0451:        str R2         ; Store D to (R2)
  784/ 452 : F0                         addr0452:        ldx            ; Pop stack. Place value in D register
  785/ 453 : FF 80                      addr0453:        smi  80h        ; Substract D,DF to value
  786/ 455 : 33 5E                      addr0455:        bdf  addr045e       ; Short branch on DF=1
  787/ 457 : D7                         addr0457:        sep R7         ; Set P=R7 as program counter
  788/ 458 : 2E                         addr0458:        dec RE         ; Decrement (RE)
  789/ 459 : 8B                         addr0459:        glo RB         ; Get low register RB
  790/ 45A : 73                         addr045a:        stxd           ; Store via X and devrement
  791/ 45B : 9B                         addr045b:        ghi RB         ; Get high register RB
  792/ 45C : 5D                         addr045c:        str RD         ; Store D to (RD)
  793/ 45D : (MACRO)                    addr045d:        RETURN         ; Set P=R5 as program counter
  793/ 45D : D5                                 SEP R5
  794/ 45E :                            
  795/ 45E : D7                         addr045e:        sep R7         ; Set P=R7 as program counter
  796/ 45F : 2E                         addr045f:        dec RE         ; Decrement (RE)
  797/ 460 : B8                         addr0460:        phi R8         ; Put high register R8
  798/ 461 : 0D                         addr0461:        ldn RD         ; Load D with (RD)
  799/ 462 : A8                         addr0462:        plo R8         ; Put low register R8
  800/ 463 : 8B                         addr0463:        glo RB         ; Get low register RB
  801/ 464 : 73                         addr0464:        stxd           ; Store via X and devrement
  802/ 465 : 9B                         addr0465:        ghi RB         ; Get high register RB
  803/ 466 : 5D                         addr0466:        str RD         ; Store D to (RD)
  804/ 467 : 98                         addr0467:        ghi R8         ; Get high register R8
  805/ 468 : BB                         addr0468:        phi RB         ; Put high register RB
  806/ 469 : 88                         addr0469:        glo R8         ; Get low register R8
  807/ 46A : AB                         addr046a:        plo RB         ; Put low register RB
  808/ 46B : (MACRO)                    addr046b:        RETURN         ; Set P=R5 as program counter
  808/ 46B : D5                                 SEP R5
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 16 - 09/11/2024 10:24:33 PM


  809/ 46C :                            
  810/ 46C : (MACRO)                    addr046c:        CALL   02c5h    ; Set P=R4 as program counter
  810/ 46C : D4                                 SEP R4
  810/ 46D : 02 C5                                      dw 02C5H
  811/ 46F : 9A                         addr046f:        ghi RA         ; Get high register RA
  812/ 470 : FB 80                      addr0470:        xri  80h        ; Logical XOR D with value
  813/ 472 : 73                         addr0472:        stxd           ; Store via X and devrement
  814/ 473 : 8A                         addr0473:        glo RA         ; Get low register RA
  815/ 474 : 73                         addr0474:        stxd           ; Store via X and devrement
  816/ 475 : (MACRO)                    addr0475:        CALL   02c9h    ; Set P=R4 as program counter
  816/ 475 : D4                                 SEP R4
  816/ 476 : 02 C9                                      dw 02C9H
  817/ 478 : AF                         addr0478:        plo RF         ; Put low register RF
  818/ 479 : (MACRO)                    addr0479:        CALL   02c5h    ; Set P=R4 as program counter
  818/ 479 : D4                                 SEP R4
  818/ 47A : 02 C5                                      dw 02C5H
  819/ 47C : 12                         addr047c:        inc R2         ; Increment (R2)
  820/ 47D : 8A                         addr047d:        glo RA         ; Get low register RA
  821/ 47E : F7                         addr047e:        sm             ; Substract memory: DF,D=D-(R(X))
  822/ 47F : AA                         addr047f:        plo RA         ; Put low register RA
  823/ 480 : 12                         addr0480:        inc R2         ; Increment (R2)
  824/ 481 : 9A                         addr0481:        ghi RA         ; Get high register RA
  825/ 482 : FB 80                      addr0482:        xri  80h        ; Logical XOR D with value
  826/ 484 : 77                         addr0484:        smb            ; Substract memory with borrow
  827/ 485 : 52                         addr0485:        str R2         ; Store D to (R2)
  828/ 486 : 3B 92                      addr0486:        bnf  addr0492       ; Short branch on DF=0
  829/ 488 : 8A                         addr0488:        glo RA         ; Get low register RA
  830/ 489 : F1                         addr0489:        or             ; Logical OR  D with (R(X))
  831/ 48A : 32 8F                      addr048a:        bz  addr048f        ; Short branch on D=0
  832/ 48C : 8F                         addr048c:        glo RF         ; Get low register RF
  833/ 48D : F6                         addr048d:        shr            ; Shift right D
  834/ 48E : 38                         addr048e:        skp            ; Skip next byte
  835/ 48F : 8F                         addr048f:        glo RF         ; Get low register RF
  836/ 490 : F6                         addr0490:        shr            ; Shift right D
  837/ 491 : 38                         addr0491:        skp            ; Skip next byte
  838/ 492 : 8F                         addr0492:        glo RF         ; Get low register RF
  839/ 493 : F6                         addr0493:        shr            ; Shift right D
  840/ 494 : C7                         addr0494:        lsnf           ; Long skip on DF=0
  841/ 495 : C4                         addr0495:        nop            ; No operation
  842/ 496 : 19                         addr0496:        inc R9         ; Increment (R9)
  843/ 497 : (MACRO)                    addr0497:        RETURN         ; Set P=R5 as program counter
  843/ 497 : D5                                 SEP R5
  844/ 498 :                            
  845/ 498 : (MACRO)                    addr0498:        CALL   050eh    ; Set P=R4 as program counter
  845/ 498 : D4                                 SEP R4
  845/ 499 : 05 0E                                      dw 050EH
  846/ 49B : (MACRO)                    addr049b:        CALL   02c5h    ; Set P=R4 as program counter
  846/ 49B : D4                                 SEP R4
  846/ 49C : 02 C5                                      dw 02C5H
  847/ 49E : ED                         addr049e:        sex RD         ; Set P=RD as datapointer
  848/ 49F : 1D                         addr049f:        inc RD         ; Increment (RD)
  849/ 4A0 : 8A                         addr04a0:        glo RA         ; Get low register RA
  850/ 4A1 : F4                         addr04a1:        add            ; Add D: D,DF= D+(R(X))
  851/ 4A2 : 73                         addr04a2:        stxd           ; Store via X and devrement
  852/ 4A3 : 9A                         addr04a3:        ghi RA         ; Get high register RA
  853/ 4A4 : 74                         addr04a4:        adc            ; Add with carry
  854/ 4A5 : 5D                         addr04a5:        str RD         ; Store D to (RD)
  855/ 4A6 : (MACRO)                    addr04a6:        RETURN         ; Set P=R5 as program counter
  855/ 4A6 : D5                                 SEP R5
  856/ 4A7 :                            
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 17 - 09/11/2024 10:24:33 PM


  857/ 4A7 : (MACRO)                    addr04a7:        CALL   02c5h    ; Set P=R4 as program counter
  857/ 4A7 : D4                                 SEP R4
  857/ 4A8 : 02 C5                                      dw 02C5H
  858/ 4AA : F8 10                      addr04aa:        ldi  10h        ; Load D immediate
  859/ 4AC : AF                         addr04ac:        plo RF         ; Put low register RF
  860/ 4AD : 4D                         addr04ad:        lda RD         ; Load D from (RD), increment RD
  861/ 4AE : B8                         addr04ae:        phi R8         ; Put high register R8
  862/ 4AF : 0D                         addr04af:        ldn RD         ; Load D with (RD)
  863/ 4B0 : A8                         addr04b0:        plo R8         ; Put low register R8
  864/ 4B1 : 0D                         addr04b1:        ldn RD         ; Load D with (RD)
  865/ 4B2 : FE                         addr04b2:        shl            ; Shift left D
  866/ 4B3 : 5D                         addr04b3:        str RD         ; Store D to (RD)
  867/ 4B4 : 2D                         addr04b4:        dec RD         ; Decrement (RD)
  868/ 4B5 : 0D                         addr04b5:        ldn RD         ; Load D with (RD)
  869/ 4B6 : 7E                         addr04b6:        shlc           ; Shift left with carry
  870/ 4B7 : 5D                         addr04b7:        str RD         ; Store D to (RD)
  871/ 4B8 : (MACRO)                    addr04b8:        CALL   0522h    ; Set P=R4 as program counter
  871/ 4B8 : D4                                 SEP R4
  871/ 4B9 : 05 22                                      dw 0522H
  872/ 4BB : 3B C5                      addr04bb:        bnf  addr04c5       ; Short branch on DF=0
  873/ 4BD : ED                         addr04bd:        sex RD         ; Set P=RD as datapointer
  874/ 4BE : 1D                         addr04be:        inc RD         ; Increment (RD)
  875/ 4BF : 88                         addr04bf:        glo R8         ; Get low register R8
  876/ 4C0 : F4                         addr04c0:        add            ; Add D: D,DF= D+(R(X))
  877/ 4C1 : 73                         addr04c1:        stxd           ; Store via X and devrement
  878/ 4C2 : 98                         addr04c2:        ghi R8         ; Get high register R8
  879/ 4C3 : 74                         addr04c3:        adc            ; Add with carry
  880/ 4C4 : 5D                         addr04c4:        str RD         ; Store D to (RD)
  881/ 4C5 : 2F                         addr04c5:        dec RF         ; Decrement (RF)
  882/ 4C6 : 8F                         addr04c6:        glo RF         ; Get low register RF
  883/ 4C7 : 1D                         addr04c7:        inc RD         ; Increment (RD)
  884/ 4C8 : 3A B1                      addr04c8:        bnz   addr04b1       ; Short branch on D!=0
  885/ 4CA : (MACRO)                    addr04ca:        RETURN         ; Set P=R5 as program counter
  885/ 4CA : D5                                 SEP R5
  886/ 4CB :                            
  887/ 4CB : (MACRO)                    addr04cb:        CALL   02c5h    ; Set P=R4 as program counter
  887/ 4CB : D4                                 SEP R4
  887/ 4CC : 02 C5                                      dw 02C5H
  888/ 4CE : 9A                         addr04ce:        ghi RA         ; Get high register RA
  889/ 4CF : 52                         addr04cf:        str R2         ; Store D to (R2)
  890/ 4D0 : 8A                         addr04d0:        glo RA         ; Get low register RA
  891/ 4D1 : F1                         addr04d1:        or             ; Logical OR  D with (R(X))
  892/ 4D2 : C2 03 7F                   addr04d2:        lbz  addr037f      ; Long branch on D=0
  893/ 4D5 : 0D                         addr04d5:        ldn RD         ; Load D with (RD)
  894/ 4D6 : F3                         addr04d6:        xor            ; Logical exclusive OR  D with (R(X))
  895/ 4D7 : 73                         addr04d7:        stxd           ; Store via X and devrement
  896/ 4D8 : (MACRO)                    addr04d8:        CALL   0513h    ; Set P=R4 as program counter
  896/ 4D8 : D4                                 SEP R4
  896/ 4D9 : 05 13                                      dw 0513H
  897/ 4DB : 2D                         addr04db:        dec RD         ; Decrement (RD)
  898/ 4DC : 2D                         addr04dc:        dec RD         ; Decrement (RD)
  899/ 4DD : (MACRO)                    addr04dd:        CALL   0513h    ; Set P=R4 as program counter
  899/ 4DD : D4                                 SEP R4
  899/ 4DE : 05 13                                      dw 0513H
  900/ 4E0 : 1D                         addr04e0:        inc RD         ; Increment (RD)
  901/ 4E1 : 9D                         addr04e1:        ghi RD         ; Get high register RD
  902/ 4E2 : C8                         addr04e2:        lskp           ; Long skip
  903/ 4E3 : 9D                         addr04e3:        ghi RD         ; Get high register RD
  904/ 4E4 : 73                         addr04e4:        stxd           ; Store via X and devrement
  905/ 4E5 : AA                         addr04e5:        plo RA         ; Put low register RA
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 18 - 09/11/2024 10:24:33 PM


  906/ 4E6 : BA                         addr04e6:        phi RA         ; Put high register RA
  907/ 4E7 : F8 11                      addr04e7:        ldi  11h        ; Load D immediate
  908/ 4E9 : AF                         addr04e9:        plo RF         ; Put low register RF
  909/ 4EA : ED                         addr04ea:        sex RD         ; Set P=RD as datapointer
  910/ 4EB : 8A                         addr04eb:        glo RA         ; Get low register RA
  911/ 4EC : F7                         addr04ec:        sm             ; Substract memory: DF,D=D-(R(X))
  912/ 4ED : 52                         addr04ed:        str R2         ; Store D to (R2)
  913/ 4EE : 2D                         addr04ee:        dec RD         ; Decrement (RD)
  914/ 4EF : 9A                         addr04ef:        ghi RA         ; Get high register RA
  915/ 4F0 : 77                         addr04f0:        smb            ; Substract memory with borrow
  916/ 4F1 : 3B F6                      addr04f1:        bnf addr04f6       ; Short branch on DF=0
  917/ 4F3 : BA                         addr04f3:        phi RA         ; Put high register RA
  918/ 4F4 : 02                         addr04f4:        ldn R2         ; Load D with (R2)
  919/ 4F5 : AA                         addr04f5:        plo RA         ; Put low register RA
  920/ 4F6 : 1D                         addr04f6:        inc RD         ; Increment (RD)
  921/ 4F7 : 1D                         addr04f7:        inc RD         ; Increment (RD)
  922/ 4F8 : 1D                         addr04f8:        inc RD         ; Increment (RD)
  923/ 4F9 : F0                         addr04f9:        ldx            ; Pop stack. Place value in D register
  924/ 4FA : 7E                         addr04fa:        shlc           ; Shift left with carry
  925/ 4FB : 73                         addr04fb:        stxd           ; Store via X and devrement
  926/ 4FC : F0                         addr04fc:        ldx            ; Pop stack. Place value in D register
  927/ 4FD : 7E                         addr04fd:        shlc           ; Shift left with carry
  928/ 4FE : 73                         addr04fe:        stxd           ; Store via X and devrement
  929/ 4FF : 8A                         addr04ff:        glo RA         ; Get low register RA
  930/ 500 : 7E                         addr0500:        shlc           ; Shift left with carry
  931/ 501 : (MACRO)                    addr0501:        CALL   0524h    ; Set P=R4 as program counter
  931/ 501 : D4                                 SEP R4
  931/ 502 : 05 24                                      dw 0524H
  932/ 504 : 2F                         addr0504:        dec RF         ; Decrement (RF)
  933/ 505 : 8F                         addr0505:        glo RF         ; Get low register RF
  934/ 506 : CA 04 EA                   addr0506:        lbnz  04eah     ; Long branch on D!=0
  935/ 509 : 12                         addr0509:        inc R2         ; Increment (R2)
  936/ 50A : 02                         addr050a:        ldn R2         ; Load D with (R2)
  937/ 50B : FE                         addr050b:        shl            ; Shift left D
  938/ 50C : 3B 21                      addr050c:        bnf  addr0521       ; Short branch on DF=0
  939/ 50E : D7                         addr050e:        sep R7         ; Set P=R7 as program counter
  940/ 50F : 1A                         addr050f:        inc RA         ; Increment (RA)
  941/ 510 : AD                         addr0510:        plo RD         ; Put low register RD
  942/ 511 : 30 18                      addr0511:        br  addr0518        ; Short branch
  943/ 513 : ED                         addr0513:        sex RD         ; Set P=RD as datapointer
  944/ 514 : F0                         addr0514:        ldx            ; Pop stack. Place value in D register
  945/ 515 : FE                         addr0515:        shl            ; Shift left D
  946/ 516 : 3B 21                      addr0516:        bnf  addr0521       ; Short branch on DF=0
  947/ 518 : 1D                         addr0518:        inc RD         ; Increment (RD)
  948/ 519 : 9D                         addr0519:        ghi RD         ; Get high register RD
  949/ 51A : F7                         addr051a:        sm             ; Substract memory: DF,D=D-(R(X))
  950/ 51B : 73                         addr051b:        stxd           ; Store via X and devrement
  951/ 51C : 9D                         addr051c:        ghi RD         ; Get high register RD
  952/ 51D : 77                         addr051d:        smb            ; Substract memory with borrow
  953/ 51E : 5D                         addr051e:        str RD         ; Store D to (RD)
  954/ 51F : FF 00                      addr051f:        smi  00h        ; Substract D,DF to value
  955/ 521 : (MACRO)                    addr0521:        RETURN         ; Set P=R5 as program counter
  955/ 521 : D5                                 SEP R5
  956/ 522 :                            
  957/ 522 : 8A                         addr0522:        glo RA         ; Get low register RA
  958/ 523 : FE                         addr0523:        shl            ; Shift left D
  959/ 524 : AA                         addr0524:        plo RA         ; Put low register RA
  960/ 525 : 9A                         addr0525:        ghi RA         ; Get high register RA
  961/ 526 : 7E                         addr0526:        shlc           ; Shift left with carry
  962/ 527 : BA                         addr0527:        phi RA         ; Put high register RA
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 19 - 09/11/2024 10:24:33 PM


  963/ 528 : (MACRO)                    addr0528:        RETURN         ; Set P=R5 as program counter
  963/ 528 : D5                                 SEP R5
  964/ 529 :                            
  965/ 529 : D7                         addr0529:        sep R7         ; Set P=R7 as program counter
  966/ 52A : 18                         addr052a:        inc R8         ; Increment (R8)
  967/ 52B : C2 03 B1                   addr052b:        lbz  03b1h      ; Long branch on D=0
  968/ 52E : 4B                         addr052e:        lda RB         ; Load D from (RB), increment RB
  969/ 52F : FB 0D                      addr052f:        xri  0dh        ; Logical XOR D with value
  970/ 531 : 3A 2E                      addr0531:        bnz  addr052e       ; Short branch on D!=0
  971/ 533 : (MACRO)                    addr0533:        CALL   0698h    ; Set P=R4 as program counter
  971/ 533 : D4                                 SEP R4
  971/ 534 : 06 98                                      dw 0698H
  972/ 536 : 32 4B                      addr0536:        bz  addr054b        ; Short branch on D=0
  973/ 538 : (MACRO)                    addr0538:        CALL   010ch    ; Set P=R4 as program counter
  973/ 538 : D4                                 SEP R4
  973/ 539 : 01 0C                                      dw 010CH
  974/ 53B : 33 46                      addr053b:        bdf  addr0546       ; Short branch on DF=1
  975/ 53D : D7                         addr053d:        sep R7         ; Set P=R7 as program counter
  976/ 53E : 1C                         addr053e:        inc RC         ; Increment (RC)
  977/ 53F : B9                         addr053f:        phi R9         ; Put high register R9
  978/ 540 : 4D                         addr0540:        lda RD         ; Load D from (RD), increment RD
  979/ 541 : A9                         addr0541:        plo R9         ; Put low register R9
  980/ 542 : D7                         addr0542:        sep R7         ; Set P=R7 as program counter
  981/ 543 : 17                         addr0543:        inc R7         ; Increment (R7)
  982/ 544 : 5D                         addr0544:        str RD         ; Store D to (RD)
  983/ 545 : (MACRO)                    addr0545:        RETURN         ; Set P=R5 as program counter
  983/ 545 : D5                                 SEP R5
  984/ 546 :                            
  985/ 546 : D7                         addr0546:        sep R7         ; Set P=R7 as program counter
  986/ 547 : 1E                         addr0547:        inc RE         ; Increment (RE)
  987/ 548 : B9                         addr0548:        phi R9         ; Put high register R9
  988/ 549 : 4D                         addr0549:        lda RD         ; Load D from (RD), increment RD
  989/ 54A : A9                         addr054a:        plo R9         ; Put low register R9
  990/ 54B : C0 03 7F                   addr054b:        lbr  037fh      ; Long branch
  991/ 54E : D7                         addr054e:        sep R7         ; Set P=R7 as program counter
  992/ 54F : 20                         addr054f:        dec R0         ; Decrement (R0)
  993/ 550 : BB                         addr0550:        phi RB         ; Put high register RB
  994/ 551 : 4D                         addr0551:        lda RD         ; Load D from (RD), increment RD
  995/ 552 : AB                         addr0552:        plo RB         ; Put low register RB
  996/ 553 : (MACRO)                    addr0553:        CALL   0698h    ; Set P=R4 as program counter
  996/ 553 : D4                                 SEP R4
  996/ 554 : 06 98                                      dw 0698H
  997/ 556 : 32 4B                      addr0556:        bz  addr054b        ; Short branch on D=0
  998/ 558 : D7                         addr0558:        sep R7         ; Set P=R7 as program counter
  999/ 559 : 1C                         addr0559:        inc RC         ; Increment (RC)
 1000/ 55A : 89                         addr055a:        glo R9         ; Get low register R9
 1001/ 55B : 73                         addr055b:        stxd           ; Store via X and devrement
 1002/ 55C : 99                         addr055c:        ghi R9         ; Get high register R9
 1003/ 55D : 5D                         addr055d:        str RD         ; Store D to (RD)
 1004/ 55E : 30 42                      addr055e:        br  addr0542        ; Short branch
 1005/ 560 : (MACRO)                    addr0560:        CALL   05feh    ; Set P=R4 as program counter
 1005/ 560 : D4                                 SEP R4
 1005/ 561 : 05 FE                                      dw 05FEH
 1006/ 563 : 32 38                      addr0563:        bz  addr0538        ; Short branch on D=0
 1007/ 565 : D7                         addr0565:        sep R7         ; Set P=R7 as program counter
 1008/ 566 : 28                         addr0566:        dec R8         ; Decrement (R8)
 1009/ 567 : 8A                         addr0567:        glo RA         ; Get low register RA
 1010/ 568 : 73                         addr0568:        stxd           ; Store via X and devrement
 1011/ 569 : 9A                         addr0569:        ghi RA         ; Get high register RA
 1012/ 56A : 5D                         addr056a:        str RD         ; Store D to (RD)
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 20 - 09/11/2024 10:24:33 PM


 1013/ 56B : 30 4B                      addr056b:        br  addr054b        ; Short branch
 1014/ 56D : (MACRO)                    addr056d:        CALL   058bh    ; Set P=R4 as program counter
 1014/ 56D : D4                                 SEP R4
 1014/ 56E : 05 8B                                      dw 058BH
 1015/ 570 : 42                         addr0570:        lda R2         ; Load D from (R2), increment R2
 1016/ 571 : BA                         addr0571:        phi RA         ; Put high register RA
 1017/ 572 : 02                         addr0572:        ldn R2         ; Load D with (R2)
 1018/ 573 : AA                         addr0573:        plo RA         ; Put low register RA
 1019/ 574 : D7                         addr0574:        sep R7         ; Set P=R7 as program counter
 1020/ 575 : 26                         addr0575:        dec R6         ; Decrement (R6)
 1021/ 576 : 82                         addr0576:        glo R2         ; Get low register R2
 1022/ 577 : 73                         addr0577:        stxd           ; Store via X and devrement
 1023/ 578 : 92                         addr0578:        ghi R2         ; Get high register R2
 1024/ 579 : 73                         addr0579:        stxd           ; Store via X and devrement
 1025/ 57A : (MACRO)                    addr057a:        CALL   0601h    ; Set P=R4 as program counter
 1025/ 57A : D4                                 SEP R4
 1025/ 57B : 06 01                                      dw 0601H
 1026/ 57D : 3A 65                      addr057d:        bnz  addr0565       ; Short branch on D!=0
 1027/ 57F : 30 88                      addr057f:        br  addr0588        ; Short branch
 1028/ 581 : (MACRO)                    addr0581:        CALL   058bh    ; Set P=R4 as program counter
 1028/ 581 : D4                                 SEP R4
 1028/ 582 : 05 8B                                      dw 058BH
 1029/ 584 : 42                         addr0584:        lda R2         ; Load D from (R2), increment R2
 1030/ 585 : B9                         addr0585:        phi R9         ; Put high register R9
 1031/ 586 : 02                         addr0586:        ldn R2         ; Load D with (R2)
 1032/ 587 : A9                         addr0587:        plo R9         ; Put low register R9
 1033/ 588 : C0 02 2D                   addr0588:        lbr  022dh      ; Long branch
 1034/ 58B : D7                         addr058b:        sep R7         ; Set P=R7 as program counter
 1035/ 58C : 22                         addr058c:        dec R2         ; Decrement (R2)
 1036/ 58D : 12                         addr058d:        inc R2         ; Increment (R2)
 1037/ 58E : 12                         addr058e:        inc R2         ; Increment (R2)
 1038/ 58F : 82                         addr058f:        glo R2         ; Get low register R2
 1039/ 590 : FC 02                      addr0590:        adi  02h        ; Add D,DF with value
 1040/ 592 : F3                         addr0592:        xor            ; Logical exclusive OR  D with (R(X))
 1041/ 593 : 2D                         addr0593:        dec RD         ; Decrement (RD)
 1042/ 594 : 3A 9C                      addr0594:        bnz  addr059c       ; Short branch on D!=0
 1043/ 596 : 92                         addr0596:        ghi R2         ; Get high register R2
 1044/ 597 : 7C 00                      addr0597:        adci  00h       ; Add with carry immediate
 1045/ 599 : F3                         addr0599:        xor            ; Logical exclusive OR  D with (R(X))
 1046/ 59A : 32 4B                      addr059a:        bz  addr054b        ; Short branch on D=0
 1047/ 59C : 12                         addr059c:        inc R2         ; Increment (R2)
 1048/ 59D : (MACRO)                    addr059d:        RETURN         ; Set P=R5 as program counter
 1048/ 59D : D5                                 SEP R5
 1049/ 59E :                            
 1050/ 59E : D7                         addr059e:        sep R7         ; Set P=R7 as program counter
 1051/ 59F : 16                         addr059f:        inc R6         ; Increment (R6)
 1052/ 5A0 : 38                         addr05a0:        skp            ; Skip next byte
 1053/ 5A1 : 9D                         addr05a1:        ghi RD         ; Get high register RD
 1054/ 5A2 : FE                         addr05a2:        shl            ; Shift left D
 1055/ 5A3 : D7                         addr05a3:        sep R7         ; Set P=R7 as program counter
 1056/ 5A4 : 1A                         addr05a4:        inc RA         ; Increment (RA)
 1057/ 5A5 : 9D                         addr05a5:        ghi RD         ; Get high register RD
 1058/ 5A6 : 76                         addr05a6:        shrc           ; Shift right with carry
 1059/ 5A7 : 5D                         addr05a7:        str RD         ; Store D to (RD)
 1060/ 5A8 : 30 B2                      addr05a8:        br  addr05b2        ; Short branch
 1061/ 5AA : F8 30                      addr05aa:        ldi  30h        ; Load D immediate
 1062/ 5AC : AB                         addr05ac:        plo RB         ; Put low register RB
 1063/ 5AD : (MACRO)                    addr05ad:        CALL   0354h    ; Set P=R4 as program counter
 1063/ 5AD : D4                                 SEP R4
 1063/ 5AE : 03 54                                      dw 0354H
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 21 - 09/11/2024 10:24:33 PM


 1064/ 5B0 : 9D                         addr05b0:        ghi RD         ; Get high register RD
 1065/ 5B1 : BB                         addr05b1:        phi RB         ; Put high register RB
 1066/ 5B2 : (MACRO)                    addr05b2:        CALL   0106h    ; Set P=R4 as program counter
 1066/ 5B2 : D4                                 SEP R4
 1066/ 5B3 : 01 06                                      dw 0106H
 1067/ 5B5 : FA 7F                      addr05b5:        ani  7fh        ; Logical AND D with value
 1068/ 5B7 : 32 B2                      addr05b7:        bz  addr05b2        ; Short branch on D=0
 1069/ 5B9 : 52                         addr05b9:        str R2         ; Store D to (R2)
 1070/ 5BA : FB 7F                      addr05ba:        xri  7fh        ; Logical XOR D with value
 1071/ 5BC : 32 B2                      addr05bc:        bz  addr05b2        ; Short branch on D=0
 1072/ 5BE : FB 75                      addr05be:        xri  75h        ; Logical XOR D with value
 1073/ 5C0 : 32 9E                      addr05c0:        bz  addr059e        ; Short branch on D=0
 1074/ 5C2 : FB 19                      addr05c2:        xri  19h        ; Logical XOR D with value
 1075/ 5C4 : 32 A1                      addr05c4:        bz  addr05a1        ; Short branch on D=0
 1076/ 5C6 : D7                         addr05c6:        sep R7         ; Set P=R7 as program counter
 1077/ 5C7 : 13                         addr05c7:        inc R3         ; Increment (R3)
 1078/ 5C8 : 02                         addr05c8:        ldn R2         ; Load D with (R2)
 1079/ 5C9 : F3                         addr05c9:        xor            ; Logical exclusive OR  D with (R(X))
 1080/ 5CA : 32 D7                      addr05ca:        bz  addr05d7        ; Short branch on D=0
 1081/ 5CC : 2D                         addr05cc:        dec RD         ; Decrement (RD)
 1082/ 5CD : 02                         addr05cd:        ldn R2         ; Load D with (R2)
 1083/ 5CE : F3                         addr05ce:        xor            ; Logical exclusive OR  D with (R(X))
 1084/ 5CF : 3A DD                      addr05cf:        bnz  addr05dd       ; Short branch on D!=0
 1085/ 5D1 : 2B                         addr05d1:        dec RB         ; Decrement (RB)
 1086/ 5D2 : 8B                         addr05d2:        glo RB         ; Get low register RB
 1087/ 5D3 : FF 30                      addr05d3:        smi  30h        ; Substract D,DF to value
 1088/ 5D5 : 33 B2                      addr05d5:        bdf  addr05b2       ; Short branch on DF=1
 1089/ 5D7 : F8 30                      addr05d7:        ldi  30h        ; Load D immediate
 1090/ 5D9 : AB                         addr05d9:        plo RB         ; Put low register RB
 1091/ 5DA : F8 0D                      addr05da:        ldi  0dh        ; Load D immediate
 1092/ 5DC : 38                         addr05dc:        skp            ; Skip next byte
 1093/ 5DD : 02                         addr05dd:        ldn R2         ; Load D with (R2)
 1094/ 5DE : 5B                         addr05de:        str RB         ; Store D to (RB)
 1095/ 5DF : D7                         addr05df:        sep R7         ; Set P=R7 as program counter
 1096/ 5E0 : 19                         addr05e0:        inc R9         ; Increment (R9)
 1097/ 5E1 : 8B                         addr05e1:        glo RB         ; Get low register RB
 1098/ 5E2 : F7                         addr05e2:        sm             ; Substract memory: DF,D=D-(R(X))
 1099/ 5E3 : 3B EC                      addr05e3:        bnf  addr05ec       ; Short branch on DF=0
 1100/ 5E5 : F8 07                      addr05e5:        ldi  07h        ; Load D immediate
 1101/ 5E7 : (MACRO)                    addr05e7:        CALL   03f4h    ; Set P=R4 as program counter
 1101/ 5E7 : D4                                 SEP R4
 1101/ 5E8 : 03 F4                                      dw 03F4H
 1102/ 5EA : 0B                         addr05ea:        ldn RB         ; Load D with (RB)
 1103/ 5EB : 38                         addr05eb:        skp            ; Skip next byte
 1104/ 5EC : 4B                         addr05ec:        lda RB         ; Load D from (RB), increment RB
 1105/ 5ED : FB 0D                      addr05ed:        xri  0dh        ; Logical XOR D with value
 1106/ 5EF : 3A B2                      addr05ef:        bnz  addr05b2       ; Short branch on D!=0
 1107/ 5F1 : (MACRO)                    addr05f1:        CALL   03d5h    ; Set P=R4 as program counter
 1107/ 5F1 : D4                                 SEP R4
 1107/ 5F2 : 03 D5                                      dw 03D5H
 1108/ 5F4 : D7                         addr05f4:        sep R7         ; Set P=R7 as program counter
 1109/ 5F5 : 18                         addr05f5:        inc R8         ; Increment (R8)
 1110/ 5F6 : 8B                         addr05f6:        glo RB         ; Get low register RB
 1111/ 5F7 : 5D                         addr05f7:        str RD         ; Store D to (RD)
 1112/ 5F8 : F8 30                      addr05f8:        ldi  30h        ; Load D immediate
 1113/ 5FA : AB                         addr05fa:        plo RB         ; Put low register RB
 1114/ 5FB : C0 02 C5                   addr05fb:        lbr  02c5h      ; Long branch
 1115/ 5FE : (MACRO)                    addr05fe:        CALL   02c5h    ; Set P=R4 as program counter
 1115/ 5FE : D4                                 SEP R4
 1115/ 5FF : 02 C5                                      dw 02C5H
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 22 - 09/11/2024 10:24:33 PM


 1116/ 601 : 8A                         addr0601:        glo RA         ; Get low register RA
 1117/ 602 : 52                         addr0602:        str R2         ; Store D to (R2)
 1118/ 603 : 9A                         addr0603:        ghi RA         ; Get high register RA
 1119/ 604 : F1                         addr0604:        or             ; Logical OR  D with (R(X))
 1120/ 605 : C2 03 7F                   addr0605:        lbz  037fh      ; Long branch on D=0
 1121/ 608 : D7                         addr0608:        sep R7         ; Set P=R7 as program counter
 1122/ 609 : 20                         addr0609:        dec R0         ; Decrement (R0)
 1123/ 60A : BB                         addr060a:        phi RB         ; Put high register RB
 1124/ 60B : 4D                         addr060b:        lda RD         ; Load D from (RD), increment RD
 1125/ 60C : AB                         addr060c:        plo RB         ; Put low register RB
 1126/ 60D : (MACRO)                    addr060d:        CALL   0698h    ; Set P=R4 as program counter
 1126/ 60D : D4                                 SEP R4
 1126/ 60E : 06 98                                      dw 0698H
 1127/ 610 : C6                         addr0610:        lsnz           ; Long skip on D!=0
 1128/ 611 : 8D                         addr0611:        glo RD         ; Get low register RD
 1129/ 612 : (MACRO)                    addr0612:        RETURN         ; Set P=R5 as program counter
 1129/ 612 : D5                                 SEP R5
 1130/ 613 :                            
 1131/ 613 : ED                         addr0613:        sex RD         ; Set P=RD as datapointer
 1132/ 614 : 8A                         addr0614:        glo RA         ; Get low register RA
 1133/ 615 : F5                         addr0615:        sd             ; Substract D: D,DF=(R(X))-D
 1134/ 616 : 52                         addr0616:        str R2         ; Store D to (R2)
 1135/ 617 : 9A                         addr0617:        ghi RA         ; Get high register RA
 1136/ 618 : 2D                         addr0618:        dec RD         ; Decrement (RD)
 1137/ 619 : 75                         addr0619:        sdb            ; Substract D with borrow
 1138/ 61A : E2                         addr061a:        sex R2         ; Set P=R2 as datapointer
 1139/ 61B : F1                         addr061b:        or             ; Logical OR  D with (R(X))
 1140/ 61C : 33 12                      addr061c:        bdf  addr0612       ; Short branch on DF=1
 1141/ 61E : 4B                         addr061e:        lda RB         ; Load D from (RB), increment RB
 1142/ 61F : FB 0D                      addr061f:        xri  0dh        ; Logical XOR D with value
 1143/ 621 : 3A 1E                      addr0621:        bnz  addr061e       ; Short branch on D!=0
 1144/ 623 : 30 0D                      addr0623:        br  addr060d        ; Short branch
 1145/ 625 : (MACRO)                    addr0625:        CALL   0628h    ; Set P=R4 as program counter
 1145/ 625 : D4                                 SEP R4
 1145/ 626 : 06 28                                      dw 0628H
 1146/ 628 : (MACRO)                    addr0628:        CALL   02c5h    ; Set P=R4 as program counter
 1146/ 628 : D4                                 SEP R4
 1146/ 629 : 02 C5                                      dw 02C5H
 1147/ 62B : 4D                         addr062b:        lda RD         ; Load D from (RD), increment RD
 1148/ 62C : B8                         addr062c:        phi R8         ; Put high register R8
 1149/ 62D : 4D                         addr062d:        lda RD         ; Load D from (RD), increment RD
 1150/ 62E : A8                         addr062e:        plo R8         ; Put low register R8
 1151/ 62F : 4D                         addr062f:        lda RD         ; Load D from (RD), increment RD
 1152/ 630 : B6                         addr0630:        phi R6         ; Put high register R6
 1153/ 631 : 4D                         addr0631:        lda RD         ; Load D from (RD), increment RD
 1154/ 632 : A6                         addr0632:        plo R6         ; Put low register R6
 1155/ 633 : 8D                         addr0633:        glo RD         ; Get low register RD
 1156/ 634 : 52                         addr0634:        str R2         ; Store D to (R2)
 1157/ 635 : D7                         addr0635:        sep R7         ; Set P=R7 as program counter
 1158/ 636 : 19                         addr0636:        inc R9         ; Increment (R9)
 1159/ 637 : 02                         addr0637:        ldn R2         ; Load D with (R2)
 1160/ 638 : 5D                         addr0638:        str RD         ; Store D to (RD)
 1161/ 639 : AD                         addr0639:        plo RD         ; Put low register RD
 1162/ 63A : 8A                         addr063a:        glo RA         ; Get low register RA
 1163/ 63B : (MACRO)                    addr063b:        RETURN         ; Set P=R5 as program counter
 1163/ 63B : D5                                 SEP R5
 1164/ 63C :                            
 1165/ 63C : D7                         addr063c:        sep R7         ; Set P=R7 as program counter
 1166/ 63D : 2C                         addr063d:        dec RC         ; Decrement (RC)
 1167/ 63E : 8B                         addr063e:        glo RB         ; Get low register RB
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 23 - 09/11/2024 10:24:33 PM


 1168/ 63F : 73                         addr063f:        stxd           ; Store via X and devrement
 1169/ 640 : 9B                         addr0640:        ghi RB         ; Get high register RB
 1170/ 641 : 5D                         addr0641:        str RD         ; Store D to (RD)
 1171/ 642 : (MACRO)                    addr0642:        CALL   05feh    ; Set P=R4 as program counter
 1171/ 642 : D4                                 SEP R4
 1171/ 643 : 05 FE                                      dw 05FEH
 1172/ 645 : D7                         addr0645:        sep R7         ; Set P=R7 as program counter
 1173/ 646 : 2A                         addr0646:        dec RA         ; Decrement (RA)
 1174/ 647 : 8B                         addr0647:        glo RB         ; Get low register RB
 1175/ 648 : 73                         addr0648:        stxd           ; Store via X and devrement
 1176/ 649 : 9B                         addr0649:        ghi RB         ; Get high register RB
 1177/ 64A : 73                         addr064a:        stxd           ; Store via X and devrement
 1178/ 64B : (MACRO)                    addr064b:        CALL   05feh    ; Set P=R4 as program counter
 1178/ 64B : D4                                 SEP R4
 1178/ 64C : 05 FE                                      dw 05FEH
 1179/ 64E : 2B                         addr064e:        dec RB         ; Decrement (RB)
 1180/ 64F : 2B                         addr064f:        dec RB         ; Decrement (RB)
 1181/ 650 : D7                         addr0650:        sep R7         ; Set P=R7 as program counter
 1182/ 651 : 2A                         addr0651:        dec RA         ; Decrement (RA)
 1183/ 652 : 8B                         addr0652:        glo RB         ; Get low register RB
 1184/ 653 : F7                         addr0653:        sm             ; Substract memory: DF,D=D-(R(X))
 1185/ 654 : 2D                         addr0654:        dec RD         ; Decrement (RD)
 1186/ 655 : 9B                         addr0655:        ghi RB         ; Get high register RB
 1187/ 656 : 77                         addr0656:        smb            ; Substract memory with borrow
 1188/ 657 : 33 7B                      addr0657:        bdf  addr067b       ; Short branch on DF=1
 1189/ 659 : 4B                         addr0659:        lda RB         ; Load D from (RB), increment RB
 1190/ 65A : BA                         addr065a:        phi RA         ; Put high register RA
 1191/ 65B : 4B                         addr065b:        lda RB         ; Load D from (RB), increment RB
 1192/ 65C : AA                         addr065c:        plo RA         ; Put low register RA
 1193/ 65D : 3A 62                      addr065d:        bnz  addr0662       ; Short branch on D!=0
 1194/ 65F : 9A                         addr065f:        ghi RA         ; Get high register RA
 1195/ 660 : 32 7B                      addr0660:        bz  addr067b        ; Short branch on D=0
 1196/ 662 : (MACRO)                    addr0662:        CALL   0415h    ; Set P=R4 as program counter
 1196/ 662 : D4                                 SEP R4
 1196/ 663 : 04 15                                      dw 0415H
 1197/ 665 : F8 2D                      addr0665:        ldi  2dh        ; Load D immediate
 1198/ 667 : FB 0D                      addr0667:        xri  0dh        ; Logical XOR D with value
 1199/ 669 : (MACRO)                    addr0669:        CALL   03f4h    ; Set P=R4 as program counter
 1199/ 669 : D4                                 SEP R4
 1199/ 66A : 03 F4                                      dw 03F4H
 1200/ 66C : (MACRO)                    addr066c:        CALL   010ch    ; Set P=R4 as program counter
 1200/ 66C : D4                                 SEP R4
 1200/ 66D : 01 0C                                      dw 010CH
 1201/ 66F : 33 7B                      addr066f:        bdf  addr067b       ; Short branch on DF=1
 1202/ 671 : 4B                         addr0671:        lda RB         ; Load D from (RB), increment RB
 1203/ 672 : FB 0D                      addr0672:        xri  0dh        ; Logical XOR D with value
 1204/ 674 : 3A 67                      addr0674:        bnz  addr0667       ; Short branch on D!=0
 1205/ 676 : (MACRO)                    addr0676:        CALL   03d5h    ; Set P=R4 as program counter
 1205/ 676 : D4                                 SEP R4
 1205/ 677 : 03 D5                                      dw 03D5H
 1206/ 679 : 30 50                      addr0679:        br  addr0650        ; Short branch
 1207/ 67B : D7                         addr067b:        sep R7         ; Set P=R7 as program counter
 1208/ 67C : 2C                         addr067c:        dec RC         ; Decrement (RC)
 1209/ 67D : BB                         addr067d:        phi RB         ; Put high register RB
 1210/ 67E : 4D                         addr067e:        lda RD         ; Load D from (RD), increment RD
 1211/ 67F : AB                         addr067f:        plo RB         ; Put low register RB
 1212/ 680 : (MACRO)                    addr0680:        RETURN         ; Set P=R5 as program counter
 1212/ 680 : D5                                 SEP R5
 1213/ 681 :                            
 1214/ 681 : D7                         addr0681:        sep R7         ; Set P=R7 as program counter
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 24 - 09/11/2024 10:24:33 PM


 1215/ 682 : 26                         addr0682:        dec R6         ; Decrement (R6)
 1216/ 683 : 82                         addr0683:        glo R2         ; Get low register R2
 1217/ 684 : 73                         addr0684:        stxd           ; Store via X and devrement
 1218/ 685 : 92                         addr0685:        ghi R2         ; Get high register R2
 1219/ 686 : 5D                         addr0686:        str RD         ; Store D to (RD)
 1220/ 687 : D7                         addr0687:        sep R7         ; Set P=R7 as program counter
 1221/ 688 : 18                         addr0688:        inc R8         ; Increment (R8)
 1222/ 689 : 2D                         addr0689:        dec RD         ; Decrement (RD)
 1223/ 68A : CE                         addr068a:        lsz            ; Long skip on D=0
 1224/ 68B : D7                         addr068b:        sep R7         ; Set P=R7 as program counter
 1225/ 68C : 28                         addr068c:        dec R8         ; Decrement (R8)
 1226/ 68D : AA                         addr068d:        plo RA         ; Put low register RA
 1227/ 68E : 4D                         addr068e:        lda RD         ; Load D from (RD), increment RD
 1228/ 68F : 12                         addr068f:        inc R2         ; Increment (R2)
 1229/ 690 : 12                         addr0690:        inc R2         ; Increment (R2)
 1230/ 691 : E2                         addr0691:        sex R2         ; Set P=R2 as datapointer
 1231/ 692 : 73                         addr0692:        stxd           ; Store via X and devrement
 1232/ 693 : 8A                         addr0693:        glo RA         ; Get low register RA
 1233/ 694 : 73                         addr0694:        stxd           ; Store via X and devrement
 1234/ 695 : C0 02 2D                   addr0695:        lbr  022dh      ; Long branch
 1235/ 698 : D7                         addr0698:        sep R7         ; Set P=R7 as program counter
 1236/ 699 : 27                         addr0699:        dec R7         ; Decrement (R7)
 1237/ 69A : 4B                         addr069a:        lda RB         ; Load D from (RB), increment RB
 1238/ 69B : 5D                         addr069b:        str RD         ; Store D to (RD)
 1239/ 69C : 1D                         addr069c:        inc RD         ; Increment (RD)
 1240/ 69D : 4B                         addr069d:        lda RB         ; Load D from (RB), increment RB
 1241/ 69E : 73                         addr069e:        stxd           ; Store via X and devrement
 1242/ 69F : F1                         addr069f:        or             ; Logical OR  D with (R(X))
 1243/ 6A0 : 1D                         addr06a0:        inc RD         ; Increment (RD)
 1244/ 6A1 : (MACRO)                    addr06a1:        RETURN         ; Set P=R5 as program counter
 1244/ 6A1 : D5                                 SEP R5
 1245/ 6A2 :                            
 1246/ 6A2 : (MACRO)                    addr06a2:        CALL   045eh    ; Set P=R4 as program counter
 1246/ 6A2 : D4                                 SEP R4
 1246/ 6A3 : 04 5E                                      dw 045EH
 1247/ 6A5 : (MACRO)                    addr06a5:        CALL   05feh    ; Set P=R4 as program counter
 1247/ 6A5 : D4                                 SEP R4
 1247/ 6A6 : 05 FE                                      dw 05FEH
 1248/ 6A8 : FC FF                      addr06a8:        adi  0ffh        ; Add D,DF with value
 1249/ 6AA : 9D                         addr06aa:        ghi RD         ; Get high register RD
 1250/ 6AB : AF                         addr06ab:        plo RF         ; Put low register RF
 1251/ 6AC : 33 BA                      addr06ac:        bdf addr06ba  ; Short branch on DF=1
 1252/ 6AE : 9B                         addr06ae:        ghi RB         ; Get high register RB
 1253/ 6AF : BD                         addr06af:        phi RD         ; Put high register RD
 1254/ 6B0 : 8B                         addr06b0:        glo RB         ; Get low register RB
 1255/ 6B1 : AD                         addr06b1:        plo RD         ; Put low register RD
 1256/ 6B2 : 2F                         addr06b2:        dec RF         ; Decrement (RF)
 1257/ 6B3 : 2F                         addr06b3:        dec RF         ; Decrement (RF)
 1258/ 6B4 : 2F                         addr06b4:        dec RF         ; Decrement (RF)
 1259/ 6B5 : 4D                         addr06b5:        lda RD         ; Load D from (RD), increment RD
 1260/ 6B6 : FB 0D                      addr06b6:        xri  0dh        ; Logical XOR D with value
 1261/ 6B8 : 3A B4                      addr06b8:        bnz addr06b4       ; Short branch on D!=0
 1262/ 6BA : 2B                         addr06ba:        dec RB         ; Decrement (RB)
 1263/ 6BB : 2B                         addr06bb:        dec RB         ; Decrement (RB)
 1264/ 6BC : (MACRO)                    addr06bc:        CALL   045eh    ; Set P=R4 as program counter
 1264/ 6BC : D4                                 SEP R4
 1264/ 6BD : 04 5E                                      dw 045EH
 1265/ 6BF : D7                         addr06bf:        sep R7         ; Set P=R7 as program counter
 1266/ 6C0 : 28                         addr06c0:        dec R8         ; Decrement (R8)
 1267/ 6C1 : 0B                         addr06c1:        ldn RB         ; Load D with (RB)
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 25 - 09/11/2024 10:24:33 PM


 1268/ 6C2 : FB 0D                      addr06c2:        xri  0dh        ; Logical XOR D with value
 1269/ 6C4 : 73                         addr06c4:        stxd           ; Store via X and devrement
 1270/ 6C5 : 5D                         addr06c5:        str RD         ; Store D to (RD)
 1271/ 6C6 : 32 D9                      addr06c6:        bz  addr06d9        ; Short branch on D=0
 1272/ 6C8 : 9A                         addr06c8:        ghi RA         ; Get high register RA
 1273/ 6C9 : 5D                         addr06c9:        str RD         ; Store D to (RD)
 1274/ 6CA : 1D                         addr06ca:        inc RD         ; Increment (RD)
 1275/ 6CB : 8A                         addr06cb:        glo RA         ; Get low register RA
 1276/ 6CC : 5D                         addr06cc:        str RD         ; Store D to (RD)
 1277/ 6CD : 9B                         addr06cd:        ghi RB         ; Get high register RB
 1278/ 6CE : BA                         addr06ce:        phi RA         ; Put high register RA
 1279/ 6CF : 8B                         addr06cf:        glo RB         ; Get low register RB
 1280/ 6D0 : AA                         addr06d0:        plo RA         ; Put low register RA
 1281/ 6D1 : 1F                         addr06d1:        inc RF         ; Increment (RF)
 1282/ 6D2 : 1F                         addr06d2:        inc RF         ; Increment (RF)
 1283/ 6D3 : 1F                         addr06d3:        inc RF         ; Increment (RF)
 1284/ 6D4 : 4A                         addr06d4:        lda RA         ; Load D from (RA), increment RA
 1285/ 6D5 : FB 0D                      addr06d5:        xri  0dh        ; Logical XOR D with value
 1286/ 6D7 : 3A D3                      addr06d7:        bnz  addr06d3       ; Short branch on D!=0
 1287/ 6D9 : D7                         addr06d9:        sep R7         ; Set P=R7 as program counter
 1288/ 6DA : 2E                         addr06da:        dec RE         ; Decrement (RE)
 1289/ 6DB : BA                         addr06db:        phi RA         ; Put high register RA
 1290/ 6DC : 4D                         addr06dc:        lda RD         ; Load D from (RD), increment RD
 1291/ 6DD : AA                         addr06dd:        plo RA         ; Put low register RA
 1292/ 6DE : D7                         addr06de:        sep R7         ; Set P=R7 as program counter
 1293/ 6DF : 24                         addr06df:        dec R4         ; Decrement (R4)
 1294/ 6E0 : 8A                         addr06e0:        glo RA         ; Get low register RA
 1295/ 6E1 : F7                         addr06e1:        sm             ; Substract memory: DF,D=D-(R(X))
 1296/ 6E2 : AA                         addr06e2:        plo RA         ; Put low register RA
 1297/ 6E3 : 2D                         addr06e3:        dec RD         ; Decrement (RD)
 1298/ 6E4 : 9A                         addr06e4:        ghi RA         ; Get high register RA
 1299/ 6E5 : 77                         addr06e5:        smb            ; Substract memory with borrow
 1300/ 6E6 : BA                         addr06e6:        phi RA         ; Put high register RA
 1301/ 6E7 : 1D                         addr06e7:        inc RD         ; Increment (RD)
 1302/ 6E8 : 8F                         addr06e8:        glo RF         ; Get low register RF
 1303/ 6E9 : F4                         addr06e9:        add            ; Add D: D,DF= D+(R(X))
 1304/ 6EA : BF                         addr06ea:        phi RF         ; Put high register RF
 1305/ 6EB : 8F                         addr06eb:        glo RF         ; Get low register RF
 1306/ 6EC : FA 80                      addr06ec:        ani  80h        ; Logical AND D with value
 1307/ 6EE : CE                         addr06ee:        lsz            ; Long skip on D=0
 1308/ 6EF : F8 FF                      addr06ef:        ldi  0ffh        ; Load D immediate
 1309/ 6F1 : 2D                         addr06f1:        dec RD         ; Decrement (RD)
 1310/ 6F2 : 74                         addr06f2:        adc            ; Add with carry
 1311/ 6F3 : E2                         addr06f3:        sex R2         ; Set P=R2 as datapointer
 1312/ 6F4 : 73                         addr06f4:        stxd           ; Store via X and devrement
 1313/ 6F5 : B8                         addr06f5:        phi R8         ; Put high register R8
 1314/ 6F6 : 9F                         addr06f6:        ghi RF         ; Get high register RF
 1315/ 6F7 : 73                         addr06f7:        stxd           ; Store via X and devrement
 1316/ 6F8 : 52                         addr06f8:        str R2         ; Store D to (R2)
 1317/ 6F9 : 82                         addr06f9:        glo R2         ; Get low register R2
 1318/ 6FA : F5                         addr06fa:        sd             ; Substract D: D,DF=(R(X))-D
 1319/ 6FB : 98                         addr06fb:        ghi R8         ; Get high register R8
 1320/ 6FC : 52                         addr06fc:        str R2         ; Store D to (R2)
 1321/ 6FD : 92                         addr06fd:        ghi R2         ; Get high register R2
 1322/ 6FE : 75                         addr06fe:        sdb            ; Substract D with borrow
 1323/ 6FF : C3 03 7E                   addr06ff:        lbdf  addr037e     ; Long branch on DF=1
 1324/ 702 : 8F                         addr0702:        glo RF         ; Get low register RF
 1325/ 703 : 32 30                      addr0703:        bz  addr0730        ; Short branch on D=0
 1326/ 705 : 52                         addr0705:        str R2         ; Store D to (R2)
 1327/ 706 : FE                         addr0706:        shl            ; Shift left D
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 26 - 09/11/2024 10:24:33 PM


 1328/ 707 : 3B 1E                      addr0707:        bnf  addr071e       ; Short branch on DF=0
 1329/ 709 : D7                         addr0709:        sep R7         ; Set P=R7 as program counter
 1330/ 70A : 2E                         addr070a:        dec RE         ; Decrement (RE)
 1331/ 70B : BF                         addr070b:        phi RF         ; Put high register RF
 1332/ 70C : 4D                         addr070c:        lda RD         ; Load D from (RD), increment RD
 1333/ 70D : AF                         addr070d:        plo RF         ; Put low register RF
 1334/ 70E : E2                         addr070e:        sex R2         ; Set P=R2 as datapointer
 1335/ 70F : F7                         addr070f:        sm             ; Substract memory: DF,D=D-(R(X))
 1336/ 710 : A8                         addr0710:        plo R8         ; Put low register R8
 1337/ 711 : 9F                         addr0711:        ghi RF         ; Get high register RF
 1338/ 712 : 7C 00                      addr0712:        adci  00h       ; Add with carry immediate
 1339/ 714 : B8                         addr0714:        phi R8         ; Put high register R8
 1340/ 715 : 48                         addr0715:        lda R8         ; Load D from (R8), increment R8
 1341/ 716 : 5F                         addr0716:        str RF         ; Store D to (RF)
 1342/ 717 : 1F                         addr0717:        inc RF         ; Increment (RF)
 1343/ 718 : 1A                         addr0718:        inc RA         ; Increment (RA)
 1344/ 719 : 9A                         addr0719:        ghi RA         ; Get high register RA
 1345/ 71A : 3A 15                      addr071a:        bnz  addr0715       ; Short branch on D!=0
 1346/ 71C : 30 30                      addr071c:        br  addr0730        ; Short branch
 1347/ 71E : 9F                         addr071e:        ghi RF         ; Get high register RF
 1348/ 71F : AF                         addr071f:        plo RF         ; Put low register RF
 1349/ 720 : 98                         addr0720:        ghi R8         ; Get high register R8
 1350/ 721 : BF                         addr0721:        phi RF         ; Put high register RF
 1351/ 722 : D7                         addr0722:        sep R7         ; Set P=R7 as program counter
 1352/ 723 : 24                         addr0723:        dec R4         ; Decrement (R4)
 1353/ 724 : B8                         addr0724:        phi R8         ; Put high register R8
 1354/ 725 : 4D                         addr0725:        lda RD         ; Load D from (RD), increment RD
 1355/ 726 : A8                         addr0726:        plo R8         ; Put low register R8
 1356/ 727 : 2A                         addr0727:        dec RA         ; Decrement (RA)
 1357/ 728 : EF                         addr0728:        sex RF         ; Set P=RF as datapointer
 1358/ 729 : 08                         addr0729:        ldn R8         ; Load D with (R8)
 1359/ 72A : 28                         addr072a:        dec R8         ; Decrement (R8)
 1360/ 72B : 73                         addr072b:        stxd           ; Store via X and devrement
 1361/ 72C : 1A                         addr072c:        inc RA         ; Increment (RA)
 1362/ 72D : 9A                         addr072d:        ghi RA         ; Get high register RA
 1363/ 72E : 3A 29                      addr072e:        bnz  addr0729       ; Short branch on D!=0
 1364/ 730 : D7                         addr0730:        sep R7         ; Set P=R7 as program counter
 1365/ 731 : 24                         addr0731:        dec R4         ; Decrement (R4)
 1366/ 732 : 12                         addr0732:        inc R2         ; Increment (R2)
 1367/ 733 : 42                         addr0733:        lda R2         ; Load D from (R2), increment R2
 1368/ 734 : 73                         addr0734:        stxd           ; Store via X and devrement
 1369/ 735 : 02                         addr0735:        ldn R2         ; Load D with (R2)
 1370/ 736 : 5D                         addr0736:        str RD         ; Store D to (RD)
 1371/ 737 : D7                         addr0737:        sep R7         ; Set P=R7 as program counter
 1372/ 738 : 2E                         addr0738:        dec RE         ; Decrement (RE)
 1373/ 739 : BA                         addr0739:        phi RA         ; Put high register RA
 1374/ 73A : 4D                         addr073a:        lda RD         ; Load D from (RD), increment RD
 1375/ 73B : AA                         addr073b:        plo RA         ; Put low register RA
 1376/ 73C : D7                         addr073c:        sep R7         ; Set P=R7 as program counter
 1377/ 73D : 28                         addr073d:        dec R8         ; Decrement (R8)
 1378/ 73E : AF                         addr073e:        plo RF         ; Put low register RF
 1379/ 73F : F1                         addr073f:        or             ; Logical OR  D with (R(X))
 1380/ 740 : 32 4E                      addr0740:        bz  addr074e        ; Short branch on D=0
 1381/ 742 : 8F                         addr0742:        glo RF         ; Get low register RF
 1382/ 743 : 5A                         addr0743:        str RA         ; Store D to (RA)
 1383/ 744 : 1A                         addr0744:        inc RA         ; Increment (RA)
 1384/ 745 : 4D                         addr0745:        lda RD         ; Load D from (RD), increment RD
 1385/ 746 : 5A                         addr0746:        str RA         ; Store D to (RA)
 1386/ 747 : 1A                         addr0747:        inc RA         ; Increment (RA)
 1387/ 748 : 4B                         addr0748:        lda RB         ; Load D from (RB), increment RB
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 27 - 09/11/2024 10:24:33 PM


 1388/ 749 : 5A                         addr0749:        str RA         ; Store D to (RA)
 1389/ 74A : FB 0D                      addr074a:        xri  0dh        ; Logical XOR D with value
 1390/ 74C : 3A 47                      addr074c:        bnz  addr0747       ; Short branch on D!=0
 1391/ 74E : C0 03 B5                   addr074e:        lbr  addr03b5      ; Long branch
 1392/ 751 : 73                         addr0751:        stxd           ; Store via X and devrement
 1393/ 752 : 52                         addr0752:        str R2         ; Store D to (R2)
 1394/ 753 : 9D                         addr0753:        ghi RD         ; Get high register RD
 1395/ 754 : BA                         addr0754:        phi RA         ; Put high register RA
 1396/ 755 : 2D                         addr0755:        dec RD         ; Decrement (RD)
 1397/ 756 : 43                         addr0756:        lda R3         ; Load D from (R3), increment R3
 1398/ 757 : (MACRO)                    addr0757:        RETURN         ; Set P=R5 as program counter
 1398/ 757 : D5                                 SEP R5
 1399/ 758 :                            
 1400/ 758 : 5D                         addr0758:        str RD         ; Store D to (RD)
 1401/ 759 : 2D                         addr0759:        dec RD         ; Decrement (RD)
 1402/ 75A : 88                         addr075a:        glo R8         ; Get low register R8
 1403/ 75B : FA 0F                      addr075b:        ani  0fh        ; Logical AND D with value
 1404/ 75D : F9 60                      addr075d:        ori  60h        ; Logical OR D with value
 1405/ 75F : 5D                         addr075f:        str RD         ; Store D to (RD)
 1406/ 760 : FA 08                      addr0760:        ani  08h        ; Logical AND D with value
 1407/ 762 : CE                         addr0762:        lsz            ; Long skip on D=0
 1408/ 763 : C4                         addr0763:        nop            ; No operation
 1409/ 764 : 12                         addr0764:        inc R2         ; Increment (R2)
 1410/ 765 :                            ;IL Code
 1411/ 765 : DD 24                      				DW    0DD24h
 1412/ 767 : 3A 91                      				DW    03A91h
 1413/ 769 : 27 10                      				DW    02710h
 1414/ 76B : E1 59                      				DW    0E159h
 1415/ 76D : C5 2A                      				DW    0C52Ah
 1416/ 76F : 56 10                      				DW    05610h
 1417/ 771 : 11 2C                      				DW    0112Ch
 1418/ 773 : 8B 4C                      				DW    08B4Ch
 1419/ 775 : 45 D4                      				DW    045D4h
 1420/ 777 : A0 80                      				DW    0A080h
 1421/ 779 : BD 31                      				DW    0BD31h
 1422/ 77B : 8F E0                      				DW    08FE0h
 1423/ 77D : 13 1D                      				DW    0131Dh
 1424/ 77F : 94 47                      				DW    09447h
 1425/ 781 : CF 88                      				DW    0CF88h
 1426/ 783 : 54 CF                      				DW    054CFh
 1427/ 785 : 31 8F                      				DW    0318Fh
 1428/ 787 : E0 10                      				DW    0E010h
 1429/ 789 : 11 16                      				DW    01116h
 1430/ 78B : 80 53                      				DW    08053h
 1431/ 78D : 55 C2                      				DW    055C2h
 1432/ 78F : 31 8F                      				DW    0318Fh
 1433/ 791 : E0 14                      				DW    0E014h
 1434/ 793 : 16 90                      				DW    01690h
 1435/ 795 : 50 D2                      				DW    050D2h
 1436/ 797 : 83 49                      				DW    08349h
 1437/ 799 : 4E D4                      				DW    04ED4h
 1438/ 79B : E5 71                      				DW    0E571h
 1439/ 79D : 88 BB                      				DW    088BBh
 1440/ 79F : E1 1D                      				DW    0E11Dh
 1441/ 7A1 : 8F A2                      				DW    08FA2h
 1442/ 7A3 : 21 58                      				DW    02158h
 1443/ 7A5 : 6F 83                      				DW    06F83h
 1444/ 7A7 : AC 22                      				DW    0AC22h
 1445/ 7A9 : 55 83                      				DW    05583h
 1446/ 7AB : BA 24                      				DW    0BA24h
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 28 - 09/11/2024 10:24:33 PM


 1447/ 7AD : 93 E0                      				DW    093E0h
 1448/ 7AF : 23 1D                      				DW    0231Dh
 1449/ 7B1 : 31 8F                      				DW    0318Fh
 1450/ 7B3 : 20 48                      				DW    02048h
 1451/ 7B5 : 91 49                      				DW    09149h
 1452/ 7B7 : C6 31                      				DW    0C631h
 1453/ 7B9 : 8F 32                      				DW    08F32h
 1454/ 7BB : 37 31                      				DW    03731h
 1455/ 7BD : 8F 84                      				DW    08F84h
 1456/ 7BF : 54 48                      				DW    05448h
 1457/ 7C1 : 45 CE                      				DW    045CEh
 1458/ 7C3 : 1C 1D                      				DW    01C1Dh
 1459/ 7C5 : 38 0D                      				DW    0380Dh
 1460/ 7C7 : 9A 49                      				DW    09A49h
 1461/ 7C9 : 4E 50                      				DW    04E50h
 1462/ 7CB : 55 D4                      				DW    055D4h
 1463/ 7CD : A0 10                      				DW    0A010h
 1464/ 7CF : E7 24                      				DW    0E724h
 1465/ 7D1 : 3F 20                      				DW    03F20h
 1466/ 7D3 : 91 27                      				DW    09127h
 1467/ 7D5 : E1 59                      				DW    0E159h
 1468/ 7D7 : 81 AC                      				DW    081ACh
 1469/ 7D9 : 31 8F                      				DW    0318Fh
 1470/ 7DB : 13 11                      				DW    01311h
 1471/ 7DD : 82 AC                      				DW    082ACh
 1472/ 7DF : 4D E0                      				DW    04DE0h
 1473/ 7E1 : 1D 89                      				DW    01D89h
 1474/ 7E3 : 52 45                      				DW    05245h
 1475/ 7E5 : 54 55                      				DW    05455h
 1476/ 7E7 : 52 CE                      				DW    052CEh
 1477/ 7E9 : E0 15                      				DW    0E015h
 1478/ 7EB : 1D 85                      				DW    01D85h
 1479/ 7ED : 45 4E                      				DW    0454Eh
 1480/ 7EF : C4 E0                      				DW    0C4E0h
 1481/ 7F1 : 2D 9A                      				DW    02D9Ah
 1482/ 7F3 : 4C 49                      				DW    04C49h
 1483/ 7F5 : 53 D4                      				DW    053D4h
 1484/ 7F7 : E7 0A                      				DW    0E70Ah
 1485/ 7F9 : 00 01                      				DW    00001h
 1486/ 7FB : 0A 7F                      				DW    00A7Fh
 1487/ 7FD : FF 65                      				DW    0FF65h
 1488/ 7FF : 31 8F                      				DW    0318Fh
 1489/ 801 : 32 31                      				DW    03231h
 1490/ 803 : E0 24                      				DW    0E024h
 1491/ 805 : 00 00                      				DW    00000h
 1492/ 807 : 00 00                      				DW    00000h
 1493/ 809 : 0A 80                      				DW    00A80h
 1494/ 80B : 1F 1D                      				DW    01F1Dh
 1495/ 80D : 85 52                      				DW    08552h
 1496/ 80F : 55 CE                      				DW    055CEh
 1497/ 811 : 38 0A                      				DW    0380Ah
 1498/ 813 : 86 43                      				DW    08643h
 1499/ 815 : 4C 45                      				DW    04C45h
 1500/ 817 : 41 D2                      				DW    041D2h
 1501/ 819 : 2B 9A                      				DW    02B9Ah
 1502/ 81B : 50 4C                      				DW    0504Ch
 1503/ 81D : 4F D4                      				DW    04FD4h
 1504/ 81F : 31 8F                      				DW    0318Fh
 1505/ 821 : 95 AC                      				DW    095ACh
 1506/ 823 : 0B 0B                      				DW    00B0Bh
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 29 - 09/11/2024 10:24:33 PM


 1507/ 825 : 0A 00                      				DW    00A00h
 1508/ 827 : 2A 32                      				DW    02A32h
 1509/ 829 : 62 0A                      				DW    0620Ah
 1510/ 82B : 00 40                      				DW    00040h
 1511/ 82D : 1A 0A                      				DW    01A0Ah
 1512/ 82F : 00 40                      				DW    00040h
 1513/ 831 : 32 5A                      				DW    0325Ah
 1514/ 833 : 18 64                      				DW    01864h
 1515/ 835 : 39 02                      				DW    03902h
 1516/ 837 : 38 F4                      				DW    038F4h
 1517/ 839 : 0A 6D                      				DW    00A6Dh
 1518/ 83B : 80 18                      				DW    08018h
 1519/ 83D : 0B 0A                      				DW    00B0Ah
 1520/ 83F : 00 08                      				DW    00008h
 1521/ 841 : 1B 0B                      				DW    01B0Bh
 1522/ 843 : 04 02                      				DW    00402h
 1523/ 845 : 05 03                      				DW    00503h
 1524/ 847 : 05 0A                      				DW    0050Ah
 1525/ 849 : 00 08                      				DW    00008h
 1526/ 84B : 1A 19                      				DW    01A19h
 1527/ 84D : 09 0A                      				DW    0090Ah
 1528/ 84F : 02 13                      				DW    00213h
 1529/ 851 : 09 08                      				DW    00908h
 1530/ 853 : 02 01                      				DW    00201h
 1531/ 855 : 13 8F                      				DW    0138Fh
 1532/ 857 : AC 31                      				DW    0AC31h
 1533/ 859 : 8F E0                      				DW    08FE0h
 1534/ 85B : 0A 01                      				DW    00A01h
 1535/ 85D : 09 02                      				DW    00902h
 1536/ 85F : 01 03                      				DW    00103h
 1537/ 861 : 01 0B                      				DW    0010Bh
 1538/ 863 : 2E 0C                      				DW    02E0Ch
 1539/ 865 : 1D E0                      				DW    01DE0h
 1540/ 867 : 1D 8A                      				DW    01D8Ah
 1541/ 869 : 50 4F                      				DW    0504Fh
 1542/ 86B : 4B C5                      				DW    04BC5h
 1543/ 86D : 0A 01                      				DW    00A01h
 1544/ 86F : 18 31                      				DW    01831h
 1545/ 871 : 8F 6C                      				DW    08F6Ch
 1546/ 873 : 91 4F                      				DW    0914Fh
 1547/ 875 : 55 D4                      				DW    055D4h
 1548/ 877 : 0A 01                      				DW    00A01h
 1549/ 879 : 26 0A                      				DW    0260Ah
 1550/ 87B : 00 08                      				DW    00008h
 1551/ 87D : 32 5A                      				DW    0325Ah
 1552/ 87F : 32 31                      				DW    03231h
 1553/ 881 : E0 2E                      				DW    0E02Eh
 1554/ 883 : 0C 1D                      				DW    00C1Dh
 1555/ 885 : 9E 53                      				DW    09E53h
 1556/ 887 : 41 56                      				DW    04156h
 1557/ 889 : C5 E0                      				DW    0C5E0h
 1558/ 88B : 24 54                      				DW    02454h
 1559/ 88D : 55 52                      				DW    05552h
 1560/ 88F : 4E 20                      				DW    04E20h
 1561/ 891 : 4F 4E                      				DW    04F4Eh
 1562/ 893 : 20 52                      				DW    02052h
 1563/ 895 : 45 43                      				DW    04543h
 1564/ 897 : 4F 52                      				DW    04F52h
 1565/ 899 : C4 23                      				DW    0C423h
 1566/ 89B : 24 48                      				DW    02448h
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 30 - 09/11/2024 10:24:33 PM


 1567/ 89D : 49 54                      				DW    04954h
 1568/ 89F : 20 4B                      				DW    0204Bh
 1569/ 8A1 : 45 D9                      				DW    045D9h
 1570/ 8A3 : 62 39                      				DW    06239h
 1571/ 8A5 : 5C 0A                      				DW    05C0Ah
 1572/ 8A7 : 01 06                      				DW    00106h
 1573/ 8A9 : 0B 0B                      				DW    00B0Bh
 1574/ 8AB : 2E 0C                      				DW    02E0Ch
 1575/ 8AD : 23 0A                      				DW    0230Ah
 1576/ 8AF : 09 FD                      				DW    009FDh
 1577/ 8B1 : 09 24                      				DW    00924h
 1578/ 8B3 : 12 09                      				DW    01209h
 1579/ 8B5 : 20 12                      				DW    02012h
 1580/ 8B7 : 19 0A                      				DW    0190Ah
 1581/ 8B9 : 01 00                      				DW    00100h
 1582/ 8BB : 18 09                      				DW    01809h
 1583/ 8BD : 20 12                      				DW    02012h
 1584/ 8BF : 2E 0C                      				DW    02E0Ch
 1585/ 8C1 : 1D 86                      				DW    01D86h
 1586/ 8C3 : 4C 4F                      				DW    04C4Fh
 1587/ 8C5 : 41 C4                      				DW    041C4h
 1588/ 8C7 : E0 62                      				DW    0E062h
 1589/ 8C9 : 39 85                      				DW    03985h
 1590/ 8CB : 09 24                      				DW    00924h
 1591/ 8CD : 0A 09                      				DW    00A09h
 1592/ 8CF : FA 0A                      				DW    0FA0Ah
 1593/ 8D1 : 00 01                      				DW    00001h
 1594/ 8D3 : 09 20                      				DW    00920h
 1595/ 8D5 : 12 2E                      				DW    0122Eh
 1596/ 8D7 : 66 0A                      				DW    0660Ah
 1597/ 8D9 : 00 18                      				DW    00018h
 1598/ 8DB : 18 13                      				DW    01813h
 1599/ 8DD : 2D 23                      				DW    02D23h
 1600/ 8DF : 24 54                      				DW    02454h
 1601/ 8E1 : 41 50                      				DW    04150h
 1602/ 8E3 : 45 20                      				DW    04520h
 1603/ 8E5 : 45 52                      				DW    04552h
 1604/ 8E7 : 52 4F                      				DW    0524Fh
 1605/ 8E9 : D2 2B                      				DW    0D22Bh
 1606/ 8EB : 84 52                      				DW    08452h
 1607/ 8ED : 45 CD                      				DW    045CDh
 1608/ 8EF : 1D A0                      				DW    01DA0h
 1609/ 8F1 : 80 BD                      				DW    080BDh
 1610/ 8F3 : 38 14                      				DW    03814h
 1611/ 8F5 : 85 AD                      				DW    085ADh
 1612/ 8F7 : 31 A6                      				DW    031A6h
 1613/ 8F9 : 17 64                      				DW    01764h
 1614/ 8FB : 81 AB                      				DW    081ABh
 1615/ 8FD : 31 A6                      				DW    031A6h
 1616/ 8FF : 85 AB                      				DW    085ABh
 1617/ 901 : 31 A6                      				DW    031A6h
 1618/ 903 : 18 5A                      				DW    0185Ah
 1619/ 905 : 85 AD                      				DW    085ADh
 1620/ 907 : 31 A6                      				DW    031A6h
 1621/ 909 : 19 54                      				DW    01954h
 1622/ 90B : 2F 31                      				DW    02F31h
 1623/ 90D : B5 85                      				DW    0B585h
 1624/ 90F : AA 31                      				DW    0AA31h
 1625/ 911 : B5 1A                      				DW    0B51Ah
 1626/ 913 : 5A 85                      				DW    05A85h
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 31 - 09/11/2024 10:24:33 PM


 1627/ 915 : AF 31                      				DW    0AF31h
 1628/ 917 : B5 1B                      				DW    0B51Bh
 1629/ 919 : 54 2F                      				DW    0542Fh
 1630/ 91B : 99 52                      				DW    09952h
 1631/ 91D : 4E 44                      				DW    04E44h
 1632/ 91F : A8 0A                      				DW    0A80Ah
 1633/ 921 : 80 80                      				DW    08080h
 1634/ 923 : 12 0A                      				DW    0120Ah
 1635/ 925 : 09 29                      				DW    00929h
 1636/ 927 : 1A 0A                      				DW    01A0Ah
 1637/ 929 : 1A 85                      				DW    01A85h
 1638/ 92B : 18 13                      				DW    01813h
 1639/ 92D : 09 80                      				DW    00980h
 1640/ 92F : 12 01                      				DW    01201h
 1641/ 931 : 0B 32                      				DW    00B32h
 1642/ 933 : 2C 61                      				DW    02C61h
 1643/ 935 : 72 0B                      				DW    0720Bh
 1644/ 937 : 04 02                      				DW    00402h
 1645/ 939 : 03 05                      				DW    00305h
 1646/ 93B : 03 1B                      				DW    0031Bh
 1647/ 93D : 1A 19                      				DW    01A19h
 1648/ 93F : 0B 09                      				DW    00B09h
 1649/ 941 : 06 0A                      				DW    0060Ah
 1650/ 943 : 00 00                      				DW    00000h
 1651/ 945 : 1C 17                      				DW    01C17h
 1652/ 947 : 2F 8E                      				DW    02F8Eh
 1653/ 949 : 55 53                      				DW    05553h
 1654/ 94B : 52 A8                      				DW    052A8h
 1655/ 94D : 31 8F                      				DW    0318Fh
 1656/ 94F : 32 31                      				DW    03231h
 1657/ 951 : 32 31                      				DW    03231h
 1658/ 953 : 80 A9                      				DW    080A9h
 1659/ 955 : 2E 2F                      				DW    02E2Fh
 1660/ 957 : 91 49                      				DW    09149h
 1661/ 959 : 4E 50                      				DW    04E50h
 1662/ 95B : A8 0A                      				DW    0A80Ah
 1663/ 95D : 01 26                      				DW    00126h
 1664/ 95F : 0A 00                      				DW    00A00h
 1665/ 961 : 08 32                      				DW    00832h
 1666/ 963 : 5A 0A                      				DW    05A0Ah
 1667/ 965 : 00 08                      				DW    00008h
 1668/ 967 : 18 7D                      				DW    0187Dh
 1669/ 969 : 91 46                      				DW    09146h
 1670/ 96B : 4C 47                      				DW    04C47h
 1671/ 96D : A8 0A                      				DW    0A80Ah
 1672/ 96F : 09 F8                      				DW    009F8h
 1673/ 971 : 0A 00                      				DW    00A00h
 1674/ 973 : 05 32                      				DW    00532h
 1675/ 975 : 5A 0A                      				DW    05A0Ah
 1676/ 977 : 00 01                      				DW    00001h
 1677/ 979 : 19 6B                      				DW    0196Bh
 1678/ 97B : 8F 50                      				DW    08F50h
 1679/ 97D : 45 45                      				DW    04545h
 1680/ 97F : 4B A8                      				DW    04BA8h
 1681/ 981 : 0A 01                      				DW    00A01h
 1682/ 983 : 14 31                      				DW    01431h
 1683/ 985 : 8F 80                      				DW    08F80h
 1684/ 987 : A9 0B                      				DW    0A90Bh
 1685/ 989 : 2E 2F                      				DW    02E2Fh
 1686/ 98B : A2 12                      				DW    0A212h
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 32 - 09/11/2024 10:24:33 PM


 1687/ 98D : 2F C1                      				DW    02FC1h
 1688/ 98F : 2F 80                      				DW    02F80h
 1689/ 991 : A8 31                      				DW    0A831h
 1690/ 993 : 8F 80                      				DW    08F80h
 1691/ 995 : A9 2F                      				DW    0A92Fh
 1692/ 997 : 83 AC                      				DW    083ACh
 1693/ 999 : 39 8F                      				DW    0398Fh
 1694/ 99B : 0B 2F                      				DW    00B2Fh
 1695/ 99D : 84 BD                      				DW    084BDh
 1696/ 99F : 09 02                      				DW    00902h
 1697/ 9A1 : 2F 8E                      				DW    02F8Eh
 1698/ 9A3 : BC 84                      				DW    0BC84h
 1699/ 9A5 : BD 09                      				DW    0BD09h
 1700/ 9A7 : 03 2F                      				DW    0032Fh
 1701/ 9A9 : 84 BE                      				DW    084BEh
 1702/ 9AB : 09 05                      				DW    00905h
 1703/ 9AD : 2F 09                      				DW    02F09h
 1704/ 9AF : 01 2F                      				DW    0012Fh
 1705/ 9B1 : 80 BE                      				DW    080BEh
 1706/ 9B3 : 84 BD                      				DW    084BDh
 1707/ 9B5 : 09 06                      				DW    00906h
 1708/ 9B7 : 2F 84                      				DW    02F84h
 1709/ 9B9 : BC 09                      				DW    0BC09h
 1710/ 9BB : 05 2F                      				DW    0052Fh
 1711/ 9BD : 09 04                      				DW    00904h
 1712/ 9BF : 2F 31                      				DW    02F31h
 1713/ 9C1 : 8F 0B                      				DW    08F0Bh
 1714/ 9C3 : 0B 06                      				DW    00B06h
 1715/ 9C5 : 01 07                      				DW    00107h
 1716/ 9C7 : 01 09                      				DW    00109h
 1717/ 9C9 : 01 02                      				DW    00102h
 1718/ 9CB : 01 1C                      				DW    0011Ch
 1719/ 9CD : 60 09                      				DW    06009h
 1720/ 9CF : 06 0A                      				DW    0060Ah
 1721/ 9D1 : 00 00                      				DW    00000h
 1722/ 9D3 : 1C 60                      				DW    01C60h
 1723/ 9D5 : 2F 00                      				DW    02F00h
 1724/ 9D7 : 00                         				DB    00h
 1725/ 9D8 :                            ;IL Code End
 1726/ 9D8 : F8 82                      addr09d8:        ldi  82h        ; Load D immediate
 1727/ 9DA : A1                         addr09da:        plo R1         ; Put low register R1
 1728/ 9DB : F8 0C                      addr09db:        ldi  0ch        ; Load D immediate
 1729/ 9DD : B1                         addr09dd:        phi R1         ; Put high register R1
 1730/ 9DE : 34 DE                      addr09de:        b1   addr09de        ; Short branch on EF1=1
 1731/ 9E0 : 69                         addr09e0:        inp 1          ; Input to (R(X)) and D, N=001
 1732/ 9E1 : E3                         addr09e1:        sex R3         ; Set P=R3 as datapointer
 1733/ 9E2 : 70                         addr09e2:        ret            ; Return from interrupt, set IE=1
 1734/ 9E3 : (MACRO)                    addr09e3:        RETURN         ; Set P=R5 as program counter
 1734/ 9E3 : D5                                 SEP R5
 1735/ 9E4 :                            
 1736/ 9E4 : F9 34                      addr09e4:        ori  34h        ; Logical OR D with value
 1737/ 9E6 : BF                         addr09e6:        phi RF         ; Put high register RF
 1738/ 9E7 : 2D                         addr09e7:        dec RD         ; Decrement (RD)
 1739/ 9E8 : ED                         addr09e8:        sex RD         ; Set P=RD as datapointer
 1740/ 9E9 : 8D                         addr09e9:        glo RD         ; Get low register RD
 1741/ 9EA : AF                         addr09ea:        plo RF         ; Put low register RF
 1742/ 9EB : F8 D5                      addr09eb:        ldi  0d5h        ; Load D immediate
 1743/ 9ED : 73                         addr09ed:        stxd           ; Store via X and devrement
 1744/ 9EE : F8 9D                      addr09ee:        ldi  9dh        ; Load D immediate
 1745/ 9F0 : 73                         addr09f0:        stxd           ; Store via X and devrement
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 33 - 09/11/2024 10:24:33 PM


 1746/ 9F1 : 8F                         addr09f1:        glo RF         ; Get low register RF
 1747/ 9F2 : 73                         addr09f2:        stxd           ; Store via X and devrement
 1748/ 9F3 : 9F                         addr09f3:        ghi RF         ; Get high register RF
 1749/ 9F4 : 5D                         addr09f4:        str RD         ; Store D to (RD)
 1750/ 9F5 : F8 01                      addr09f5:        ldi  01h        ; Load D immediate
 1751/ 9F7 : DD                         addr09f7:        sep RD         ; Set P=RD as program counter
 1752/ 9F8 : 30 E4                      addr09f8:        br   addr09e4        ; Short branch
 1753/ 9FA : C0 0A 29                   addr09fa:        lbr  addr0a29      ; Long branch
 1754/ 9FD : F8 F0                      addr09fd:        ldi  0f0h        ; Load D immediate
 1755/ 9FF : BC                         addr09ff:        phi RC         ; Put high register RC
 1756/ A00 : F8 65                      addr0a00:        ldi  65h        ; Load D immediate
 1757/ A02 : AC                         addr0a02:        plo RC         ; Put low register RC
 1758/ A03 : F8 80                      addr0a03:        ldi  80h        ; Load D immediate
 1759/ A05 : BD                         addr0a05:        phi RD         ; Put high register RD
 1760/ A06 : FF 00                      addr0a06:        smi  00h        ; Substract D,DF to value
 1761/ A08 : DC                         addr0a08:        sep RC         ; Set P=RC as program counter
 1762/ A09 : 9D                         addr0a09:        ghi RD         ; Get high register RD
 1763/ A0A : 3A 06                      addr0a0a:        bnz  addr0a06       ; Short branch on D!=0
 1764/ A0C : 7B                         addr0a0c:        seq            ; Set Q=1
 1765/ A0D : 4A                         addr0a0d:        lda RA         ; Load D from (RA), increment RA
 1766/ A0E : BF                         addr0a0e:        phi RF         ; Put high register RF
 1767/ A0F : F8 09                      addr0a0f:        ldi  09h        ; Load D immediate
 1768/ A11 : AF                         addr0a11:        plo RF         ; Put low register RF
 1769/ A12 : AD                         addr0a12:        plo RD         ; Put low register RD
 1770/ A13 : FE                         addr0a13:        shl            ; Shift left D
 1771/ A14 : DC                         addr0a14:        sep RC         ; Set P=RC as program counter
 1772/ A15 : 2F                         addr0a15:        dec RF         ; Decrement (RF)
 1773/ A16 : 9F                         addr0a16:        ghi RF         ; Get high register RF
 1774/ A17 : FE                         addr0a17:        shl            ; Shift left D
 1775/ A18 : BF                         addr0a18:        phi RF         ; Put high register RF
 1776/ A19 : 8F                         addr0a19:        glo RF         ; Get low register RF
 1777/ A1A : 3A 14                      addr0a1a:        bnz  addr0a14       ; Short branch on D!=0
 1778/ A1C : 8D                         addr0a1c:        glo RD         ; Get low register RD
 1779/ A1D : F6                         addr0a1d:        shr            ; Shift right D
 1780/ A1E : DC                         addr0a1e:        sep RC         ; Set P=RC as program counter
 1781/ A1F : 28                         addr0a1f:        dec R8         ; Decrement (R8)
 1782/ A20 : 98                         addr0a20:        ghi R8         ; Get high register R8
 1783/ A21 : 3A 0C                      addr0a21:        bnz  addr0a0c       ; Short branch on D!=0
 1784/ A23 : DC                         addr0a23:        sep RC         ; Set P=RC as program counter
 1785/ A24 : DC                         addr0a24:        sep RC         ; Set P=RC as program counter
 1786/ A25 : DC                         addr0a25:        sep RC         ; Set P=RC as program counter
 1787/ A26 : DC                         addr0a26:        sep RC         ; Set P=RC as program counter
 1788/ A27 : 7A                         addr0a27:        req            ; Reset Q=0
 1789/ A28 : (MACRO)                    addr0a28:        RETURN         ; Set P=R5 as program counter
 1789/ A28 : D5                                 SEP R5
 1790/ A29 :                            
 1791/ A29 : F8 F0                      addr0a29:        ldi  0f0h        ; Load D immediate
 1792/ A2B : BC                         addr0a2b:        phi RC         ; Put high register RC
 1793/ A2C : F8 BA                      addr0a2c:        ldi  0bah        ; Load D immediate
 1794/ A2E : AC                         addr0a2e:        plo RC         ; Put low register RC
 1795/ A2F : F8 F9                      addr0a2f:        ldi  0f9h        ; Load D immediate
 1796/ A31 : BD                         addr0a31:        phi RD         ; Put high register RD
 1797/ A32 : DC                         addr0a32:        sep RC         ; Set P=RC as program counter
 1798/ A33 : 3B 2F                      addr0a33:        bnf  addr0a2f       ; Short branch on DF=0
 1799/ A35 : 9D                         addr0a35:        ghi RD         ; Get high register RD
 1800/ A36 : 3A 32                      addr0a36:        bnz  addr0a32       ; Short branch on D!=0
 1801/ A38 : DC                         addr0a38:        sep RC         ; Set P=RC as program counter
 1802/ A39 : 33 38                      addr0a39:        bdf  addr0a38       ; Short branch on DF=1
 1803/ A3B : F8 01                      addr0a3b:        ldi  01h        ; Load D immediate
 1804/ A3D : BD                         addr0a3d:        phi RD         ; Put high register RD
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 34 - 09/11/2024 10:24:33 PM


 1805/ A3E : AD                         addr0a3e:        plo RD         ; Put low register RD
 1806/ A3F : DC                         addr0a3f:        sep RC         ; Set P=RC as program counter
 1807/ A40 : 9D                         addr0a40:        ghi RD         ; Get high register RD
 1808/ A41 : 7E                         addr0a41:        shlc           ; Shift left with carry
 1809/ A42 : BD                         addr0a42:        phi RD         ; Put high register RD
 1810/ A43 : 3B 3F                      addr0a43:        bnf  addr0a3f       ; Short branch on DF=0
 1811/ A45 : DC                         addr0a45:        sep RC         ; Set P=RC as program counter
 1812/ A46 : 8D                         addr0a46:        glo RD         ; Get low register RD
 1813/ A47 : F6                         addr0a47:        shr            ; Shift right D
 1814/ A48 : 33 59                      addr0a48:        bdf  addr0a59       ; Short branch on DF=1
 1815/ A4A : 9D                         addr0a4a:        ghi RD         ; Get high register RD
 1816/ A4B : 5A                         addr0a4b:        str RA         ; Store D to (RA)
 1817/ A4C : EA                         addr0a4c:        sex RA         ; Set P=RA as datapointer
 1818/ A4D : 64                         addr0a4d:        out 4          ; Output (R(X)); Increment R(X), N=100
 1819/ A4E : FC FF                      addr0a4e:        adi  0ffh        ; Add D,DF with value
 1820/ A50 : 88                         addr0a50:        glo R8         ; Get low register R8
 1821/ A51 : 7E                         addr0a51:        shlc           ; Shift left with carry
 1822/ A52 : A8                         addr0a52:        plo R8         ; Put low register R8
 1823/ A53 : FA 03                      addr0a53:        ani  03h        ; Logical AND D with value
 1824/ A55 : 3A 38                      addr0a55:        bnz  addr0a38       ; Short branch on D!=0
 1825/ A57 : 19                         addr0a57:        inc R9         ; Increment (R9)
 1826/ A58 : 8A                         addr0a58:        glo RA         ; Get low register RA
 1827/ A59 : (MACRO)                    addr0a59:        RETURN         ; Set P=R5 as program counter
 1827/ A59 : D5                                 SEP R5
 1828/ A5A :                            
 1829/ A5A :                            ;INPUT FROM KEYBOARD ROUTINE
 1830/ A5A : 9E                         addr0a5a:        ghi RE         ; Get high register RE
 1831/ A5B : 32 B7                      addr0a5b:        bz  addr0ab0        ; Short branch on D=0
 1832/ A5D : (MACRO)                    addr0a5d:        SERIAL_B  addr0a5d        ; Short branch on EF4=1 SERIAL INPUT ROUTINE
 1832/ A5D : 35 5D                                      B2 ADDR0A5D
 1833/ A5F : F6                         addr0a5f:        shr            ; Shift right D
 1834/ A60 : (MACRO)                    addr0a60:        CALL   00f9h    ; Set P=R4 as program counter
 1834/ A60 : D4                                 SEP R4
 1834/ A61 : 00 F9                                      dw 00F9H
 1835/ A63 : (MACRO)                    addr0a63:        SERIAL_B  addr0a5a        ; Short branch on EF4=1
 1835/ A63 : 35 5A                                      B2 ADDR0A5A
 1836/ A65 : F8 7F                      addr0a65:        ldi  7Fh        ; Load D immediate
 1837/ A67 : AF                         addr0a67:        plo RF         ; Put low register RF
 1838/ A68 : 9E                         addr0a68:        ghi RE         ; Get high register RE
 1839/ A69 : F6                         addr0a69:        shr            ; Shift right D
 1840/ A6A : (MACRO)                    addr0a6a:        SERIAL_B  addr0a70        ; Short branch on EF4=1
 1840/ A6A : 35 70                                      B2 ADDR0A70
 1841/ A6C : 3B 71                      addr0a6c:        bnf  addr0a71       ; Short branch on DF=0
 1842/ A6E : 7B                         addr0a6e:        seq            ; Set Q=1
 1843/ A6F : 38                         addr0a6f:        skp            ; Skip next byte
 1844/ A70 : 7A                         addr0a70:        req            ; Reset Q=0
 1845/ A71 : (MACRO)                    addr0a71:        CALL   00f6h    ; Set P=R4 as program counter
 1845/ A71 : D4                                 SEP R4
 1845/ A72 : 00 F6                                      dw 00F6H
 1846/ A74 : 8F                         addr0a74:        glo RF         ; Get low register RF
 1847/ A75 : F6                         addr0a75:        shr            ; Shift right D
 1848/ A76 : AF                         addr0a76:        plo RF         ; Put low register RF
 1849/ A77 : (MACRO)                    addr0a77:        SERIAL_BN  addr0a7b       ; Short branch on EF4=0
 1849/ A77 : 3D 7B                                      BN2 ADDR0A7B
 1850/ A79 : F9 80                      addr0a79:        ori  80h        ; Logical OR D with value
 1851/ A7B : 33 67                      addr0a7b:        bdf  addr0a67   ; Short branch on DF=1
 1852/ A7D : 9E                         				 ghi RE
 1853/ A7E : F6                         				 shr
 1854/ A7F : (MACRO)                    				 SERIAL_B  +       ; Short branch on EF4=1
 1854/ A7F : 35 83                                      B2 +
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 35 - 09/11/2024 10:24:33 PM


 1855/ A81 : 7B                         				 seq            ; Set Q=1
 1856/ A82 : 38                         			 	 skp            ; Skip next byte
 1857/ A83 : 7A                         +				 req            ; Reset Q=0
 1858/ A84 : (MACRO)                    				 CALL   00f6h    ; Set P=R4 as program counter
 1858/ A84 : D4                                 SEP R4
 1858/ A85 : 00 F6                                      dw 00F6H
 1859/ A87 : 7A                         				 req
 1860/ A88 : 8F                                          glo RF         ; Get low register RF
 1861/ A89 : (MACRO)                                     RETURN         ; Set P=R5 as program counter
 1861/ A89 : D5                                 SEP R5
 1862/ A8A :                            
 1863/ A8A :                            ;OUTPUT TO SCREEN ROUTINE
 1864/ A8A : AC                         addr0a83:        plo RC         ; Put low register RC
 1865/ A8B : BC                         addr0a84:        phi RC         ; Put high register RC
 1866/ A8C : 9E                         addr0a85:        ghi RE         ; Get high register RE
 1867/ A8D : 3A 92                      addr0a86:        bnz  addr0a8b       ; Short branch on D!=0
 1868/ A8F : 8C                         addr0a88:        glo RC         ; Get low register RC
 1869/ A90 : 30 C1                      addr0a89:        br  addr0aba        ; Short branch
 1870/ A92 :                            
 1871/ A92 :                            ;SERIAL OUTPUT ROUTINE
 1872/ A92 : F8 0A                      addr0a8b:        ldi  0ah        ; Load D immediate
 1873/ A94 : AF                         addr0a8d:        plo RF         ; Put low register RF
 1874/ A95 : (MACRO)                    addr0a8e:        CALL   00f6h    ; Set P=R4 as program counter
 1874/ A95 : D4                                 SEP R4
 1874/ A96 : 00 F6                                      dw 00F6H
 1875/ A98 : FC 00                      addr0a91:        adi  00h        ; Add D,DF with value
 1876/ A9A : (MACRO)                    addr0a93:        CALL   00f6h    ; Set P=R4 as program counter
 1876/ A9A : D4                                 SEP R4
 1876/ A9B : 00 F6                                      dw 00F6H
 1877/ A9D : C7                         addr0a96:        lsnf           ; Long skip on DF=0
 1878/ A9E : 7A                         addr0a97:        req            ; Reset Q=0
 1879/ A9F : 38                         addr0a98:        skp            ; Skip next byte
 1880/ AA0 : 7B                         addr0a99:        seq            ; Set Q=1
 1881/ AA1 : 9C                         addr0a9a:        ghi RC         ; Get high register RC
 1882/ AA2 : FF 00                      addr0a9b:        smi  00h        ; Substract D,DF to value
 1883/ AA4 : 76                         addr0a9d:        shrc           ; Shift right with carry
 1884/ AA5 : BC                         addr0a9e:        phi RC         ; Put high register RC
 1885/ AA6 : 2F                         addr0a9f:        dec RF         ; Decrement (RF)
 1886/ AA7 : 8F                         addr0aa0:        glo RF         ; Get low register RF
 1887/ AA8 : 3A 9A                      addr0aa1:        bnz  addr0a93       ; Short branch on D!=0
 1888/ AAA : 8C                         addr0aa3:        glo RC         ; Get low register RC
 1889/ AAB : (MACRO)                    addr0aa4:        RETURN         ; Set P=R5 as program counter
 1889/ AAB : D5                                 SEP R5
 1890/ AAC :                            
 1891/ AAC : D7                         addr0aa5:        sep R7         ; Set P=R7 as program counter
 1892/ AAD : 0F                         addr0aa6:        ldn RF         ; Load D with (RF)
 1893/ AAE : FE                         addr0aa7:        shl            ; Shift left D
 1894/ AAF : FE                         addr0aa8:        shl            ; Shift left D
 1895/ AB0 : FE                         addr0aa9:        shl            ; Shift left D
 1896/ AB1 : 3A BA                      addr0aaa:        bnz   addr0ab3       ; Short branch on D!=0
 1897/ AB3 : 7E                         addr0aac:        shlc           ; Shift left with carry
 1898/ AB4 : (MACRO)                    addr0aad:        CALL   0ad8h    ; Set P=R4 as program counter
 1898/ AB4 : D4                                 SEP R4
 1898/ AB5 : 0A D8                                      dw 0AD8H
 1899/ AB7 : (MACRO)                    addr0ab0:        CALL   09d8h    ; Set P=R4 as program counter
 1899/ AB7 : D4                                 SEP R4
 1899/ AB8 : 09 D8                                      dw 09D8H
 1900/ ABA : (MACRO)                    addr0ab3:        KB_BN   addr0aa5       ; Short branch on EF3=0
 1900/ ABA : 3E AC                                      BN3 ADDR0AA5
 1901/ ABC : 9D                         addr0ab5:        ghi RD         ; Get high register RD
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 36 - 09/11/2024 10:24:33 PM


 1902/ ABD : (MACRO)                    addr0ab6:        CALL   0ad8h    ; Set P=R4 as program counter
 1902/ ABD : D4                                 SEP R4
 1902/ ABE : 0A D8                                      dw 0AD8H
 1903/ AC0 : 6F                         addr0ab9:        inp 7          ; Input to (R(X)) and D, N=111
 1904/ AC1 : (MACRO)                    addr0aba:        CALL   0ad8h    ; Set P=R4 as program counter
 1904/ AC1 : D4                                 SEP R4
 1904/ AC2 : 0A D8                                      dw 0AD8H
 1905/ AC4 : AE                         addr0abd:        plo RE         ; Put low register RE
 1906/ AC5 : FB 0A                      addr0abe:        xri  0ah        ; Logical XOR D with value
 1907/ AC7 : 32 CD                      addr0ac0:        bz   addr0ac6        ; Short branch on D=0
 1908/ AC9 : (MACRO)                    addr0ac2:        SERIAL_B   addr0ac6        ; Short branch on EF4=1
 1908/ AC9 : 35 CD                                      B2 ADDR0AC6
 1909/ ACB : 8E                         addr0ac4:        glo RE         ; Get low register RE
 1910/ ACC : (MACRO)                    addr0ac5:        RETURN         ; Set P=R5 as program counter
 1910/ ACC : D5                                 SEP R5
 1911/ ACD :                            
 1912/ ACD : (MACRO)                    addr0ac6:        CALL   09d8h    ; Set P=R4 as program counter
 1912/ ACD : D4                                 SEP R4
 1912/ ACE : 09 D8                                      dw 09D8H
 1913/ AD0 : F8 0C                      addr0ac9:        ldi  0ch        ; Load D immediate
 1914/ AD2 : BF                         addr0acb:        phi RF         ; Put high register RF
 1915/ AD3 : 2F                         addr0acc:        dec RF         ; Decrement (RF)
 1916/ AD4 : 9F                         addr0acd:        ghi RF         ; Get high register RF
 1917/ AD5 : 3A D3                      addr0ace:        bnz  addr0acc       ; Short branch on D!=0
 1918/ AD7 : (MACRO)                    addr0ad0:        SERIAL_B   addr0ad0        ; Short branch on EF4=1
 1918/ AD7 : 35 D7                                      B2 ADDR0AD0
 1919/ AD9 : E3                         addr0ad2:        sex R3         ; Set P=R3 as datapointer
 1920/ ADA : 61                         addr0ad3:        out 1          ; Output (R(X)); Increment R(X), N=001
 1921/ ADB : 00                         addr0ad4:        idl            ; Idle or wait for interrupt or DMA request
 1922/ ADC : 8E                         addr0ad5:        glo RE         ; Get low register RE
 1923/ ADD : 71                         addr0ad6:        dis            ; Disable. Return from interrupt, set IE=0
 1924/ ADE : (MACRO)                    addr0ad7:        RETURN         ; Set P=R5 as program counter
 1924/ ADE : D5                                 SEP R5
 1925/ ADF :                            
 1926/ ADF : FA 7F                      addr0ad8:        ani  7fh        ; Logical AND D with value
 1927/ AE1 : AE                         addr0ada:        plo RE         ; Put low register RE
 1928/ AE2 : FF 60                      addr0adb:        smi  60h        ; Substract D,DF to value
 1929/ AE4 : 8E                         addr0add:        glo RE         ; Get low register RE
 1930/ AE5 : 3B EA                      addr0ade:        bnf addr0ae3       ; Short branch on DF=0
 1931/ AE7 : FF 20                      addr0ae0:        smi  20h        ; Substract D,DF to value
 1932/ AE9 : AE                         addr0ae2:        plo RE         ; Put low register RE
 1933/ AEA : E2                         addr0ae3:        sex R2         ; Set P=R2 as datapointer
 1934/ AEB : 8A                         addr0ae4:        glo RA         ; Get low register RA
 1935/ AEC : 73                         addr0ae5:        stxd           ; Store via X and devrement
 1936/ AED : 9A                         addr0ae6:        ghi RA         ; Get high register RA
 1937/ AEE : 73                         addr0ae7:        stxd           ; Store via X and devrement
 1938/ AEF : 89                         addr0ae8:        glo R9         ; Get low register R9
 1939/ AF0 : 73                         addr0ae9:        stxd           ; Store via X and devrement
 1940/ AF1 : 99                         addr0aea:        ghi R9         ; Get high register R9
 1941/ AF2 : 73                         addr0aeb:        stxd           ; Store via X and devrement
 1942/ AF3 : 88                         addr0aec:        glo R8         ; Get low register R8
 1943/ AF4 : 73                         addr0aed:        stxd           ; Store via X and devrement
 1944/ AF5 : 98                         addr0aee:        ghi R8         ; Get high register R8
 1945/ AF6 : 73                         addr0aef:        stxd           ; Store via X and devrement
 1946/ AF7 : F8 1E                      addr0af0:        ldi  1eh        ; Load D immediate
 1947/ AF9 : AA                         addr0af2:        plo RA         ; Put low register RA
 1948/ AFA : F8 0C                      addr0af3:        ldi  0ch        ; Load D immediate
 1949/ AFC : BA                         addr0af5:        phi RA         ; Put high register RA
 1950/ AFD : D7                         addr0af6:        sep R7         ; Set P=R7 as program counter
 1951/ AFE : 08                         addr0af7:        ldn R8         ; Load D with (R8)
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 37 - 09/11/2024 10:24:33 PM


 1952/ AFF : B8                         addr0af8:        phi R8         ; Put high register R8
 1953/ B00 : 4D                         addr0af9:        lda RD         ; Load D from (RD), increment RD
 1954/ B01 : A8                         addr0afa:        plo R8         ; Put low register R8
 1955/ B02 : 4D                         addr0afb:        lda RD         ; Load D from (RD), increment RD
 1956/ B03 : FA 07                      addr0afc:        ani  07h        ; Logical AND D with value
 1957/ B05 : B9                         addr0afe:        phi R9         ; Put high register R9
 1958/ B06 : D7                         addr0aff:        sep R7         ; Set P=R7 as program counter
 1959/ B07 : 13                         addr0b00:        inc R3         ; Increment (R3)
 1960/ B08 : 8E                         addr0b01:        glo RE         ; Get low register RE
 1961/ B09 : F3                         addr0b02:        xor            ; Logical exclusive OR  D with (R(X))
 1962/ B0A : 32 55                      addr0b03:        bz  addr0b4e        ; Short branch on D=0
 1963/ B0C : 8E                         addr0b05:        glo RE         ; Get low register RE
 1964/ B0D : FF 7F                      addr0b06:        smi  7fh        ; Substract D,DF to value
 1965/ B0F : 32 27                      addr0b08:        bz  addr0b20        ; Short branch on D=0
 1966/ B11 : FC 5F                      addr0b0a:        adi  5fh        ; Add D,DF with value
 1967/ B13 : 33 AF                      addr0b0c:        bdf  addr0ba8       ; Short branch on DF=1
 1968/ B15 : FC 13                      addr0b0e:        adi  13h        ; Add D,DF with value
 1969/ B17 : 32 78                      addr0b10:        bz  addr0b71        ; Short branch on D=0
 1970/ B19 : FC 01                      addr0b12:        adi  01h        ; Add D,DF with value
 1971/ B1B : 32 66                      addr0b14:        bz  addr0b5f        ; Short branch on D=0
 1972/ B1D : FC 02                      addr0b16:        adi  02h        ; Add D,DF with value
 1973/ B1F : 32 5C                      addr0b18:        bz  addr0b55        ; Short branch on D=0
 1974/ B21 : FC 09                      addr0b1a:        adi  09h        ; Add D,DF with value
 1975/ B23 : 32 55                      addr0b1c:        bz  addr0b4e        ; Short branch on D=0
 1976/ B25 : 3B 4D                      addr0b1e:        bnf  addr0b46       ; Short branch on DF=0
 1977/ B27 : D7                         addr0b20:        sep R7         ; Set P=R7 as program counter
 1978/ B28 : 1A                         addr0b21:        inc RA         ; Increment (RA)
 1979/ B29 : 99                         addr0b22:        ghi R9         ; Get high register R9
 1980/ B2A : FA 07                      addr0b23:        ani  07h        ; Logical AND D with value
 1981/ B2C : B9                         addr0b25:        phi R9         ; Put high register R9
 1982/ B2D : FC FE                      addr0b26:        adi  0feh        ; Add D,DF with value
 1983/ B2F : 88                         addr0b28:        glo R8         ; Get low register R8
 1984/ B30 : 7E                         addr0b29:        shlc           ; Shift left with carry
 1985/ B31 : F3                         addr0b2a:        xor            ; Logical exclusive OR  D with (R(X))
 1986/ B32 : FA 07                      addr0b2b:        ani  07h        ; Logical AND D with value
 1987/ B34 : F3                         addr0b2d:        xor            ; Logical exclusive OR  D with (R(X))
 1988/ B35 : 5D                         addr0b2e:        str RD         ; Store D to (RD)
 1989/ B36 : D7                         addr0b2f:        sep R7         ; Set P=R7 as program counter
 1990/ B37 : 09                         addr0b30:        ldn R9         ; Load D with (R9)
 1991/ B38 : 99                         addr0b31:        ghi R9         ; Get high register R9
 1992/ B39 : 73                         addr0b32:        stxd           ; Store via X and devrement
 1993/ B3A : 88                         addr0b33:        glo R8         ; Get low register R8
 1994/ B3B : 73                         addr0b34:        stxd           ; Store via X and devrement
 1995/ B3C : 98                         addr0b35:        ghi R8         ; Get high register R8
 1996/ B3D : 73                         addr0b36:        stxd           ; Store via X and devrement
 1997/ B3E : 12                         addr0b37:        inc R2         ; Increment (R2)
 1998/ B3F : 42                         addr0b38:        lda R2         ; Load D from (R2), increment R2
 1999/ B40 : B8                         addr0b39:        phi R8         ; Put high register R8
 2000/ B41 : 42                         addr0b3a:        lda R2         ; Load D from (R2), increment R2
 2001/ B42 : A8                         addr0b3b:        plo R8         ; Put low register R8
 2002/ B43 : 42                         addr0b3c:        lda R2         ; Load D from (R2), increment R2
 2003/ B44 : B9                         addr0b3d:        phi R9         ; Put high register R9
 2004/ B45 : 42                         addr0b3e:        lda R2         ; Load D from (R2), increment R2
 2005/ B46 : A9                         addr0b3f:        plo R9         ; Put low register R9
 2006/ B47 : 42                         addr0b40:        lda R2         ; Load D from (R2), increment R2
 2007/ B48 : BA                         addr0b41:        phi RA         ; Put high register RA
 2008/ B49 : 02                         addr0b42:        ldn R2         ; Load D with (R2)
 2009/ B4A : AA                         addr0b43:        plo RA         ; Put low register RA
 2010/ B4B : 8E                         addr0b44:        glo RE         ; Get low register RE
 2011/ B4C : (MACRO)                    addr0b45:        RETURN         ; Set P=R5 as program counter
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 38 - 09/11/2024 10:24:33 PM


 2011/ B4C : D5                                 SEP R5
 2012/ B4D :                            
 2013/ B4D : F8 80                      addr0b46:        ldi  80h        ; Load D immediate
 2014/ B4F : DA                         addr0b48:        sep RA         ; Set P=RA as program counter
 2015/ B50 : FB FF                      addr0b49:        xri  0ffh        ; Logical XOR D with value
 2016/ B52 : F2                         addr0b4b:        and            ; Logical AND: D with (R(X))
 2017/ B53 : 30 59                      addr0b4c:        br  addr0b52        ; Short branch
 2018/ B55 : F8 80                      addr0b4e:        ldi  80h        ; Load D immediate
 2019/ B57 : DA                         addr0b50:        sep RA         ; Set P=RA as program counter
 2020/ B58 : F1                         addr0b51:        or             ; Logical OR  D with (R(X))
 2021/ B59 : 58                         addr0b52:        str R8         ; Store D to (R8)
 2022/ B5A : 30 27                      addr0b53:        br  addr0b20        ; Short branch
 2023/ B5C : 88                         addr0b55:        glo R8         ; Get low register R8
 2024/ B5D : FC 30                      addr0b56:        adi  30h        ; Add D,DF with value
 2025/ B5F : A8                         addr0b58:        plo R8         ; Put low register R8
 2026/ B60 : 98                         addr0b59:        ghi R8         ; Get high register R8
 2027/ B61 : 7C 00                      addr0b5a:        adci  00h       ; Add with carry immediate
 2028/ B63 : B8                         addr0b5c:        phi R8         ; Put high register R8
 2029/ B64 : 30 7E                      addr0b5d:        br  addr0b77        ; Short branch
 2030/ B66 : F8 3F                      addr0b5f:        ldi  3fh        ; Load D immediate
 2031/ B68 : A8                         addr0b61:        plo R8         ; Put low register R8
 2032/ B69 : F8 0F                      addr0b62:        ldi  0fh        ; Load D immediate
 2033/ B6B : B8                         addr0b64:        phi R8         ; Put high register R8
 2034/ B6C : E8                         addr0b65:        sex R8         ; Set P=R8 as datapointer
 2035/ B6D : 9D                         addr0b66:        ghi RD         ; Get high register RD
 2036/ B6E : 73                         addr0b67:        stxd           ; Store via X and devrement
 2037/ B6F : 88                         addr0b68:        glo R8         ; Get low register R8
 2038/ B70 : FF B0                      addr0b69:        smi  0b0h        ; Substract D,DF to value
 2039/ B72 : 98                         addr0b6b:        ghi R8         ; Get high register R8
 2040/ B73 : 7F 0D                      addr0b6c:        smbi  0dh       ; Substract memory toh borrow, immediate
 2041/ B75 : 33 6D                      addr0b6e:        bdf  addr0b66       ; Short branch on DF=1
 2042/ B77 : 60                         addr0b70:        irx            ; Increment register X
 2043/ B78 : 9D                         addr0b71:        ghi RD         ; Get high register RD
 2044/ B79 : B9                         addr0b72:        phi R9         ; Put high register R9
 2045/ B7A : 88                         addr0b73:        glo R8         ; Get low register R8
 2046/ B7B : FA F8                      addr0b74:        ani  0f8h        ; Logical AND D with value
 2047/ B7D : A8                         addr0b76:        plo R8         ; Put low register R8
 2048/ B7E : 88                         addr0b77:        glo R8         ; Get low register R8
 2049/ B7F : FF 08                      addr0b78:        smi  08h        ; Substract D,DF to value
 2050/ B81 : 98                         addr0b7a:        ghi R8         ; Get high register R8
 2051/ B82 : 7F 0F                      addr0b7b:        smbi  0fh       ; Substract memory toh borrow, immediate
 2052/ B84 : 3B 27                      addr0b7d:        bnf  addr0b20       ; Short branch on DF=0
 2053/ B86 : F8 B0                      addr0b7f:        ldi  0b0h        ; Load D immediate
 2054/ B88 : AF                         addr0b81:        plo RF         ; Put low register RF
 2055/ B89 : 88                         addr0b82:        glo R8         ; Get low register R8
 2056/ B8A : FC B0                      addr0b83:        adi  0b0h        ; Add D,DF with value
 2057/ B8C : FA F8                      addr0b85:        ani  0f8h        ; Logical AND D with value
 2058/ B8E : AA                         addr0b87:        plo RA         ; Put low register RA
 2059/ B8F : F8 0D                      addr0b88:        ldi  0dh        ; Load D immediate
 2060/ B91 : BF                         addr0b8a:        phi RF         ; Put high register RF
 2061/ B92 : 7C 00                      addr0b8b:        adci  00h       ; Add with carry immediate
 2062/ B94 : BA                         addr0b8d:        phi RA         ; Put high register RA
 2063/ B95 : 4A                         addr0b8e:        lda RA         ; Load D from (RA), increment RA
 2064/ B96 : 5F                         addr0b8f:        str RF         ; Store D to (RF)
 2065/ B97 : 1F                         addr0b90:        inc RF         ; Increment (RF)
 2066/ B98 : 8F                         addr0b91:        glo RF         ; Get low register RF
 2067/ B99 : FF 08                      addr0b92:        smi  08h        ; Substract D,DF to value
 2068/ B9B : 9F                         addr0b94:        ghi RF         ; Get high register RF
 2069/ B9C : 7F 0F                      addr0b95:        smbi  0fh       ; Substract memory toh borrow, immediate
 2070/ B9E : 3B 95                      addr0b97:        bnf  addr0b8e       ; Short branch on DF=0
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 39 - 09/11/2024 10:24:33 PM


 2071/ BA0 : 8F                         addr0b99:        glo RF         ; Get low register RF
 2072/ BA1 : FF 40                      addr0b9a:        smi  40h        ; Substract D,DF to value
 2073/ BA3 : 9D                         addr0b9c:        ghi RD         ; Get high register RD
 2074/ BA4 : 3B 96                      addr0b9d:        bnf  addr0b8f       ; Short branch on DF=0
 2075/ BA6 : 88                         addr0b9f:        glo R8         ; Get low register R8
 2076/ BA7 : FA 07                      addr0ba0:        ani  07h        ; Logical AND D with value
 2077/ BA9 : A8                         addr0ba2:        plo R8         ; Put low register R8
 2078/ BAA : F8 0F                      addr0ba3:        ldi  0fh        ; Load D immediate
 2079/ BAC : B8                         addr0ba5:        phi R8         ; Put high register R8
 2080/ BAD : 30 27                      addr0ba6:        br  addr0b20        ; Short branch
 2081/ BAF : 8E                         addr0ba8:        glo RE         ; Get low register RE
 2082/ BB0 : FE                         addr0ba9:        shl            ; Shift left D
 2083/ BB1 : FC 6F                      addr0baa:        adi  6fh        ; Add D,DF with value
 2084/ BB3 : AF                         addr0bac:        plo RF         ; Put low register RF
 2085/ BB4 : 9D                         addr0bad:        ghi RD         ; Get high register RD
 2086/ BB5 : 7C 0C                      addr0bae:        adci  0ch       ; Add with carry immediate
 2087/ BB7 : BF                         addr0bb0:        phi RF         ; Put high register RF
 2088/ BB8 : D7                         addr0bb1:        sep R7         ; Set P=R7 as program counter
 2089/ BB9 : 0B                         addr0bb2:        ldn RB         ; Load D with (RB)
 2090/ BBA : 4F                         addr0bb3:        lda RF         ; Load D from (RF), increment RF
 2091/ BBB : 5D                         addr0bb4:        str RD         ; Store D to (RD)
 2092/ BBC : 4F                         addr0bb5:        lda RF         ; Load D from (RF), increment RF
 2093/ BBD : FC 2F                      addr0bb6:        adi  2fh        ; Add D,DF with value
 2094/ BBF : AF                         addr0bb8:        plo RF         ; Put low register RF
 2095/ BC0 : 9D                         addr0bb9:        ghi RD         ; Get high register RD
 2096/ BC1 : 7C 0D                      addr0bba:        adci  0dh       ; Add with carry immediate
 2097/ BC3 : BF                         addr0bbc:        phi RF         ; Put high register RF
 2098/ BC4 : 99                         addr0bbd:        ghi R9         ; Get high register R9
 2099/ BC5 : 52                         addr0bbe:        str R2         ; Store D to (R2)
 2100/ BC6 : 22                         addr0bbf:        dec R2         ; Decrement (R2)
 2101/ BC7 : 0D                         addr0bc0:        ldn RD         ; Load D with (RD)
 2102/ BC8 : FA 07                      addr0bc1:        ani  07h        ; Logical AND D with value
 2103/ BCA : B9                         addr0bc3:        phi R9         ; Put high register R9
 2104/ BCB : 0D                         addr0bc4:        ldn RD         ; Load D with (RD)
 2105/ BCC : FA F8                      addr0bc5:        ani 0f8h        ; Logical AND D with value
 2106/ BCE : DA                         addr0bc7:        sep RA         ; Set P=RA as program counter
 2107/ BCF : 1A                         addr0bc8:        inc RA         ; Increment (RA)
 2108/ BD0 : 1A                         addr0bc9:        inc RA         ; Increment (RA)
 2109/ BD1 : A9                         addr0bca:        plo R9         ; Put low register R9
 2110/ BD2 : 12                         addr0bcb:        inc R2         ; Increment (R2)
 2111/ BD3 : E2                         addr0bcc:        sex R2         ; Set P=R2 as datapointer
 2112/ BD4 : 0D                         addr0bcd:        ldn RD         ; Load D with (RD)
 2113/ BD5 : FA 07                      addr0bce:        ani  07h        ; Logical AND D with value
 2114/ BD7 : F5                         addr0bd0:        sd             ; Substract D: D,DF=(R(X))-D
 2115/ BD8 : B9                         addr0bd1:        phi R9         ; Put high register R9
 2116/ BD9 : 89                         addr0bd2:        glo R9         ; Get low register R9
 2117/ BDA : 5D                         addr0bd3:        str RD         ; Store D to (RD)
 2118/ BDB : 4F                         addr0bd4:        lda RF         ; Load D from (RF), increment RF
 2119/ BDC : ED                         addr0bd5:        sex RD         ; Set P=RD as datapointer
 2120/ BDD : F2                         addr0bd6:        and            ; Logical AND: D with (R(X))
 2121/ BDE : DA                         addr0bd7:        sep RA         ; Set P=RA as program counter
 2122/ BDF : F1                         addr0bd8:        or             ; Logical OR  D with (R(X))
 2123/ BE0 : 58                         addr0bd9:        str R8         ; Store D to (R8)
 2124/ BE1 : DA                         addr0bda:        sep RA         ; Set P=RA as program counter
 2125/ BE2 : 33 DB                      addr0bdb:        bdf addr0bd4       ; Short branch on DF=1
 2126/ BE4 : 0D                         addr0bdd:        ldn RD         ; Load D with (RD)
 2127/ BE5 : DA                         addr0bde:        sep RA         ; Set P=RA as program counter
 2128/ BE6 : 1A                         addr0bdf:        inc RA         ; Increment (RA)
 2129/ BE7 : 1A                         addr0be0:        inc RA         ; Increment (RA)
 2130/ BE8 : CB 0C 05                   addr0be1:        lbnf addr0bfc       ; Short branch on DF=0
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 40 - 09/11/2024 10:24:33 PM


 2131/ BEB : 8F                         addr0be3:        glo RF         ; Get low register RF
 2132/ BEC : FF 06                      addr0be4:        smi  06h        ; Substract D,DF to value
 2133/ BEE : AF                         addr0be6:        plo RF         ; Put low register RF
 2134/ BEF : 18                         addr0be7:        inc R8         ; Increment (R8)
 2135/ BF0 : 88                         addr0be8:        glo R8         ; Get low register R8
 2136/ BF1 : FA 07                      addr0be9:        ani  07h        ; Logical AND D with value
 2137/ BF3 : 3A FE                      addr0beb:        bnz addr0bf6       ; Short branch on D!=0
 2138/ BF5 : 99                         addr0bed:        ghi R9         ; Get high register R9
 2139/ BF6 : FA 87                      addr0bee:        ani  87h        ; Logical AND D with value
 2140/ BF8 : F9 50                      addr0bf0:        ori  50h        ; Logical OR D with value
 2141/ BFA : B9                         addr0bf2:        phi R9         ; Put high register R9
 2142/ BFB : 2A                         addr0bf3:        dec RA         ; Decrement (RA)
 2143/ BFC : 2A                         addr0bf4:        dec RA         ; Decrement (RA)
 2144/ BFD : DA                         addr0bf5:        sep RA         ; Set P=RA as program counter
 2145/ BFE : 99                         addr0bf6:        ghi R9         ; Get high register R9
 2146/ BFF : F9 F8                      addr0bf7:        ori 0f8h        ; Logical OR D with value
 2147/ C01 : B9                         addr0bf9:        phi R9         ; Put high register R9
 2148/ C02 : C0 0B DB                   addr0bfa:        lbr  addr0bd4        ; Short branch
 2149/ C05 : E2                         addr0bfc:        sex R2         ; Set P=R2 as datapointer
 2150/ C06 : F9 80                      addr0bfd:        ori  80h        ; Logical OR D with value
 2151/ C08 : 38                         addr0bff:        skp            ; Skip next byte
 2152/ C09 : 19                         addr0c00:        inc R9         ; Increment (R9)
 2153/ C0A : F6                         addr0c01:        shr            ; Shift right D
 2154/ C0B : 3B 09                      addr0c02:        bnf  addr0c00       ; Short branch on DF=0
 2155/ C0D : 89                         addr0c04:        glo R9         ; Get low register R9
 2156/ C0E : FD 09                      addr0c05:        sdi  09h        ; Substract D,DF from value
 2157/ C10 : B9                         addr0c07:        phi R9         ; Put high register R9
 2158/ C11 : FF 08                      addr0c08:        smi  08h        ; Substract D,DF to value
 2159/ C13 : 3B 22                      addr0c0a:        bnf addr0c19       ; Short branch on DF=0
 2160/ C15 : B9                         addr0c0c:        phi R9         ; Put high register R9
 2161/ C16 : 18                         addr0c0d:        inc R8         ; Increment (R8)
 2162/ C17 : 88                         addr0c0e:        glo R8         ; Get low register R8
 2163/ C18 : FA 07                      addr0c0f:        ani  07h        ; Logical AND D with value
 2164/ C1A : 3A 22                      addr0c11:        bnz addr0c19       ; Short branch on D!=0
 2165/ C1C : F8 50                      addr0c13:        ldi  50h        ; Load D immediate
 2166/ C1E : B9                         addr0c15:        phi R9         ; Put high register R9
 2167/ C1F : 2A                         addr0c16:        dec RA         ; Decrement (RA)
 2168/ C20 : 2A                         addr0c17:        dec RA         ; Decrement (RA)
 2169/ C21 : DA                         addr0c18:        sep RA         ; Set P=RA as program counter
 2170/ C22 : C4                         addr0c19:        nop            ; No operation
 2171/ C23 : C0 0B 7E                   addr0c1a:        lbr  addr0b77      ; Long branch
 2172/ C26 : D3                         addr0c1d:        sep R3         ; Set P=R3 as program counter
 2173/ C27 : 52                         addr0c1e:        str R2         ; Store D to (R2)
 2174/ C28 : 88                         addr0c1f:        glo R8         ; Get low register R8
 2175/ C29 : FF B0                      addr0c20:        smi  0b0h        ; Substract D,DF to value
 2176/ C2B : 98                         addr0c22:        ghi R8         ; Get high register R8
 2177/ C2C : 7F 0D                      addr0c23:        smbi  0dh       ; Substract memory toh borrow, immediate
 2178/ C2E : 9D                         addr0c25:        ghi RD         ; Get high register RD
 2179/ C2F : 3B 50                      addr0c26:        bnf  addr0c47       ; Short branch on DF=0
 2180/ C31 : 99                         addr0c28:        ghi R9         ; Get high register R9
 2181/ C32 : FA 87                      addr0c29:        ani  87h        ; Logical AND D with value
 2182/ C34 : A9                         addr0c2b:        plo R9         ; Put low register R9
 2183/ C35 : 32 4E                      addr0c2c:        bz  addr0c45        ; Short branch on D=0
 2184/ C37 : FE                         addr0c2e:        shl            ; Shift left D
 2185/ C38 : 33 43                      addr0c2f:        bdf  addr0c3a       ; Short branch on DF=1
 2186/ C3A : 02                         addr0c31:        ldn R2         ; Load D with (R2)
 2187/ C3B : F6                         addr0c32:        shr            ; Shift right D
 2188/ C3C : 52                         addr0c33:        str R2         ; Store D to (R2)
 2189/ C3D : 29                         addr0c34:        dec R9         ; Decrement (R9)
 2190/ C3E : 89                         addr0c35:        glo R9         ; Get low register R9
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 41 - 09/11/2024 10:24:33 PM


 2191/ C3F : 3A 3A                      addr0c36:        bnz  addr0c31       ; Short branch on D!=0
 2192/ C41 : 30 4F                      addr0c38:        br  addr0c46        ; Short branch
 2193/ C43 : F6                         addr0c3a:        shr            ; Shift right D
 2194/ C44 : FD 08                      addr0c3b:        sdi  08h        ; Substract D,DF from value
 2195/ C46 : A9                         addr0c3d:        plo R9         ; Put low register R9
 2196/ C47 : 02                         addr0c3e:        ldn R2         ; Load D with (R2)
 2197/ C48 : FE                         addr0c3f:        shl            ; Shift left D
 2198/ C49 : 52                         addr0c40:        str R2         ; Store D to (R2)
 2199/ C4A : 29                         addr0c41:        dec R9         ; Decrement (R9)
 2200/ C4B : 89                         addr0c42:        glo R9         ; Get low register R9
 2201/ C4C : 3A 47                      addr0c43:        bnz  addr0c3e       ; Short branch on D!=0
 2202/ C4E : FE                         addr0c45:        shl            ; Shift left D
 2203/ C4F : 02                         addr0c46:        ldn R2         ; Load D with (R2)
 2204/ C50 : E8                         addr0c47:        sex R8         ; Set P=R8 as datapointer
 2205/ C51 : D3                         addr0c48:        sep R3         ; Set P=R3 as program counter
 2206/ C52 : 30 56                      addr0c49:        br  addr0c4d        ; Short branch
 2207/ C54 : 30 27                      addr0c4b:        br  addr0c1e        ; Short branch
 2208/ C56 : 99                         addr0c4d:        ghi R9         ; Get high register R9
 2209/ C57 : FC 18                      addr0c4e:        adi  18h        ; Add D,DF with value
 2210/ C59 : 3B 5D                      addr0c50:        bnf  addr0c54       ; Short branch on DF=0
 2211/ C5B : F9 80                      addr0c52:        ori  80h        ; Logical OR D with value
 2212/ C5D : FA F7                      addr0c54:        ani  0f7h        ; Logical AND D with value
 2213/ C5F : B9                         addr0c56:        phi R9         ; Put high register R9
 2214/ C60 : FE                         addr0c57:        shl            ; Shift left D
 2215/ C61 : FA E0                      addr0c58:        ani  0e0h        ; Logical AND D with value
 2216/ C63 : FB C0                      addr0c5a:        xri  0c0h        ; Logical XOR D with value
 2217/ C65 : 3A 79                      addr0c5c:        bnz  addr0c70       ; Short branch on D!=0
 2218/ C67 : 99                         addr0c5e:        ghi R9         ; Get high register R9
 2219/ C68 : FA 07                      addr0c5f:        ani  07h        ; Logical AND D with value
 2220/ C6A : 3B 6E                      addr0c61:        bnf  addr0c65       ; Short branch on DF=0
 2221/ C6C : F9 F8                      addr0c63:        ori  0f8h        ; Logical OR D with value
 2222/ C6E : B9                         addr0c65:        phi R9         ; Put high register R9
 2223/ C6F : 88                         addr0c66:        glo R8         ; Get low register R8
 2224/ C70 : FC 28                      addr0c67:        adi  28h        ; Add D,DF with value
 2225/ C72 : A8                         addr0c69:        plo R8         ; Put low register R8
 2226/ C73 : 98                         addr0c6a:        ghi R8         ; Get high register R8
 2227/ C74 : 7C 00                      addr0c6b:        adci  00h       ; Add with carry immediate
 2228/ C76 : B8                         addr0c6d:        phi R8         ; Put high register R8
 2229/ C77 : 30 26                      addr0c6e:        br  addr0c1d        ; Short branch
 2230/ C79 : 88                         addr0c70:        glo R8         ; Get low register R8
 2231/ C7A : FF 08                      addr0c71:        smi  08h        ; Substract D,DF to value
 2232/ C7C : A8                         addr0c73:        plo R8         ; Put low register R8
 2233/ C7D : 98                         addr0c74:        ghi R8         ; Get high register R8
 2234/ C7E : 7F 00                      addr0c75:        smbi  00h       ; Substract memory toh borrow, immediate
 2235/ C80 : B8                         addr0c77:        phi R8         ; Put high register R8
 2236/ C81 : 30 26                      addr0c78:        br  addr0c1d        ; Short branch
 2237/ C83 : F8 03                      addr0c7a:        ldi  03h        ; Load D immediate
 2238/ C85 : A0                         addr0c7c:        plo R0         ; Put low register R0
 2239/ C86 : E2                         addr0c7d:        sex R2         ; Set P=R2 as datapointer
 2240/ C87 : 42                         addr0c7e:        lda R2         ; Load D from (R2), increment R2
 2241/ C88 : FE                         addr0c7f:        shl            ; Shift left D
 2242/ C89 : 42                         addr0c80:        lda R2         ; Load D from (R2), increment R2
 2243/ C8A : 70                         addr0c81:        ret            ; Return from interrupt, set IE=1
 2244/ C8B : C4                         addr0c82:        nop            ; No operation
 2245/ C8C : 22                         addr0c83:        dec R2         ; Decrement (R2)
 2246/ C8D : 78                         addr0c84:        sav            ; Save
 2247/ C8E : 22                         addr0c85:        dec R2         ; Decrement (R2)
 2248/ C8F : 73                         addr0c86:        stxd           ; Store via X and devrement
 2249/ C90 : F8 0D                      addr0c87:        ldi  0dh        ; Load D immediate
 2250/ C92 : B0                         addr0c89:        phi R0         ; Put high register R0
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 42 - 09/11/2024 10:24:33 PM


 2251/ C93 : F8 B0                      addr0c8a:        ldi  0b0h        ; Load D immediate
 2252/ C95 : A0                         addr0c8c:        plo R0         ; Put low register R0
 2253/ C96 : 34 96                      addr0c8d:        b1  addr0c8d        ; Short branch on EF1=1
 2254/ C98 : 80                         addr0c8f:        glo R0         ; Get low register R0
 2255/ C99 : 20                         addr0c90:        dec R0         ; Decrement (R0)
 2256/ C9A : A0                         addr0c91:        plo R0         ; Put low register R0
 2257/ C9B : E0                         addr0c92:        sex R0         ; Set P=R0 as datapointer
 2258/ C9C : 20                         addr0c93:        dec R0         ; Decrement (R0)
 2259/ C9D : A0                         addr0c94:        plo R0         ; Put low register R0
 2260/ C9E : 90                         addr0c95:        ghi R0         ; Get high register R0
 2261/ C9F : FB 0F                      addr0c96:        xri  0fh        ; Logical XOR D with value
 2262/ CA1 : 3A 98                      addr0c98:        bnz  addr0c8f       ; Short branch on D!=0
 2263/ CA3 : B0                         addr0c9a:        phi R0         ; Put high register R0
 2264/ CA4 : F8 0F                      addr0c9b:        ldi  0fh        ; Load D immediate
 2265/ CA6 : A0                         addr0c9d:        plo R0         ; Put low register R0
 2266/ CA7 : 76                         addr0c9e:        shrc           ; Shift right with carry
 2267/ CA8 : 52                         addr0c9f:        str R2         ; Store D to (R2)
 2268/ CA9 : F0                         addr0ca0:        ldx            ; Pop stack. Place value in D register
 2269/ CAA : FC 01                      addr0ca1:        adi  01h        ; Add D,DF with value
 2270/ CAC : 50                         addr0ca3:        str R0         ; Store D to (R0)
 2271/ CAD : FF 3D                      addr0ca4:        smi  3dh        ; Substract D,DF to value
 2272/ CAF : 3B 83                      addr0ca6:        bnf  addr0c7a       ; Short branch on DF=0
 2273/ CB1 : 73                         addr0ca8:        stxd           ; Store via X and devrement
 2274/ CB2 : F0                         addr0ca9:        ldx            ; Pop stack. Place value in D register
 2275/ CB3 : FC 01                      addr0caa:        adi  01h        ; Add D,DF with value
 2276/ CB5 : 50                         addr0cac:        str R0         ; Store D to (R0)
 2277/ CB6 : 30 83                      addr0cad:        br  addr0c7a        ; Short branch
 2278/ CB8 : 86 08                      CTBL:	DW		08608h		;SP MASK BYTE AND DATA POINTER
 2279/ CBA : 82 0A                      		DW		0820Ah		;! MASK BYTE AND DATA POINTER
 2280/ CBC : E5 08                      		DW		0E508h		;" MASK BYTE AND DATA POINTER
 2281/ CBE : F8 23                      		DW		0F823h		;# MASK BYTE AND DATA POINTER
 2282/ CC0 : E4 35                      		DW		0E435h		;$ MASK BYTE AND DATA POINTER
 2283/ CC2 : E5 5A                      		DW		0E55Ah		;% MASK BYTE AND DATA POINTER
 2284/ CC4 : F4 23                      		DW		0F423h		;& MASK BYTE AND DATA POINTER
 2285/ CC6 : C2 00                      		DW		0C200h		;' MASK BYTE AND DATA POINTER
 2286/ CC8 : C1 11                      		DW		0C111h		;( MASK BYTE AND DATA POINTER
 2287/ CCA : C2 11                      		DW		0C211h		;) MASK BYTE AND DATA POINTER
 2288/ CCC : E0 3C                      		DW		0E03Ch		;* MASK BYTE AND DATA POINTER
 2289/ CCE : E5 47                      		DW		0E547h		;+ MASK BYTE AND DATA POINTER
 2290/ CD0 : C3 07                      		DW		0C307h		;, MASK BYTE AND DATA POINTER
 2291/ CD2 : C4 41                      		DW		0C441h		;- MASK BYTE AND DATA POINTER
 2292/ CD4 : 84 07                      		DW		08407h		;. MASK BYTE AND DATA POINTER
 2293/ CD6 : E5 29                      		DW		0E529h		;/ MASK BYTE AND DATA POINTER
 2294/ CD8 : E1 11                      		DW		0E111h		;0 MASK BYTE AND DATA POINTER
 2295/ CDA : E2 43                      		DW		0E243h		;1 MASK BYTE AND DATA POINTER
 2296/ CDC : E4 4F                      		DW		0E44Fh		;2 MASK BYTE AND DATA POINTER
 2297/ CDE : E1 03                      		DW		0E103h		;3 MASK BYTE AND DATA POINTER
 2298/ CE0 : E0 1D                      		DW		0E01Dh		;4 MASK BYTE AND DATA POINTER
 2299/ CE2 : E0 42                      		DW		0E042h		;5 MASK BYTE AND DATA POINTER
 2300/ CE4 : E2 49                      		DW		0E249h		;6 MASK BYTE AND DATA POINTER
 2301/ CE6 : E0 73                      		DW		0E073h		;7 MASK BYTE AND DATA POINTER
 2302/ CE8 : E3 03                      		DW		0E303h		;8 MASK BYTE AND DATA POINTER
 2303/ CEA : E0 49                      		DW		0E049h		;9 MASK BYTE AND DATA POINTER
 2304/ CEC : 83 04                      		DW		08304h		;: MASK BYTE AND DATA POINTER
 2305/ CEE : C3 35                      		DW		0C335h		; MASK BYTE AND DATA POINTER
 2306/ CF0 : E5 41                      		DW		0E541h		;< MASK BYTE AND DATA POINTER
 2307/ CF2 : E5 03                      		DW		0E503h		;= MASK BYTE AND DATA POINTER
 2308/ CF4 : E5 17                      		DW		0E517h		;> MASK BYTE AND DATA POINTER
 2309/ CF6 : E0 5A                      		DW		0E05Ah		;? MASK BYTE AND DATA POINTER
 2310/ CF8 : E0 79                      		DW		0E079h		;@ MASK BYTE AND DATA POINTER
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 43 - 09/11/2024 10:24:33 PM


 2311/ CFA : E1 2F                      		DW		0E12Fh		;A MASK BYTE AND DATA POINTER
 2312/ CFC : E5 6D                      		DW		0E56Dh		;B MASK BYTE AND DATA POINTER
 2313/ CFE : E4 17                      		DW		0E417h		;C MASK BYTE AND DATA POINTER
 2314/ D00 : E2 17                      		DW		0E217h		;D MASK BYTE AND DATA POINTER
 2315/ D02 : E5 60                      		DW		0E560h		;E MASK BYTE AND DATA POINTER
 2316/ D04 : E5 34                      		DW		0E534h		;F MASK BYTE AND DATA POINTER
 2317/ D06 : E2 4F                      		DW		0E24Fh		;G MASK BYTE AND DATA POINTER
 2318/ D08 : E3 3B                      		DW		0E33Bh		;H MASK BYTE AND DATA POINTER
 2319/ D0A : 82 17                      		DW		08217h		;I MASK BYTE AND DATA POINTER
 2320/ D0C : E1 55                      		DW		0E155h		;J MASK BYTE AND DATA POINTER
 2321/ D0E : E0 60                      		DW		0E060h		;K MASK BYTE AND DATA POINTER
 2322/ D10 : E3 43                      		DW		0E343h		;L MASK BYTE AND DATA POINTER
 2323/ D12 : F9 6D                      		DW		0F96Dh		;M MASK BYTE AND DATA POINTER
 2324/ D14 : F4 1D                      		DW		0F41Dh		;N MASK BYTE AND DATA POINTER
 2325/ D16 : E0 17                      		DW		0E017h		;O MASK BYTE AND DATA POINTER
 2326/ D18 : E5 73                      		DW		0E573h		;P MASK BYTE AND DATA POINTER
 2327/ D1A : E0 0B                      		DW		0E00Bh		;Q MASK BYTE AND DATA POINTER
 2328/ D1C : E5 3B                      		DW		0E53Bh		;R MASK BYTE AND DATA POINTER
 2329/ D1E : E0 29                      		DW		0E029h		;S MASK BYTE AND DATA POINTER
 2330/ D20 : E0 66                      		DW		0E066h		;T MASK BYTE AND DATA POINTER
 2331/ D22 : E2 1D                      		DW		0E21Dh		;U MASK BYTE AND DATA POINTER
 2332/ D24 : E3 79                      		DW		0E379h		;V MASK BYTE AND DATA POINTER
 2333/ D26 : FB 2E                      		DW		0FB2Eh		;W MASK BYTE AND DATA POINTER
 2334/ D28 : E2 60                      		DW		0E260h		;X MASK BYTE AND DATA POINTER
 2335/ D2A : E2 73                      		DW		0E273h		;Y MASK BYTE AND DATA POINTER
 2336/ D2C : E0 35                      		DW		0E035h		;Z MASK BYTE AND DATA POINTER
 2337/ D2E : C0 17                      		DW		0C017h		;[ MASK BYTE AND DATA POINTER
 2338/ D30 : E3 29                      		DW		0E329h		;\ MASK BYTE AND DATA POINTER
 2339/ D32 : C1 17                      		DW		0C117h		;] MASK BYTE AND DATA POINTER
 2340/ D34 : E2 00                      		DW		0E200h		;^ MASK BYTE AND DATA POINTER
 2341/ D36 : E5 07                      		DW		0E507h		;_ MASK BYTE AND DATA POINTER
 2342/ D38 : 00 00                      DOTS:	DW		00000h		;START OF DOT TABLE
 2343/ D3A : 80 80                      		DW		08080h		;
 2344/ D3C : E8 97                      		DW		0E897h		;
 2345/ D3E : A8 97                      		DW		0A897h		;
 2346/ D40 : 68 40                      		DW		06840h		;
 2347/ D42 : 40 20                      		DW		04020h		;
 2348/ D44 : 40 AD                      		DW		040ADh		;
 2349/ D46 : B6 AD                      		DW		0B6ADh		;
 2350/ D48 : 44 04                      		DW		04404h		;
 2351/ D4A : 20 56                      		DW		02056h		;
 2352/ D4C : DD 57                      		DW		0DD57h		;
 2353/ D4E : 20 00                      		DW		02000h		;
 2354/ D50 : F4 AA                      		DW		0F4AAh		;
 2355/ D52 : A9 AA                      		DW		0A9AAh		;
 2356/ D54 : F4 00                      		DW		0F400h		;
 2357/ D56 : 39 E9                      		DW		039E9h		;
 2358/ D58 : AB AD                      		DW		0ABADh		;
 2359/ D5A : 29 00                      		DW		02900h		;
 2360/ D5C : 55 FA                      		DW		055FAh		;
 2361/ D5E : 54 F8                      		DW		054F8h		;
 2362/ D60 : 54 00                      		DW		05400h		;
 2363/ D62 : C0 24                      		DW		0C024h		;
 2364/ D64 : 4A 91                      		DW		04A91h		;
 2365/ D66 : 60 0A                      		DW		0600Ah		;
 2366/ D68 : 55 75                      		DW		05575h		;
 2367/ D6A : 51 51                      		DW		05151h		;
 2368/ D6C : 20 14                      		DW		02014h		;
 2369/ D6E : EC 86                      		DW		0EC86h		;
 2370/ D70 : 4C 27                      		DW		04C27h		;
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 44 - 09/11/2024 10:24:33 PM


 2371/ D72 : E4 00                      		DW		0E400h		;
 2372/ D74 : 15 15                      		DW		01515h		;
 2373/ D76 : BE 55                      		DW		0BE55h		;
 2374/ D78 : B6 00                      		DW		0B600h		;
 2375/ D7A : 01 C2                      		DW		001C2h		;
 2376/ D7C : 3C D2                      		DW		03CD2h		;
 2377/ D7E : 91 F0                      		DW		091F0h		;
 2378/ D80 : 10 02                      		DW		01002h		;
 2379/ D82 : 57 2A                      		DW		0572Ah		;
 2380/ D84 : 70 A0                      		DW		070A0h		;
 2381/ D86 : 58 00                      		DW		05800h		;
 2382/ D88 : DE 68                      		DW		0DE68h		;
 2383/ D8A : A4 62                      		DW		0A462h		;
 2384/ D8C : 1C 06                      		DW		01C06h		;
 2385/ D8E : 23 55                      		DW		02355h		;
 2386/ D90 : 15 18                      		DW		01518h		;
 2387/ D92 : 10 51                      		DW		01051h		;
 2388/ D94 : 04 22                      		DW		00422h		;
 2389/ D96 : A1 44                      		DW		0A144h		;
 2390/ D98 : 00 AF                      		DW		000AFh		;
 2391/ D9A : AC D6                      		DW		0ACD6h		;
 2392/ D9C : AC AF                      		DW		0ACAFh		;
 2393/ D9E : 00 42                      		DW		00042h		;
 2394/ DA0 : 42 5F                      		DW		0425Fh		;
 2395/ DA2 : 52 F9                      		DW		052F9h		;
 2396/ DA4 : 10 00                      		DW		01000h		;
 2397/ DA6 : 46 45                      		DW		04645h		;
 2398/ DA8 : 56 6D                      		DW		0566Dh		;
 2399/ DAA : 46 00                      		DW		04600h		;
 2400/ DAC : 94 94                      		DW		09494h		;
 2401/ DAE : 56 2D                      		DW		0562Dh		;
 2402/ DB0 : EE 00                      		DW		0EE00h		;
 2403/ DB2 : 68 94                      		DW		06894h		;
 2404/ DB4 : B4 B4                      		DW		0B4B4h		;
 2405/ DB6 : 54 00                      		DW		05400h		;
 2406/ DB8 : DF                         		SEP		RF		;
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 45 - 09/11/2024 10:24:33 PM


  Symbol Table (* = unused):
  --------------------------

*ADDR0000 :                       0 C | *ADDR0003 :                       3 C |
*ADDR0006 :                       6 C | *ADDR0007 :                       7 C |
*ADDR0080 :                      80 C | *ADDR0082 :                      82 C |
*ADDR0084 :                      84 C | *ADDR0086 :                      86 C |
*ADDR0088 :                      88 C | *ADDR008A :                      8A C |
*ADDR008C :                      8C C | *ADDR008E :                      8E C |
*ADDR0090 :                      90 C | *ADDR0092 :                      92 C |
*ADDR0094 :                      94 C | *ADDR0096 :                      96 C |
*ADDR0098 :                      98 C | *ADDR009A :                      9A C |
*ADDR009C :                      9C C | *ADDR009E :                      9E C |
*ADDR00A0 :                     0A0 C | *ADDR00A2 :                     0A2 C |
*ADDR00A4 :                     0A4 C | *ADDR00A6 :                     0A6 C |
*ADDR00A8 :                     0A8 C | *ADDR00AA :                     0AA C |
*ADDR00AC :                     0AC C | *ADDR00AE :                     0AE C |
*ADDR00B0 :                     0B0 C | *ADDR00B2 :                     0B2 C |
*ADDR00B4 :                     0B4 C | *ADDR00B6 :                     0B6 C |
*ADDR00B7 :                     0B7 C | *ADDR00BA :                     0BA C |
 ADDR00BB :                     0BB C | *ADDR00BD :                     0BD C |
 ADDR00BF :                     0BF C | *ADDR00C1 :                     0C1 C |
*ADDR00C3 :                     0C3 C |  ADDR00C4 :                     0C4 C |
*ADDR00C5 :                     0C5 C |  ADDR00C7 :                     0C7 C |
*ADDR00C9 :                     0C9 C | *ADDR00CB :                     0CB C |
*ADDR00CC :                     0CC C | *ADDR00CE :                     0CE C |
*ADDR00D0 :                     0D0 C | *ADDR00D2 :                     0D2 C |
 ADDR00D3 :                     0D3 C | *ADDR00D5 :                     0D5 C |
*ADDR00D6 :                     0D6 C | *ADDR00D7 :                     0D7 C |
*ADDR00D9 :                     0D9 C | *ADDR00DB :                     0DB C |
*ADDR00DD :                     0DD C |  ADDR00DE :                     0DE C |
*ADDR00DF :                     0DF C |  ADDR00E1 :                     0E1 C |
*ADDR00E2 :                     0E2 C | *ADDR00E4 :                     0E4 C |
*ADDR00E7 :                     0E7 C | *ADDR00EA :                     0EA C |
*ADDR00EC :                     0EC C | *ADDR00ED :                     0ED C |
*ADDR00EF :                     0EF C | *ADDR00F1 :                     0F1 C |
 ADDR00F2 :                     0F2 C | *ADDR00F4 :                     0F4 C |
*ADDR00F6 :                     0F6 C | *ADDR00F7 :                     0F7 C |
*ADDR00FA :                     0FA C | *ADDR00FB :                     0FB C |
*ADDR00FC :                     0FC C | *ADDR00FD :                     0FD C |
 ADDR00FF :                     0FF C |  ADDR0100 :                     100 C |
*ADDR0101 :                     101 C | *ADDR0103 :                     103 C |
*ADDR0106 :                     106 C | *ADDR0109 :                     109 C |
*ADDR010C :                     10C C | *ADDR010F :                     10F C |
*ADDR0110 :                     110 C | *ADDR0111 :                     111 C |
*ADDR0112 :                     112 C | *ADDR0113 :                     113 C |
*ADDR0114 :                     114 C | *ADDR0116 :                     116 C |
*ADDR0117 :                     117 C | *ADDR0118 :                     118 C |
*ADDR0119 :                     119 C | *ADDR011A :                     11A C |
*ADDR011B :                     11B C | *ADDR011C :                     11C C |
*ADDR011D :                     11D C | *ADDR011E :                     11E C |
*ADDR0120 :                     120 C | *ADDR0121 :                     121 C |
*ADDR0123 :                     123 C | *ADDR0124 :                     124 C |
*ADDR0125 :                     125 C | *ADDR0126 :                     126 C |
*ADDR012A :                     12A C | *ADDR012B :                     12B C |
*ADDR012C :                     12C C | *ADDR012D :                     12D C |
*ADDR012E :                     12E C | *ADDR012F :                     12F C |
*ADDR0130 :                     130 C | *ADDR0131 :                     131 C |
*ADDR0132 :                     132 C | *ADDR0133 :                     133 C |
*ADDR0134 :                     134 C | *ADDR0135 :                     135 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 46 - 09/11/2024 10:24:33 PM


*ADDR0136 :                     136 C | *ADDR0137 :                     137 C |
*ADDR0138 :                     138 C | *ADDR0139 :                     139 C |
*ADDR013C :                     13C C | *ADDR013D :                     13D C |
*ADDR013E :                     13E C | *ADDR013F :                     13F C |
*ADDR0140 :                     140 C | *ADDR0141 :                     141 C |
*ADDR0142 :                     142 C | *ADDR0143 :                     143 C |
*ADDR0144 :                     144 C | *ADDR0145 :                     145 C |
*ADDR0146 :                     146 C | *ADDR0147 :                     147 C |
*ADDR0148 :                     148 C | *ADDR014B :                     14B C |
*ADDR014C :                     14C C | *ADDR014D :                     14D C |
*ADDR014F :                     14F C | *ADDR0150 :                     150 C |
*ADDR0151 :                     151 C | *ADDR0152 :                     152 C |
*ADDR01B2 :                     1B2 C | *ADDR01B3 :                     1B3 C |
*ADDR01B5 :                     1B5 C | *ADDR01B6 :                     1B6 C |
*ADDR01B7 :                     1B7 C | *ADDR01B8 :                     1B8 C |
*ADDR01BA :                     1BA C | *ADDR01BB :                     1BB C |
*ADDR01BC :                     1BC C | *ADDR01BD :                     1BD C |
*ADDR01BE :                     1BE C | *ADDR01BF :                     1BF C |
*ADDR01C0 :                     1C0 C | *ADDR01C1 :                     1C1 C |
*ADDR01C3 :                     1C3 C | *ADDR01C4 :                     1C4 C |
*ADDR01C5 :                     1C5 C | *ADDR01C7 :                     1C7 C |
*ADDR01C8 :                     1C8 C | *ADDR01C9 :                     1C9 C |
*ADDR01CA :                     1CA C | *ADDR01CC :                     1CC C |
*ADDR01CD :                     1CD C | *ADDR01CE :                     1CE C |
*ADDR01CF :                     1CF C | *ADDR01D0 :                     1D0 C |
*ADDR01D1 :                     1D1 C | *ADDR01D2 :                     1D2 C |
*ADDR01D4 :                     1D4 C | *ADDR01D5 :                     1D5 C |
*ADDR01D6 :                     1D6 C | *ADDR01D8 :                     1D8 C |
*ADDR01D9 :                     1D9 C | *ADDR01DA :                     1DA C |
*ADDR01DB :                     1DB C | *ADDR01DD :                     1DD C |
*ADDR01DE :                     1DE C | *ADDR01DF :                     1DF C |
*ADDR01E0 :                     1E0 C | *ADDR01E1 :                     1E1 C |
*ADDR01E2 :                     1E2 C | *ADDR01E4 :                     1E4 C |
*ADDR01E5 :                     1E5 C | *ADDR01E6 :                     1E6 C |
*ADDR01E7 :                     1E7 C | *ADDR01E9 :                     1E9 C |
*ADDR01EB :                     1EB C | *ADDR01EC :                     1EC C |
*ADDR01ED :                     1ED C | *ADDR01EF :                     1EF C |
*ADDR01F1 :                     1F1 C | *ADDR01F2 :                     1F2 C |
*ADDR01F4 :                     1F4 C | *ADDR01F5 :                     1F5 C |
*ADDR01F6 :                     1F6 C | *ADDR01F7 :                     1F7 C |
*ADDR01F8 :                     1F8 C | *ADDR01F9 :                     1F9 C |
*ADDR01FB :                     1FB C | *ADDR01FC :                     1FC C |
*ADDR01FE :                     1FE C | *ADDR01FF :                     1FF C |
*ADDR0201 :                     201 C | *ADDR0204 :                     204 C |
*ADDR0205 :                     205 C | *ADDR0206 :                     206 C |
*ADDR0207 :                     207 C | *ADDR0208 :                     208 C |
*ADDR0209 :                     209 C | *ADDR020A :                     20A C |
*ADDR020B :                     20B C | *ADDR020C :                     20C C |
*ADDR020D :                     20D C | *ADDR020E :                     20E C |
*ADDR020F :                     20F C | *ADDR0210 :                     210 C |
*ADDR0211 :                     211 C | *ADDR0212 :                     212 C |
*ADDR0213 :                     213 C | *ADDR0214 :                     214 C |
*ADDR0215 :                     215 C | *ADDR0216 :                     216 C |
*ADDR0217 :                     217 C | *ADDR0219 :                     219 C |
*ADDR021A :                     21A C | *ADDR021B :                     21B C |
*ADDR021C :                     21C C | *ADDR021D :                     21D C |
*ADDR021E :                     21E C | *ADDR021F :                     21F C |
*ADDR0220 :                     220 C | *ADDR0221 :                     221 C |
*ADDR0222 :                     222 C | *ADDR0223 :                     223 C |
*ADDR0224 :                     224 C | *ADDR0225 :                     225 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 47 - 09/11/2024 10:24:33 PM


*ADDR0228 :                     228 C | *ADDR0229 :                     229 C |
*ADDR022A :                     22A C | *ADDR022B :                     22B C |
*ADDR022C :                     22C C |  ADDR022D :                     22D C |
*ADDR022E :                     22E C | *ADDR022F :                     22F C |
*ADDR0231 :                     231 C | *ADDR0233 :                     233 C |
*ADDR0235 :                     235 C | *ADDR0237 :                     237 C |
*ADDR0238 :                     238 C | *ADDR023A :                     23A C |
*ADDR023B :                     23B C | *ADDR023D :                     23D C |
*ADDR023E :                     23E C | *ADDR023F :                     23F C |
*ADDR0240 :                     240 C | *ADDR0241 :                     241 C |
 ADDR0242 :                     242 C | *ADDR0243 :                     243 C |
*ADDR0244 :                     244 C | *ADDR0245 :                     245 C |
*ADDR0246 :                     246 C | *ADDR0247 :                     247 C |
*ADDR0248 :                     248 C | *ADDR0249 :                     249 C |
*ADDR024A :                     24A C | *ADDR024D :                     24D C |
*ADDR024F :                     24F C | *ADDR0250 :                     250 C |
*ADDR0252 :                     252 C | *ADDR0254 :                     254 C |
*ADDR0255 :                     255 C | *ADDR0256 :                     256 C |
*ADDR0257 :                     257 C | *ADDR0258 :                     258 C |
*ADDR0259 :                     259 C | *ADDR025B :                     25B C |
 ADDR025C :                     25C C | *ADDR025D :                     25D C |
*ADDR025E :                     25E C | *ADDR025F :                     25F C |
*ADDR0260 :                     260 C | *ADDR0261 :                     261 C |
*ADDR0262 :                     262 C | *ADDR0263 :                     263 C |
*ADDR0265 :                     265 C | *ADDR0267 :                     267 C |
*ADDR0268 :                     268 C |  ADDR026A :                     26A C |
*ADDR026C :                     26C C | *ADDR026E :                     26E C |
*ADDR026F :                     26F C | *ADDR0270 :                     270 C |
*ADDR0271 :                     271 C | *ADDR0273 :                     273 C |
*ADDR0274 :                     274 C | *ADDR0275 :                     275 C |
*ADDR0276 :                     276 C | *ADDR0277 :                     277 C |
 ADDR027A :                     27A C | *ADDR027B :                     27B C |
*ADDR027C :                     27C C | *ADDR027D :                     27D C |
*ADDR027E :                     27E C | *ADDR027F :                     27F C |
*ADDR0280 :                     280 C | *ADDR0281 :                     281 C |
*ADDR0282 :                     282 C | *ADDR0283 :                     283 C |
 ADDR0285 :                     285 C | *ADDR0287 :                     287 C |
*ADDR0288 :                     288 C | *ADDR0289 :                     289 C |
*ADDR028A :                     28A C | *ADDR028B :                     28B C |
*ADDR028C :                     28C C | *ADDR028D :                     28D C |
*ADDR028E :                     28E C | *ADDR028F :                     28F C |
*ADDR0290 :                     290 C | *ADDR0291 :                     291 C |
*ADDR0292 :                     292 C | *ADDR0293 :                     293 C |
*ADDR0294 :                     294 C | *ADDR0295 :                     295 C |
*ADDR0296 :                     296 C | *ADDR0298 :                     298 C |
*ADDR0299 :                     299 C | *ADDR029B :                     29B C |
*ADDR029C :                     29C C | *ADDR029D :                     29D C |
*ADDR029F :                     29F C |  ADDR02A0 :                     2A0 C |
*ADDR02A1 :                     2A1 C | *ADDR02A4 :                     2A4 C |
*ADDR02A5 :                     2A5 C | *ADDR02A6 :                     2A6 C |
*ADDR02A7 :                     2A7 C | *ADDR02AA :                     2AA C |
*ADDR02AB :                     2AB C | *ADDR02AD :                     2AD C |
*ADDR02AF :                     2AF C | *ADDR02B1 :                     2B1 C |
*ADDR02B2 :                     2B2 C | *ADDR02B4 :                     2B4 C |
*ADDR02B5 :                     2B5 C | *ADDR02B6 :                     2B6 C |
*ADDR02B9 :                     2B9 C | *ADDR02BA :                     2BA C |
*ADDR02BB :                     2BB C | *ADDR02BC :                     2BC C |
*ADDR02BD :                     2BD C | *ADDR02BE :                     2BE C |
*ADDR02BF :                     2BF C | *ADDR02C0 :                     2C0 C |
*ADDR02C2 :                     2C2 C | *ADDR02C5 :                     2C5 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 48 - 09/11/2024 10:24:33 PM


*ADDR02C8 :                     2C8 C | *ADDR02CA :                     2CA C |
*ADDR02CB :                     2CB C | *ADDR02CC :                     2CC C |
*ADDR02CE :                     2CE C | *ADDR02CF :                     2CF C |
*ADDR02D0 :                     2D0 C | *ADDR02D1 :                     2D1 C |
*ADDR02D2 :                     2D2 C | *ADDR02D3 :                     2D3 C |
*ADDR02D4 :                     2D4 C | *ADDR02D7 :                     2D7 C |
*ADDR02D9 :                     2D9 C | *ADDR02DB :                     2DB C |
*ADDR02DD :                     2DD C | *ADDR02E0 :                     2E0 C |
*ADDR02E2 :                     2E2 C | *ADDR02E4 :                     2E4 C |
*ADDR02E6 :                     2E6 C | *ADDR02E8 :                     2E8 C |
*ADDR02E9 :                     2E9 C | *ADDR02EA :                     2EA C |
*ADDR02EB :                     2EB C | *ADDR02EE :                     2EE C |
*ADDR02F0 :                     2F0 C | *ADDR02F3 :                     2F3 C |
*ADDR02F5 :                     2F5 C | *ADDR02F6 :                     2F6 C |
*ADDR02F7 :                     2F7 C | *ADDR02F8 :                     2F8 C |
*ADDR02FB :                     2FB C | *ADDR02FC :                     2FC C |
*ADDR02FE :                     2FE C | *ADDR02FF :                     2FF C |
*ADDR0300 :                     300 C | *ADDR0301 :                     301 C |
*ADDR0303 :                     303 C | *ADDR0304 :                     304 C |
 ADDR0305 :                     305 C | *ADDR0306 :                     306 C |
*ADDR0307 :                     307 C | *ADDR0308 :                     308 C |
*ADDR0309 :                     309 C | *ADDR030A :                     30A C |
*ADDR030B :                     30B C | *ADDR030C :                     30C C |
*ADDR030D :                     30D C | *ADDR030E :                     30E C |
*ADDR030F :                     30F C | *ADDR0311 :                     311 C |
*ADDR0312 :                     312 C | *ADDR0313 :                     313 C |
*ADDR0314 :                     314 C | *ADDR0315 :                     315 C |
*ADDR0316 :                     316 C | *ADDR0319 :                     319 C |
 ADDR031C :                     31C C | *ADDR031F :                     31F C |
*ADDR0320 :                     320 C | *ADDR0321 :                     321 C |
*ADDR0322 :                     322 C |  ADDR0323 :                     323 C |
*ADDR0326 :                     326 C | *ADDR0327 :                     327 C |
*ADDR0328 :                     328 C | *ADDR0329 :                     329 C |
*ADDR032A :                     32A C | *ADDR032C :                     32C C |
*ADDR032E :                     32E C | *ADDR0330 :                     330 C |
*ADDR0331 :                     331 C | *ADDR0332 :                     332 C |
*ADDR0333 :                     333 C | *ADDR0334 :                     334 C |
*ADDR0337 :                     337 C | *ADDR0338 :                     338 C |
*ADDR0339 :                     339 C | *ADDR033A :                     33A C |
*ADDR033B :                     33B C | *ADDR033C :                     33C C |
*ADDR033D :                     33D C | *ADDR033E :                     33E C |
*ADDR0340 :                     340 C | *ADDR0341 :                     341 C |
*ADDR0342 :                     342 C | *ADDR0344 :                     344 C |
*ADDR0345 :                     345 C | *ADDR0346 :                     346 C |
*ADDR0347 :                     347 C | *ADDR0349 :                     349 C |
*ADDR034C :                     34C C | *ADDR034E :                     34E C |
*ADDR0351 :                     351 C | *ADDR0354 :                     354 C |
 ADDR0355 :                     355 C | *ADDR0358 :                     358 C |
 ADDR0359 :                     359 C | *ADDR035A :                     35A C |
*ADDR035B :                     35B C | *ADDR035C :                     35C C |
*ADDR035D :                     35D C | *ADDR035F :                     35F C |
*ADDR0361 :                     361 C | *ADDR0362 :                     362 C |
*ADDR0363 :                     363 C | *ADDR0364 :                     364 C |
*ADDR0365 :                     365 C |  ADDR0366 :                     366 C |
*ADDR0367 :                     367 C | *ADDR036A :                     36A C |
*ADDR036B :                     36B C | *ADDR036C :                     36C C |
*ADDR036D :                     36D C | *ADDR036E :                     36E C |
 ADDR0370 :                     370 C | *ADDR0372 :                     372 C |
*ADDR0374 :                     374 C | *ADDR0376 :                     376 C |
*ADDR0379 :                     379 C | *ADDR037A :                     37A C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 49 - 09/11/2024 10:24:33 PM


*ADDR037C :                     37C C |  ADDR037E :                     37E C |
 ADDR037F :                     37F C | *ADDR0380 :                     380 C |
*ADDR0381 :                     381 C | *ADDR0382 :                     382 C |
*ADDR0385 :                     385 C | *ADDR0387 :                     387 C |
*ADDR038A :                     38A C | *ADDR038B :                     38B C |
*ADDR038C :                     38C C | *ADDR038D :                     38D C |
*ADDR038E :                     38E C | *ADDR038F :                     38F C |
*ADDR0390 :                     390 C | *ADDR0391 :                     391 C |
*ADDR0392 :                     392 C | *ADDR0393 :                     393 C |
*ADDR0396 :                     396 C | *ADDR0397 :                     397 C |
*ADDR0399 :                     399 C | *ADDR039B :                     39B C |
*ADDR039C :                     39C C | *ADDR039D :                     39D C |
*ADDR039E :                     39E C | *ADDR03A1 :                     3A1 C |
*ADDR03A2 :                     3A2 C | *ADDR03A3 :                     3A3 C |
*ADDR03A4 :                     3A4 C | *ADDR03A5 :                     3A5 C |
*ADDR03A6 :                     3A6 C |  ADDR03A9 :                     3A9 C |
*ADDR03AB :                     3AB C | *ADDR03AE :                     3AE C |
*ADDR03B1 :                     3B1 C | *ADDR03B2 :                     3B2 C |
*ADDR03B3 :                     3B3 C | *ADDR03B4 :                     3B4 C |
 ADDR03B5 :                     3B5 C | *ADDR03B6 :                     3B6 C |
*ADDR03B7 :                     3B7 C | *ADDR03B8 :                     3B8 C |
*ADDR03B9 :                     3B9 C | *ADDR03BA :                     3BA C |
*ADDR03BD :                     3BD C | *ADDR03BE :                     3BE C |
*ADDR03BF :                     3BF C | *ADDR03C0 :                     3C0 C |
*ADDR03C1 :                     3C1 C |  ADDR03C2 :                     3C2 C |
*ADDR03C5 :                     3C5 C | *ADDR03C6 :                     3C6 C |
*ADDR03C8 :                     3C8 C | *ADDR03CA :                     3CA C |
*ADDR03CC :                     3CC C | *ADDR03CD :                     3CD C |
*ADDR03CE :                     3CE C | *ADDR03D0 :                     3D0 C |
*ADDR03D1 :                     3D1 C | *ADDR03D2 :                     3D2 C |
*ADDR03D3 :                     3D3 C | *ADDR03D4 :                     3D4 C |
*ADDR03D5 :                     3D5 C | *ADDR03D6 :                     3D6 C |
*ADDR03D7 :                     3D7 C | *ADDR03D8 :                     3D8 C |
*ADDR03DA :                     3DA C | *ADDR03DB :                     3DB C |
*ADDR03DC :                     3DC C | *ADDR03DD :                     3DD C |
 ADDR03DF :                     3DF C | *ADDR03E2 :                     3E2 C |
*ADDR03E3 :                     3E3 C | *ADDR03E4 :                     3E4 C |
*ADDR03E5 :                     3E5 C | *ADDR03E6 :                     3E6 C |
*ADDR03E8 :                     3E8 C | *ADDR03E9 :                     3E9 C |
*ADDR03EA :                     3EA C | *ADDR03EB :                     3EB C |
*ADDR03ED :                     3ED C |  ADDR03EF :                     3EF C |
*ADDR03F0 :                     3F0 C |  ADDR03F2 :                     3F2 C |
*ADDR03F4 :                     3F4 C | *ADDR03F5 :                     3F5 C |
*ADDR03F6 :                     3F6 C | *ADDR03F7 :                     3F7 C |
*ADDR03F8 :                     3F8 C | *ADDR03FA :                     3FA C |
*ADDR03FC :                     3FC C | *ADDR03FE :                     3FE C |
*ADDR03FF :                     3FF C | *ADDR0400 :                     400 C |
 ADDR0403 :                     403 C | *ADDR0405 :                     405 C |
*ADDR0408 :                     408 C | *ADDR0409 :                     409 C |
 ADDR040A :                     40A C | *ADDR040C :                     40C C |
*ADDR040E :                     40E C | *ADDR040F :                     40F C |
*ADDR0412 :                     412 C | *ADDR0413 :                     413 C |
*ADDR0415 :                     415 C | *ADDR0418 :                     418 C |
*ADDR0419 :                     419 C | *ADDR041A :                     41A C |
*ADDR041B :                     41B C | *ADDR041E :                     41E C |
*ADDR0420 :                     420 C | *ADDR0422 :                     422 C |
 ADDR0425 :                     425 C | *ADDR0426 :                     426 C |
*ADDR0427 :                     427 C | *ADDR0428 :                     428 C |
*ADDR042A :                     42A C | *ADDR042D :                     42D C |
 ADDR042E :                     42E C | *ADDR0431 :                     431 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 50 - 09/11/2024 10:24:33 PM


*ADDR0432 :                     432 C | *ADDR0433 :                     433 C |
*ADDR0435 :                     435 C | *ADDR0436 :                     436 C |
*ADDR0437 :                     437 C | *ADDR0438 :                     438 C |
*ADDR0439 :                     439 C | *ADDR043A :                     43A C |
*ADDR043B :                     43B C | *ADDR043C :                     43C C |
 ADDR043E :                     43E C | *ADDR043F :                     43F C |
*ADDR0440 :                     440 C | *ADDR0443 :                     443 C |
*ADDR0446 :                     446 C | *ADDR0448 :                     448 C |
*ADDR0449 :                     449 C | *ADDR044A :                     44A C |
*ADDR044B :                     44B C | *ADDR044C :                     44C C |
*ADDR044E :                     44E C | *ADDR0450 :                     450 C |
*ADDR0451 :                     451 C | *ADDR0452 :                     452 C |
*ADDR0453 :                     453 C | *ADDR0455 :                     455 C |
*ADDR0457 :                     457 C | *ADDR0458 :                     458 C |
*ADDR0459 :                     459 C | *ADDR045A :                     45A C |
*ADDR045B :                     45B C | *ADDR045C :                     45C C |
*ADDR045D :                     45D C |  ADDR045E :                     45E C |
*ADDR045F :                     45F C | *ADDR0460 :                     460 C |
*ADDR0461 :                     461 C | *ADDR0462 :                     462 C |
*ADDR0463 :                     463 C | *ADDR0464 :                     464 C |
*ADDR0465 :                     465 C | *ADDR0466 :                     466 C |
*ADDR0467 :                     467 C | *ADDR0468 :                     468 C |
*ADDR0469 :                     469 C | *ADDR046A :                     46A C |
*ADDR046B :                     46B C | *ADDR046C :                     46C C |
*ADDR046F :                     46F C | *ADDR0470 :                     470 C |
*ADDR0472 :                     472 C | *ADDR0473 :                     473 C |
*ADDR0474 :                     474 C | *ADDR0475 :                     475 C |
*ADDR0478 :                     478 C | *ADDR0479 :                     479 C |
*ADDR047C :                     47C C | *ADDR047D :                     47D C |
*ADDR047E :                     47E C | *ADDR047F :                     47F C |
*ADDR0480 :                     480 C | *ADDR0481 :                     481 C |
*ADDR0482 :                     482 C | *ADDR0484 :                     484 C |
*ADDR0485 :                     485 C | *ADDR0486 :                     486 C |
*ADDR0488 :                     488 C | *ADDR0489 :                     489 C |
*ADDR048A :                     48A C | *ADDR048C :                     48C C |
*ADDR048D :                     48D C | *ADDR048E :                     48E C |
 ADDR048F :                     48F C | *ADDR0490 :                     490 C |
*ADDR0491 :                     491 C |  ADDR0492 :                     492 C |
*ADDR0493 :                     493 C | *ADDR0494 :                     494 C |
*ADDR0495 :                     495 C | *ADDR0496 :                     496 C |
*ADDR0497 :                     497 C | *ADDR0498 :                     498 C |
*ADDR049B :                     49B C | *ADDR049E :                     49E C |
*ADDR049F :                     49F C | *ADDR04A0 :                     4A0 C |
*ADDR04A1 :                     4A1 C | *ADDR04A2 :                     4A2 C |
*ADDR04A3 :                     4A3 C | *ADDR04A4 :                     4A4 C |
*ADDR04A5 :                     4A5 C | *ADDR04A6 :                     4A6 C |
*ADDR04A7 :                     4A7 C | *ADDR04AA :                     4AA C |
*ADDR04AC :                     4AC C | *ADDR04AD :                     4AD C |
*ADDR04AE :                     4AE C | *ADDR04AF :                     4AF C |
*ADDR04B0 :                     4B0 C |  ADDR04B1 :                     4B1 C |
*ADDR04B2 :                     4B2 C | *ADDR04B3 :                     4B3 C |
*ADDR04B4 :                     4B4 C | *ADDR04B5 :                     4B5 C |
*ADDR04B6 :                     4B6 C | *ADDR04B7 :                     4B7 C |
*ADDR04B8 :                     4B8 C | *ADDR04BB :                     4BB C |
*ADDR04BD :                     4BD C | *ADDR04BE :                     4BE C |
*ADDR04BF :                     4BF C | *ADDR04C0 :                     4C0 C |
*ADDR04C1 :                     4C1 C | *ADDR04C2 :                     4C2 C |
*ADDR04C3 :                     4C3 C | *ADDR04C4 :                     4C4 C |
 ADDR04C5 :                     4C5 C | *ADDR04C6 :                     4C6 C |
*ADDR04C7 :                     4C7 C | *ADDR04C8 :                     4C8 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 51 - 09/11/2024 10:24:33 PM


*ADDR04CA :                     4CA C | *ADDR04CB :                     4CB C |
*ADDR04CE :                     4CE C | *ADDR04CF :                     4CF C |
*ADDR04D0 :                     4D0 C | *ADDR04D1 :                     4D1 C |
*ADDR04D2 :                     4D2 C | *ADDR04D5 :                     4D5 C |
*ADDR04D6 :                     4D6 C | *ADDR04D7 :                     4D7 C |
*ADDR04D8 :                     4D8 C | *ADDR04DB :                     4DB C |
*ADDR04DC :                     4DC C | *ADDR04DD :                     4DD C |
*ADDR04E0 :                     4E0 C | *ADDR04E1 :                     4E1 C |
*ADDR04E2 :                     4E2 C | *ADDR04E3 :                     4E3 C |
*ADDR04E4 :                     4E4 C | *ADDR04E5 :                     4E5 C |
*ADDR04E6 :                     4E6 C | *ADDR04E7 :                     4E7 C |
*ADDR04E9 :                     4E9 C | *ADDR04EA :                     4EA C |
*ADDR04EB :                     4EB C | *ADDR04EC :                     4EC C |
*ADDR04ED :                     4ED C | *ADDR04EE :                     4EE C |
*ADDR04EF :                     4EF C | *ADDR04F0 :                     4F0 C |
*ADDR04F1 :                     4F1 C | *ADDR04F3 :                     4F3 C |
*ADDR04F4 :                     4F4 C | *ADDR04F5 :                     4F5 C |
 ADDR04F6 :                     4F6 C | *ADDR04F7 :                     4F7 C |
*ADDR04F8 :                     4F8 C | *ADDR04F9 :                     4F9 C |
*ADDR04FA :                     4FA C | *ADDR04FB :                     4FB C |
*ADDR04FC :                     4FC C | *ADDR04FD :                     4FD C |
*ADDR04FE :                     4FE C | *ADDR04FF :                     4FF C |
*ADDR0500 :                     500 C | *ADDR0501 :                     501 C |
*ADDR0504 :                     504 C | *ADDR0505 :                     505 C |
*ADDR0506 :                     506 C | *ADDR0509 :                     509 C |
*ADDR050A :                     50A C | *ADDR050B :                     50B C |
*ADDR050C :                     50C C | *ADDR050E :                     50E C |
*ADDR050F :                     50F C | *ADDR0510 :                     510 C |
*ADDR0511 :                     511 C | *ADDR0513 :                     513 C |
*ADDR0514 :                     514 C | *ADDR0515 :                     515 C |
*ADDR0516 :                     516 C |  ADDR0518 :                     518 C |
*ADDR0519 :                     519 C | *ADDR051A :                     51A C |
*ADDR051B :                     51B C | *ADDR051C :                     51C C |
*ADDR051D :                     51D C | *ADDR051E :                     51E C |
*ADDR051F :                     51F C |  ADDR0521 :                     521 C |
*ADDR0522 :                     522 C | *ADDR0523 :                     523 C |
*ADDR0524 :                     524 C | *ADDR0525 :                     525 C |
*ADDR0526 :                     526 C | *ADDR0527 :                     527 C |
*ADDR0528 :                     528 C | *ADDR0529 :                     529 C |
*ADDR052A :                     52A C | *ADDR052B :                     52B C |
 ADDR052E :                     52E C | *ADDR052F :                     52F C |
*ADDR0531 :                     531 C | *ADDR0533 :                     533 C |
*ADDR0536 :                     536 C |  ADDR0538 :                     538 C |
*ADDR053B :                     53B C | *ADDR053D :                     53D C |
*ADDR053E :                     53E C | *ADDR053F :                     53F C |
*ADDR0540 :                     540 C | *ADDR0541 :                     541 C |
 ADDR0542 :                     542 C | *ADDR0543 :                     543 C |
*ADDR0544 :                     544 C | *ADDR0545 :                     545 C |
 ADDR0546 :                     546 C | *ADDR0547 :                     547 C |
*ADDR0548 :                     548 C | *ADDR0549 :                     549 C |
*ADDR054A :                     54A C |  ADDR054B :                     54B C |
*ADDR054E :                     54E C | *ADDR054F :                     54F C |
*ADDR0550 :                     550 C | *ADDR0551 :                     551 C |
*ADDR0552 :                     552 C | *ADDR0553 :                     553 C |
*ADDR0556 :                     556 C | *ADDR0558 :                     558 C |
*ADDR0559 :                     559 C | *ADDR055A :                     55A C |
*ADDR055B :                     55B C | *ADDR055C :                     55C C |
*ADDR055D :                     55D C | *ADDR055E :                     55E C |
*ADDR0560 :                     560 C | *ADDR0563 :                     563 C |
 ADDR0565 :                     565 C | *ADDR0566 :                     566 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 52 - 09/11/2024 10:24:33 PM


*ADDR0567 :                     567 C | *ADDR0568 :                     568 C |
*ADDR0569 :                     569 C | *ADDR056A :                     56A C |
*ADDR056B :                     56B C | *ADDR056D :                     56D C |
*ADDR0570 :                     570 C | *ADDR0571 :                     571 C |
*ADDR0572 :                     572 C | *ADDR0573 :                     573 C |
*ADDR0574 :                     574 C | *ADDR0575 :                     575 C |
*ADDR0576 :                     576 C | *ADDR0577 :                     577 C |
*ADDR0578 :                     578 C | *ADDR0579 :                     579 C |
*ADDR057A :                     57A C | *ADDR057D :                     57D C |
*ADDR057F :                     57F C | *ADDR0581 :                     581 C |
*ADDR0584 :                     584 C | *ADDR0585 :                     585 C |
*ADDR0586 :                     586 C | *ADDR0587 :                     587 C |
 ADDR0588 :                     588 C | *ADDR058B :                     58B C |
*ADDR058C :                     58C C | *ADDR058D :                     58D C |
*ADDR058E :                     58E C | *ADDR058F :                     58F C |
*ADDR0590 :                     590 C | *ADDR0592 :                     592 C |
*ADDR0593 :                     593 C | *ADDR0594 :                     594 C |
*ADDR0596 :                     596 C | *ADDR0597 :                     597 C |
*ADDR0599 :                     599 C | *ADDR059A :                     59A C |
 ADDR059C :                     59C C | *ADDR059D :                     59D C |
 ADDR059E :                     59E C | *ADDR059F :                     59F C |
*ADDR05A0 :                     5A0 C |  ADDR05A1 :                     5A1 C |
*ADDR05A2 :                     5A2 C | *ADDR05A3 :                     5A3 C |
*ADDR05A4 :                     5A4 C | *ADDR05A5 :                     5A5 C |
*ADDR05A6 :                     5A6 C | *ADDR05A7 :                     5A7 C |
*ADDR05A8 :                     5A8 C | *ADDR05AA :                     5AA C |
*ADDR05AC :                     5AC C | *ADDR05AD :                     5AD C |
*ADDR05B0 :                     5B0 C | *ADDR05B1 :                     5B1 C |
 ADDR05B2 :                     5B2 C | *ADDR05B5 :                     5B5 C |
*ADDR05B7 :                     5B7 C | *ADDR05B9 :                     5B9 C |
*ADDR05BA :                     5BA C | *ADDR05BC :                     5BC C |
*ADDR05BE :                     5BE C | *ADDR05C0 :                     5C0 C |
*ADDR05C2 :                     5C2 C | *ADDR05C4 :                     5C4 C |
*ADDR05C6 :                     5C6 C | *ADDR05C7 :                     5C7 C |
*ADDR05C8 :                     5C8 C | *ADDR05C9 :                     5C9 C |
*ADDR05CA :                     5CA C | *ADDR05CC :                     5CC C |
*ADDR05CD :                     5CD C | *ADDR05CE :                     5CE C |
*ADDR05CF :                     5CF C | *ADDR05D1 :                     5D1 C |
*ADDR05D2 :                     5D2 C | *ADDR05D3 :                     5D3 C |
*ADDR05D5 :                     5D5 C |  ADDR05D7 :                     5D7 C |
*ADDR05D9 :                     5D9 C | *ADDR05DA :                     5DA C |
*ADDR05DC :                     5DC C |  ADDR05DD :                     5DD C |
*ADDR05DE :                     5DE C | *ADDR05DF :                     5DF C |
*ADDR05E0 :                     5E0 C | *ADDR05E1 :                     5E1 C |
*ADDR05E2 :                     5E2 C | *ADDR05E3 :                     5E3 C |
*ADDR05E5 :                     5E5 C | *ADDR05E7 :                     5E7 C |
*ADDR05EA :                     5EA C | *ADDR05EB :                     5EB C |
 ADDR05EC :                     5EC C | *ADDR05ED :                     5ED C |
*ADDR05EF :                     5EF C | *ADDR05F1 :                     5F1 C |
*ADDR05F4 :                     5F4 C | *ADDR05F5 :                     5F5 C |
*ADDR05F6 :                     5F6 C | *ADDR05F7 :                     5F7 C |
*ADDR05F8 :                     5F8 C | *ADDR05FA :                     5FA C |
*ADDR05FB :                     5FB C | *ADDR05FE :                     5FE C |
*ADDR0601 :                     601 C | *ADDR0602 :                     602 C |
*ADDR0603 :                     603 C | *ADDR0604 :                     604 C |
*ADDR0605 :                     605 C | *ADDR0608 :                     608 C |
*ADDR0609 :                     609 C | *ADDR060A :                     60A C |
*ADDR060B :                     60B C | *ADDR060C :                     60C C |
 ADDR060D :                     60D C | *ADDR0610 :                     610 C |
*ADDR0611 :                     611 C |  ADDR0612 :                     612 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 53 - 09/11/2024 10:24:33 PM


*ADDR0613 :                     613 C | *ADDR0614 :                     614 C |
*ADDR0615 :                     615 C | *ADDR0616 :                     616 C |
*ADDR0617 :                     617 C | *ADDR0618 :                     618 C |
*ADDR0619 :                     619 C | *ADDR061A :                     61A C |
*ADDR061B :                     61B C | *ADDR061C :                     61C C |
 ADDR061E :                     61E C | *ADDR061F :                     61F C |
*ADDR0621 :                     621 C | *ADDR0623 :                     623 C |
*ADDR0625 :                     625 C | *ADDR0628 :                     628 C |
*ADDR062B :                     62B C | *ADDR062C :                     62C C |
*ADDR062D :                     62D C | *ADDR062E :                     62E C |
*ADDR062F :                     62F C | *ADDR0630 :                     630 C |
*ADDR0631 :                     631 C | *ADDR0632 :                     632 C |
*ADDR0633 :                     633 C | *ADDR0634 :                     634 C |
*ADDR0635 :                     635 C | *ADDR0636 :                     636 C |
*ADDR0637 :                     637 C | *ADDR0638 :                     638 C |
*ADDR0639 :                     639 C | *ADDR063A :                     63A C |
*ADDR063B :                     63B C | *ADDR063C :                     63C C |
*ADDR063D :                     63D C | *ADDR063E :                     63E C |
*ADDR063F :                     63F C | *ADDR0640 :                     640 C |
*ADDR0641 :                     641 C | *ADDR0642 :                     642 C |
*ADDR0645 :                     645 C | *ADDR0646 :                     646 C |
*ADDR0647 :                     647 C | *ADDR0648 :                     648 C |
*ADDR0649 :                     649 C | *ADDR064A :                     64A C |
*ADDR064B :                     64B C | *ADDR064E :                     64E C |
*ADDR064F :                     64F C |  ADDR0650 :                     650 C |
*ADDR0651 :                     651 C | *ADDR0652 :                     652 C |
*ADDR0653 :                     653 C | *ADDR0654 :                     654 C |
*ADDR0655 :                     655 C | *ADDR0656 :                     656 C |
*ADDR0657 :                     657 C | *ADDR0659 :                     659 C |
*ADDR065A :                     65A C | *ADDR065B :                     65B C |
*ADDR065C :                     65C C | *ADDR065D :                     65D C |
*ADDR065F :                     65F C | *ADDR0660 :                     660 C |
 ADDR0662 :                     662 C | *ADDR0665 :                     665 C |
 ADDR0667 :                     667 C | *ADDR0669 :                     669 C |
*ADDR066C :                     66C C | *ADDR066F :                     66F C |
*ADDR0671 :                     671 C | *ADDR0672 :                     672 C |
*ADDR0674 :                     674 C | *ADDR0676 :                     676 C |
*ADDR0679 :                     679 C |  ADDR067B :                     67B C |
*ADDR067C :                     67C C | *ADDR067D :                     67D C |
*ADDR067E :                     67E C | *ADDR067F :                     67F C |
*ADDR0680 :                     680 C | *ADDR0681 :                     681 C |
*ADDR0682 :                     682 C | *ADDR0683 :                     683 C |
*ADDR0684 :                     684 C | *ADDR0685 :                     685 C |
*ADDR0686 :                     686 C | *ADDR0687 :                     687 C |
*ADDR0688 :                     688 C | *ADDR0689 :                     689 C |
*ADDR068A :                     68A C | *ADDR068B :                     68B C |
*ADDR068C :                     68C C | *ADDR068D :                     68D C |
*ADDR068E :                     68E C | *ADDR068F :                     68F C |
*ADDR0690 :                     690 C | *ADDR0691 :                     691 C |
*ADDR0692 :                     692 C | *ADDR0693 :                     693 C |
*ADDR0694 :                     694 C | *ADDR0695 :                     695 C |
*ADDR0698 :                     698 C | *ADDR0699 :                     699 C |
*ADDR069A :                     69A C | *ADDR069B :                     69B C |
*ADDR069C :                     69C C | *ADDR069D :                     69D C |
*ADDR069E :                     69E C | *ADDR069F :                     69F C |
*ADDR06A0 :                     6A0 C | *ADDR06A1 :                     6A1 C |
*ADDR06A2 :                     6A2 C | *ADDR06A5 :                     6A5 C |
*ADDR06A8 :                     6A8 C | *ADDR06AA :                     6AA C |
*ADDR06AB :                     6AB C | *ADDR06AC :                     6AC C |
*ADDR06AE :                     6AE C | *ADDR06AF :                     6AF C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 54 - 09/11/2024 10:24:33 PM


*ADDR06B0 :                     6B0 C | *ADDR06B1 :                     6B1 C |
*ADDR06B2 :                     6B2 C | *ADDR06B3 :                     6B3 C |
 ADDR06B4 :                     6B4 C | *ADDR06B5 :                     6B5 C |
*ADDR06B6 :                     6B6 C | *ADDR06B8 :                     6B8 C |
 ADDR06BA :                     6BA C | *ADDR06BB :                     6BB C |
*ADDR06BC :                     6BC C | *ADDR06BF :                     6BF C |
*ADDR06C0 :                     6C0 C | *ADDR06C1 :                     6C1 C |
*ADDR06C2 :                     6C2 C | *ADDR06C4 :                     6C4 C |
*ADDR06C5 :                     6C5 C | *ADDR06C6 :                     6C6 C |
*ADDR06C8 :                     6C8 C | *ADDR06C9 :                     6C9 C |
*ADDR06CA :                     6CA C | *ADDR06CB :                     6CB C |
*ADDR06CC :                     6CC C | *ADDR06CD :                     6CD C |
*ADDR06CE :                     6CE C | *ADDR06CF :                     6CF C |
*ADDR06D0 :                     6D0 C | *ADDR06D1 :                     6D1 C |
*ADDR06D2 :                     6D2 C |  ADDR06D3 :                     6D3 C |
*ADDR06D4 :                     6D4 C | *ADDR06D5 :                     6D5 C |
*ADDR06D7 :                     6D7 C |  ADDR06D9 :                     6D9 C |
*ADDR06DA :                     6DA C | *ADDR06DB :                     6DB C |
*ADDR06DC :                     6DC C | *ADDR06DD :                     6DD C |
*ADDR06DE :                     6DE C | *ADDR06DF :                     6DF C |
*ADDR06E0 :                     6E0 C | *ADDR06E1 :                     6E1 C |
*ADDR06E2 :                     6E2 C | *ADDR06E3 :                     6E3 C |
*ADDR06E4 :                     6E4 C | *ADDR06E5 :                     6E5 C |
*ADDR06E6 :                     6E6 C | *ADDR06E7 :                     6E7 C |
*ADDR06E8 :                     6E8 C | *ADDR06E9 :                     6E9 C |
*ADDR06EA :                     6EA C | *ADDR06EB :                     6EB C |
*ADDR06EC :                     6EC C | *ADDR06EE :                     6EE C |
*ADDR06EF :                     6EF C | *ADDR06F1 :                     6F1 C |
*ADDR06F2 :                     6F2 C | *ADDR06F3 :                     6F3 C |
*ADDR06F4 :                     6F4 C | *ADDR06F5 :                     6F5 C |
*ADDR06F6 :                     6F6 C | *ADDR06F7 :                     6F7 C |
*ADDR06F8 :                     6F8 C | *ADDR06F9 :                     6F9 C |
*ADDR06FA :                     6FA C | *ADDR06FB :                     6FB C |
*ADDR06FC :                     6FC C | *ADDR06FD :                     6FD C |
*ADDR06FE :                     6FE C | *ADDR06FF :                     6FF C |
*ADDR0702 :                     702 C | *ADDR0703 :                     703 C |
*ADDR0705 :                     705 C | *ADDR0706 :                     706 C |
*ADDR0707 :                     707 C | *ADDR0709 :                     709 C |
*ADDR070A :                     70A C | *ADDR070B :                     70B C |
*ADDR070C :                     70C C | *ADDR070D :                     70D C |
*ADDR070E :                     70E C | *ADDR070F :                     70F C |
*ADDR0710 :                     710 C | *ADDR0711 :                     711 C |
*ADDR0712 :                     712 C | *ADDR0714 :                     714 C |
 ADDR0715 :                     715 C | *ADDR0716 :                     716 C |
*ADDR0717 :                     717 C | *ADDR0718 :                     718 C |
*ADDR0719 :                     719 C | *ADDR071A :                     71A C |
*ADDR071C :                     71C C |  ADDR071E :                     71E C |
*ADDR071F :                     71F C | *ADDR0720 :                     720 C |
*ADDR0721 :                     721 C | *ADDR0722 :                     722 C |
*ADDR0723 :                     723 C | *ADDR0724 :                     724 C |
*ADDR0725 :                     725 C | *ADDR0726 :                     726 C |
*ADDR0727 :                     727 C | *ADDR0728 :                     728 C |
 ADDR0729 :                     729 C | *ADDR072A :                     72A C |
*ADDR072B :                     72B C | *ADDR072C :                     72C C |
*ADDR072D :                     72D C | *ADDR072E :                     72E C |
 ADDR0730 :                     730 C | *ADDR0731 :                     731 C |
*ADDR0732 :                     732 C | *ADDR0733 :                     733 C |
*ADDR0734 :                     734 C | *ADDR0735 :                     735 C |
*ADDR0736 :                     736 C | *ADDR0737 :                     737 C |
*ADDR0738 :                     738 C | *ADDR0739 :                     739 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 55 - 09/11/2024 10:24:33 PM


*ADDR073A :                     73A C | *ADDR073B :                     73B C |
*ADDR073C :                     73C C | *ADDR073D :                     73D C |
*ADDR073E :                     73E C | *ADDR073F :                     73F C |
*ADDR0740 :                     740 C | *ADDR0742 :                     742 C |
*ADDR0743 :                     743 C | *ADDR0744 :                     744 C |
*ADDR0745 :                     745 C | *ADDR0746 :                     746 C |
 ADDR0747 :                     747 C | *ADDR0748 :                     748 C |
*ADDR0749 :                     749 C | *ADDR074A :                     74A C |
*ADDR074C :                     74C C |  ADDR074E :                     74E C |
*ADDR0751 :                     751 C | *ADDR0752 :                     752 C |
*ADDR0753 :                     753 C | *ADDR0754 :                     754 C |
*ADDR0755 :                     755 C | *ADDR0756 :                     756 C |
*ADDR0757 :                     757 C | *ADDR0758 :                     758 C |
*ADDR0759 :                     759 C | *ADDR075A :                     75A C |
*ADDR075B :                     75B C | *ADDR075D :                     75D C |
*ADDR075F :                     75F C | *ADDR0760 :                     760 C |
*ADDR0762 :                     762 C | *ADDR0763 :                     763 C |
*ADDR0764 :                     764 C | *ADDR09D8 :                     9D8 C |
*ADDR09DA :                     9DA C | *ADDR09DB :                     9DB C |
*ADDR09DD :                     9DD C |  ADDR09DE :                     9DE C |
*ADDR09E0 :                     9E0 C | *ADDR09E1 :                     9E1 C |
*ADDR09E2 :                     9E2 C | *ADDR09E3 :                     9E3 C |
 ADDR09E4 :                     9E4 C | *ADDR09E6 :                     9E6 C |
*ADDR09E7 :                     9E7 C | *ADDR09E8 :                     9E8 C |
*ADDR09E9 :                     9E9 C | *ADDR09EA :                     9EA C |
*ADDR09EB :                     9EB C | *ADDR09ED :                     9ED C |
*ADDR09EE :                     9EE C | *ADDR09F0 :                     9F0 C |
*ADDR09F1 :                     9F1 C | *ADDR09F2 :                     9F2 C |
*ADDR09F3 :                     9F3 C | *ADDR09F4 :                     9F4 C |
*ADDR09F5 :                     9F5 C | *ADDR09F7 :                     9F7 C |
*ADDR09F8 :                     9F8 C | *ADDR09FA :                     9FA C |
*ADDR09FD :                     9FD C | *ADDR09FF :                     9FF C |
*ADDR0A00 :                    0A00 C | *ADDR0A02 :                    0A02 C |
*ADDR0A03 :                    0A03 C | *ADDR0A05 :                    0A05 C |
 ADDR0A06 :                    0A06 C | *ADDR0A08 :                    0A08 C |
*ADDR0A09 :                    0A09 C | *ADDR0A0A :                    0A0A C |
 ADDR0A0C :                    0A0C C | *ADDR0A0D :                    0A0D C |
*ADDR0A0E :                    0A0E C | *ADDR0A0F :                    0A0F C |
*ADDR0A11 :                    0A11 C | *ADDR0A12 :                    0A12 C |
*ADDR0A13 :                    0A13 C |  ADDR0A14 :                    0A14 C |
*ADDR0A15 :                    0A15 C | *ADDR0A16 :                    0A16 C |
*ADDR0A17 :                    0A17 C | *ADDR0A18 :                    0A18 C |
*ADDR0A19 :                    0A19 C | *ADDR0A1A :                    0A1A C |
*ADDR0A1C :                    0A1C C | *ADDR0A1D :                    0A1D C |
*ADDR0A1E :                    0A1E C | *ADDR0A1F :                    0A1F C |
*ADDR0A20 :                    0A20 C | *ADDR0A21 :                    0A21 C |
*ADDR0A23 :                    0A23 C | *ADDR0A24 :                    0A24 C |
*ADDR0A25 :                    0A25 C | *ADDR0A26 :                    0A26 C |
*ADDR0A27 :                    0A27 C | *ADDR0A28 :                    0A28 C |
 ADDR0A29 :                    0A29 C | *ADDR0A2B :                    0A2B C |
*ADDR0A2C :                    0A2C C | *ADDR0A2E :                    0A2E C |
 ADDR0A2F :                    0A2F C | *ADDR0A31 :                    0A31 C |
 ADDR0A32 :                    0A32 C | *ADDR0A33 :                    0A33 C |
*ADDR0A35 :                    0A35 C | *ADDR0A36 :                    0A36 C |
 ADDR0A38 :                    0A38 C | *ADDR0A39 :                    0A39 C |
*ADDR0A3B :                    0A3B C | *ADDR0A3D :                    0A3D C |
*ADDR0A3E :                    0A3E C |  ADDR0A3F :                    0A3F C |
*ADDR0A40 :                    0A40 C | *ADDR0A41 :                    0A41 C |
*ADDR0A42 :                    0A42 C | *ADDR0A43 :                    0A43 C |
*ADDR0A45 :                    0A45 C | *ADDR0A46 :                    0A46 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 56 - 09/11/2024 10:24:33 PM


*ADDR0A47 :                    0A47 C | *ADDR0A48 :                    0A48 C |
*ADDR0A4A :                    0A4A C | *ADDR0A4B :                    0A4B C |
*ADDR0A4C :                    0A4C C | *ADDR0A4D :                    0A4D C |
*ADDR0A4E :                    0A4E C | *ADDR0A50 :                    0A50 C |
*ADDR0A51 :                    0A51 C | *ADDR0A52 :                    0A52 C |
*ADDR0A53 :                    0A53 C | *ADDR0A55 :                    0A55 C |
*ADDR0A57 :                    0A57 C | *ADDR0A58 :                    0A58 C |
 ADDR0A59 :                    0A59 C |  ADDR0A5A :                    0A5A C |
*ADDR0A5B :                    0A5B C |  ADDR0A5D :                    0A5D C |
*ADDR0A5F :                    0A5F C | *ADDR0A60 :                    0A60 C |
*ADDR0A63 :                    0A63 C | *ADDR0A65 :                    0A65 C |
 ADDR0A67 :                    0A67 C | *ADDR0A68 :                    0A68 C |
*ADDR0A69 :                    0A69 C | *ADDR0A6A :                    0A6A C |
*ADDR0A6C :                    0A6C C | *ADDR0A6E :                    0A6E C |
*ADDR0A6F :                    0A6F C |  ADDR0A70 :                    0A70 C |
 ADDR0A71 :                    0A71 C | *ADDR0A74 :                    0A74 C |
*ADDR0A75 :                    0A75 C | *ADDR0A76 :                    0A76 C |
*ADDR0A77 :                    0A77 C | *ADDR0A79 :                    0A79 C |
 ADDR0A7B :                    0A7B C |  ADDR0A83 :                    0A8A C |
*ADDR0A84 :                    0A8B C | *ADDR0A85 :                    0A8C C |
*ADDR0A86 :                    0A8D C | *ADDR0A88 :                    0A8F C |
*ADDR0A89 :                    0A90 C |  ADDR0A8B :                    0A92 C |
*ADDR0A8D :                    0A94 C | *ADDR0A8E :                    0A95 C |
*ADDR0A91 :                    0A98 C |  ADDR0A93 :                    0A9A C |
*ADDR0A96 :                    0A9D C | *ADDR0A97 :                    0A9E C |
*ADDR0A98 :                    0A9F C | *ADDR0A99 :                    0AA0 C |
*ADDR0A9A :                    0AA1 C | *ADDR0A9B :                    0AA2 C |
*ADDR0A9D :                    0AA4 C | *ADDR0A9E :                    0AA5 C |
*ADDR0A9F :                    0AA6 C | *ADDR0AA0 :                    0AA7 C |
*ADDR0AA1 :                    0AA8 C | *ADDR0AA3 :                    0AAA C |
*ADDR0AA4 :                    0AAB C |  ADDR0AA5 :                    0AAC C |
*ADDR0AA6 :                    0AAD C | *ADDR0AA7 :                    0AAE C |
*ADDR0AA8 :                    0AAF C | *ADDR0AA9 :                    0AB0 C |
*ADDR0AAA :                    0AB1 C | *ADDR0AAC :                    0AB3 C |
*ADDR0AAD :                    0AB4 C |  ADDR0AB0 :                    0AB7 C |
 ADDR0AB3 :                    0ABA C | *ADDR0AB5 :                    0ABC C |
*ADDR0AB6 :                    0ABD C | *ADDR0AB9 :                    0AC0 C |
 ADDR0ABA :                    0AC1 C | *ADDR0ABD :                    0AC4 C |
*ADDR0ABE :                    0AC5 C | *ADDR0AC0 :                    0AC7 C |
*ADDR0AC2 :                    0AC9 C | *ADDR0AC4 :                    0ACB C |
*ADDR0AC5 :                    0ACC C |  ADDR0AC6 :                    0ACD C |
*ADDR0AC9 :                    0AD0 C | *ADDR0ACB :                    0AD2 C |
 ADDR0ACC :                    0AD3 C | *ADDR0ACD :                    0AD4 C |
*ADDR0ACE :                    0AD5 C |  ADDR0AD0 :                    0AD7 C |
*ADDR0AD2 :                    0AD9 C | *ADDR0AD3 :                    0ADA C |
*ADDR0AD4 :                    0ADB C | *ADDR0AD5 :                    0ADC C |
*ADDR0AD6 :                    0ADD C | *ADDR0AD7 :                    0ADE C |
*ADDR0AD8 :                    0ADF C | *ADDR0ADA :                    0AE1 C |
*ADDR0ADB :                    0AE2 C | *ADDR0ADD :                    0AE4 C |
*ADDR0ADE :                    0AE5 C | *ADDR0AE0 :                    0AE7 C |
*ADDR0AE2 :                    0AE9 C |  ADDR0AE3 :                    0AEA C |
*ADDR0AE4 :                    0AEB C | *ADDR0AE5 :                    0AEC C |
*ADDR0AE6 :                    0AED C | *ADDR0AE7 :                    0AEE C |
*ADDR0AE8 :                    0AEF C | *ADDR0AE9 :                    0AF0 C |
*ADDR0AEA :                    0AF1 C | *ADDR0AEB :                    0AF2 C |
*ADDR0AEC :                    0AF3 C | *ADDR0AED :                    0AF4 C |
*ADDR0AEE :                    0AF5 C | *ADDR0AEF :                    0AF6 C |
*ADDR0AF0 :                    0AF7 C | *ADDR0AF2 :                    0AF9 C |
*ADDR0AF3 :                    0AFA C | *ADDR0AF5 :                    0AFC C |
*ADDR0AF6 :                    0AFD C | *ADDR0AF7 :                    0AFE C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 57 - 09/11/2024 10:24:33 PM


*ADDR0AF8 :                    0AFF C | *ADDR0AF9 :                    0B00 C |
*ADDR0AFA :                    0B01 C | *ADDR0AFB :                    0B02 C |
*ADDR0AFC :                    0B03 C | *ADDR0AFE :                    0B05 C |
*ADDR0AFF :                    0B06 C | *ADDR0B00 :                    0B07 C |
*ADDR0B01 :                    0B08 C | *ADDR0B02 :                    0B09 C |
*ADDR0B03 :                    0B0A C | *ADDR0B05 :                    0B0C C |
*ADDR0B06 :                    0B0D C | *ADDR0B08 :                    0B0F C |
*ADDR0B0A :                    0B11 C | *ADDR0B0C :                    0B13 C |
*ADDR0B0E :                    0B15 C | *ADDR0B10 :                    0B17 C |
*ADDR0B12 :                    0B19 C | *ADDR0B14 :                    0B1B C |
*ADDR0B16 :                    0B1D C | *ADDR0B18 :                    0B1F C |
*ADDR0B1A :                    0B21 C | *ADDR0B1C :                    0B23 C |
*ADDR0B1E :                    0B25 C |  ADDR0B20 :                    0B27 C |
*ADDR0B21 :                    0B28 C | *ADDR0B22 :                    0B29 C |
*ADDR0B23 :                    0B2A C | *ADDR0B25 :                    0B2C C |
*ADDR0B26 :                    0B2D C | *ADDR0B28 :                    0B2F C |
*ADDR0B29 :                    0B30 C | *ADDR0B2A :                    0B31 C |
*ADDR0B2B :                    0B32 C | *ADDR0B2D :                    0B34 C |
*ADDR0B2E :                    0B35 C | *ADDR0B2F :                    0B36 C |
*ADDR0B30 :                    0B37 C | *ADDR0B31 :                    0B38 C |
*ADDR0B32 :                    0B39 C | *ADDR0B33 :                    0B3A C |
*ADDR0B34 :                    0B3B C | *ADDR0B35 :                    0B3C C |
*ADDR0B36 :                    0B3D C | *ADDR0B37 :                    0B3E C |
*ADDR0B38 :                    0B3F C | *ADDR0B39 :                    0B40 C |
*ADDR0B3A :                    0B41 C | *ADDR0B3B :                    0B42 C |
*ADDR0B3C :                    0B43 C | *ADDR0B3D :                    0B44 C |
*ADDR0B3E :                    0B45 C | *ADDR0B3F :                    0B46 C |
*ADDR0B40 :                    0B47 C | *ADDR0B41 :                    0B48 C |
*ADDR0B42 :                    0B49 C | *ADDR0B43 :                    0B4A C |
*ADDR0B44 :                    0B4B C | *ADDR0B45 :                    0B4C C |
 ADDR0B46 :                    0B4D C | *ADDR0B48 :                    0B4F C |
*ADDR0B49 :                    0B50 C | *ADDR0B4B :                    0B52 C |
*ADDR0B4C :                    0B53 C |  ADDR0B4E :                    0B55 C |
*ADDR0B50 :                    0B57 C | *ADDR0B51 :                    0B58 C |
 ADDR0B52 :                    0B59 C | *ADDR0B53 :                    0B5A C |
 ADDR0B55 :                    0B5C C | *ADDR0B56 :                    0B5D C |
*ADDR0B58 :                    0B5F C | *ADDR0B59 :                    0B60 C |
*ADDR0B5A :                    0B61 C | *ADDR0B5C :                    0B63 C |
*ADDR0B5D :                    0B64 C |  ADDR0B5F :                    0B66 C |
*ADDR0B61 :                    0B68 C | *ADDR0B62 :                    0B69 C |
*ADDR0B64 :                    0B6B C | *ADDR0B65 :                    0B6C C |
 ADDR0B66 :                    0B6D C | *ADDR0B67 :                    0B6E C |
*ADDR0B68 :                    0B6F C | *ADDR0B69 :                    0B70 C |
*ADDR0B6B :                    0B72 C | *ADDR0B6C :                    0B73 C |
*ADDR0B6E :                    0B75 C | *ADDR0B70 :                    0B77 C |
 ADDR0B71 :                    0B78 C | *ADDR0B72 :                    0B79 C |
*ADDR0B73 :                    0B7A C | *ADDR0B74 :                    0B7B C |
*ADDR0B76 :                    0B7D C |  ADDR0B77 :                    0B7E C |
*ADDR0B78 :                    0B7F C | *ADDR0B7A :                    0B81 C |
*ADDR0B7B :                    0B82 C | *ADDR0B7D :                    0B84 C |
*ADDR0B7F :                    0B86 C | *ADDR0B81 :                    0B88 C |
*ADDR0B82 :                    0B89 C | *ADDR0B83 :                    0B8A C |
*ADDR0B85 :                    0B8C C | *ADDR0B87 :                    0B8E C |
*ADDR0B88 :                    0B8F C | *ADDR0B8A :                    0B91 C |
*ADDR0B8B :                    0B92 C | *ADDR0B8D :                    0B94 C |
 ADDR0B8E :                    0B95 C |  ADDR0B8F :                    0B96 C |
*ADDR0B90 :                    0B97 C | *ADDR0B91 :                    0B98 C |
*ADDR0B92 :                    0B99 C | *ADDR0B94 :                    0B9B C |
*ADDR0B95 :                    0B9C C | *ADDR0B97 :                    0B9E C |
*ADDR0B99 :                    0BA0 C | *ADDR0B9A :                    0BA1 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 58 - 09/11/2024 10:24:33 PM


*ADDR0B9C :                    0BA3 C | *ADDR0B9D :                    0BA4 C |
*ADDR0B9F :                    0BA6 C | *ADDR0BA0 :                    0BA7 C |
*ADDR0BA2 :                    0BA9 C | *ADDR0BA3 :                    0BAA C |
*ADDR0BA5 :                    0BAC C | *ADDR0BA6 :                    0BAD C |
 ADDR0BA8 :                    0BAF C | *ADDR0BA9 :                    0BB0 C |
*ADDR0BAA :                    0BB1 C | *ADDR0BAC :                    0BB3 C |
*ADDR0BAD :                    0BB4 C | *ADDR0BAE :                    0BB5 C |
*ADDR0BB0 :                    0BB7 C | *ADDR0BB1 :                    0BB8 C |
*ADDR0BB2 :                    0BB9 C | *ADDR0BB3 :                    0BBA C |
*ADDR0BB4 :                    0BBB C | *ADDR0BB5 :                    0BBC C |
*ADDR0BB6 :                    0BBD C | *ADDR0BB8 :                    0BBF C |
*ADDR0BB9 :                    0BC0 C | *ADDR0BBA :                    0BC1 C |
*ADDR0BBC :                    0BC3 C | *ADDR0BBD :                    0BC4 C |
*ADDR0BBE :                    0BC5 C | *ADDR0BBF :                    0BC6 C |
*ADDR0BC0 :                    0BC7 C | *ADDR0BC1 :                    0BC8 C |
*ADDR0BC3 :                    0BCA C | *ADDR0BC4 :                    0BCB C |
*ADDR0BC5 :                    0BCC C | *ADDR0BC7 :                    0BCE C |
*ADDR0BC8 :                    0BCF C | *ADDR0BC9 :                    0BD0 C |
*ADDR0BCA :                    0BD1 C | *ADDR0BCB :                    0BD2 C |
*ADDR0BCC :                    0BD3 C | *ADDR0BCD :                    0BD4 C |
*ADDR0BCE :                    0BD5 C | *ADDR0BD0 :                    0BD7 C |
*ADDR0BD1 :                    0BD8 C | *ADDR0BD2 :                    0BD9 C |
*ADDR0BD3 :                    0BDA C |  ADDR0BD4 :                    0BDB C |
*ADDR0BD5 :                    0BDC C | *ADDR0BD6 :                    0BDD C |
*ADDR0BD7 :                    0BDE C | *ADDR0BD8 :                    0BDF C |
*ADDR0BD9 :                    0BE0 C | *ADDR0BDA :                    0BE1 C |
*ADDR0BDB :                    0BE2 C | *ADDR0BDD :                    0BE4 C |
*ADDR0BDE :                    0BE5 C | *ADDR0BDF :                    0BE6 C |
*ADDR0BE0 :                    0BE7 C | *ADDR0BE1 :                    0BE8 C |
*ADDR0BE3 :                    0BEB C | *ADDR0BE4 :                    0BEC C |
*ADDR0BE6 :                    0BEE C | *ADDR0BE7 :                    0BEF C |
*ADDR0BE8 :                    0BF0 C | *ADDR0BE9 :                    0BF1 C |
*ADDR0BEB :                    0BF3 C | *ADDR0BED :                    0BF5 C |
*ADDR0BEE :                    0BF6 C | *ADDR0BF0 :                    0BF8 C |
*ADDR0BF2 :                    0BFA C | *ADDR0BF3 :                    0BFB C |
*ADDR0BF4 :                    0BFC C | *ADDR0BF5 :                    0BFD C |
 ADDR0BF6 :                    0BFE C | *ADDR0BF7 :                    0BFF C |
*ADDR0BF9 :                    0C01 C | *ADDR0BFA :                    0C02 C |
 ADDR0BFC :                    0C05 C | *ADDR0BFD :                    0C06 C |
*ADDR0BFF :                    0C08 C |  ADDR0C00 :                    0C09 C |
*ADDR0C01 :                    0C0A C | *ADDR0C02 :                    0C0B C |
*ADDR0C04 :                    0C0D C | *ADDR0C05 :                    0C0E C |
*ADDR0C07 :                    0C10 C | *ADDR0C08 :                    0C11 C |
*ADDR0C0A :                    0C13 C | *ADDR0C0C :                    0C15 C |
*ADDR0C0D :                    0C16 C | *ADDR0C0E :                    0C17 C |
*ADDR0C0F :                    0C18 C | *ADDR0C11 :                    0C1A C |
*ADDR0C13 :                    0C1C C | *ADDR0C15 :                    0C1E C |
*ADDR0C16 :                    0C1F C | *ADDR0C17 :                    0C20 C |
*ADDR0C18 :                    0C21 C |  ADDR0C19 :                    0C22 C |
*ADDR0C1A :                    0C23 C |  ADDR0C1D :                    0C26 C |
 ADDR0C1E :                    0C27 C | *ADDR0C1F :                    0C28 C |
*ADDR0C20 :                    0C29 C | *ADDR0C22 :                    0C2B C |
*ADDR0C23 :                    0C2C C | *ADDR0C25 :                    0C2E C |
*ADDR0C26 :                    0C2F C | *ADDR0C28 :                    0C31 C |
*ADDR0C29 :                    0C32 C | *ADDR0C2B :                    0C34 C |
*ADDR0C2C :                    0C35 C | *ADDR0C2E :                    0C37 C |
*ADDR0C2F :                    0C38 C |  ADDR0C31 :                    0C3A C |
*ADDR0C32 :                    0C3B C | *ADDR0C33 :                    0C3C C |
*ADDR0C34 :                    0C3D C | *ADDR0C35 :                    0C3E C |
*ADDR0C36 :                    0C3F C | *ADDR0C38 :                    0C41 C |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 59 - 09/11/2024 10:24:33 PM


 ADDR0C3A :                    0C43 C | *ADDR0C3B :                    0C44 C |
*ADDR0C3D :                    0C46 C |  ADDR0C3E :                    0C47 C |
*ADDR0C3F :                    0C48 C | *ADDR0C40 :                    0C49 C |
*ADDR0C41 :                    0C4A C | *ADDR0C42 :                    0C4B C |
*ADDR0C43 :                    0C4C C |  ADDR0C45 :                    0C4E C |
 ADDR0C46 :                    0C4F C |  ADDR0C47 :                    0C50 C |
*ADDR0C48 :                    0C51 C | *ADDR0C49 :                    0C52 C |
*ADDR0C4B :                    0C54 C |  ADDR0C4D :                    0C56 C |
*ADDR0C4E :                    0C57 C | *ADDR0C50 :                    0C59 C |
*ADDR0C52 :                    0C5B C |  ADDR0C54 :                    0C5D C |
*ADDR0C56 :                    0C5F C | *ADDR0C57 :                    0C60 C |
*ADDR0C58 :                    0C61 C | *ADDR0C5A :                    0C63 C |
*ADDR0C5C :                    0C65 C | *ADDR0C5E :                    0C67 C |
*ADDR0C5F :                    0C68 C | *ADDR0C61 :                    0C6A C |
*ADDR0C63 :                    0C6C C |  ADDR0C65 :                    0C6E C |
*ADDR0C66 :                    0C6F C | *ADDR0C67 :                    0C70 C |
*ADDR0C69 :                    0C72 C | *ADDR0C6A :                    0C73 C |
*ADDR0C6B :                    0C74 C | *ADDR0C6D :                    0C76 C |
*ADDR0C6E :                    0C77 C |  ADDR0C70 :                    0C79 C |
*ADDR0C71 :                    0C7A C | *ADDR0C73 :                    0C7C C |
*ADDR0C74 :                    0C7D C | *ADDR0C75 :                    0C7E C |
*ADDR0C77 :                    0C80 C | *ADDR0C78 :                    0C81 C |
 ADDR0C7A :                    0C83 C | *ADDR0C7C :                    0C85 C |
*ADDR0C7D :                    0C86 C | *ADDR0C7E :                    0C87 C |
*ADDR0C7F :                    0C88 C | *ADDR0C80 :                    0C89 C |
*ADDR0C81 :                    0C8A C | *ADDR0C82 :                    0C8B C |
*ADDR0C83 :                    0C8C C | *ADDR0C84 :                    0C8D C |
*ADDR0C85 :                    0C8E C | *ADDR0C86 :                    0C8F C |
*ADDR0C87 :                    0C90 C | *ADDR0C89 :                    0C92 C |
*ADDR0C8A :                    0C93 C | *ADDR0C8C :                    0C95 C |
 ADDR0C8D :                    0C96 C |  ADDR0C8F :                    0C98 C |
*ADDR0C90 :                    0C99 C | *ADDR0C91 :                    0C9A C |
*ADDR0C92 :                    0C9B C | *ADDR0C93 :                    0C9C C |
*ADDR0C94 :                    0C9D C | *ADDR0C95 :                    0C9E C |
*ADDR0C96 :                    0C9F C | *ADDR0C98 :                    0CA1 C |
*ADDR0C9A :                    0CA3 C | *ADDR0C9B :                    0CA4 C |
*ADDR0C9D :                    0CA6 C | *ADDR0C9E :                    0CA7 C |
*ADDR0C9F :                    0CA8 C | *ADDR0CA0 :                    0CA9 C |
*ADDR0CA1 :                    0CAA C | *ADDR0CA3 :                    0CAC C |
*ADDR0CA4 :                    0CAD C | *ADDR0CA6 :                    0CAF C |
*ADDR0CA8 :                    0CB1 C | *ADDR0CA9 :                    0CB2 C |
*ADDR0CAA :                    0CB3 C | *ADDR0CAC :                    0CB5 C |
*ADDR0CAD :                    0CB6 C | *AEPTR :                         1A C |
*AIL :                           1E C |
*ARCHITECTURE :                                      "x86_64-unknown-linux" - |
*BASIC :                         20 C | *BS :                            13 C |
*CAN :                           14 C | *CASESENSITIVE :                  0 - |
 COLD :                         1B0 C | *CONSTPI :     3.141592653589793239 - |
*CTBL :                        0CB8 C | *DATE :                "09/11/2024" - |
*DOTS :                        0D38 C | *FALSE :                          0 - |
*FLOATMAX :   1.18973149535725E4932 - | *HAS64 :                          1 - |
*LEND :                          19 C | *LINE :                          30 C |
*LINO :                          28 C | *LISTON :                         1 - |
*MACEXP :                         7 - | *MASK :                          0C C |
*MEND :                          24 C | *MOMCPU :                      1802 - |
*MOMCPUNAME :                "1802" - | *NESTMAX :                      100 - |
*NXA :                           1C C | *PAD :                           15 C |
 R0 :                             0 - |  R1 :                             1 - |
 R2 :                             2 - |  R3 :                             3 - |
 R4 :                             4 - |  R5 :                             5 - |
 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 60 - 09/11/2024 10:24:33 PM


 R6 :                             6 - |  R7 :                             7 - |
 R8 :                             8 - |  R9 :                             9 - |
 RA :                            0A - |  RB :                            0B - |
 RC :                            0C - |  RD :                            0D - |
 RE :                            0E - | *RELAXED :                        0 - |
 RF :                            0F - | *SP :                            2E C |
*SPARE :                         17 C | *STACK :                         22 C |
*TAPEMODE :                      16 C | *TIME :               "10:24:32 PM" - |
*TIME_ :                         0D C | *TOPS :                          26 C |
*TRUE :                           1 - | *TTYCC :                         1B C |
*TVXY :                           8 C | *VERSION :                     142F - |
*WORK :                          2A C | *XEQ :                           18 C |
 __BACK0 :                      0F9 C |  __BACK1 :                      129 C |
 __BACK2 :                      13B C |  __BACK3 :                      14A C |
 __BACK4 :                      1C6 C |  __BACK5 :                      1E3 C |
 __BACK6 :                      2A9 C |  __FORW0 :                      122 C |
 __FORW1 :                      24B C |  __FORW2 :                      2C9 C |
 __FORW3 :                     0A83 C |

   1827 symbols
   1663 unused symbols

 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 61 - 09/11/2024 10:24:33 PM


  Defined Macros:
  ---------------

CALL                                  | KB_B                                 
KB_BN                                 | RETURN                               
SERIAL_B                              | SERIAL_BN                            

      6 macros

 AS V1.42 Beta [Bld 275] - Source File netronic.tinyBasic.asm - Page 62 - 09/11/2024 10:24:33 PM


  Code Pages:
  ----------

STANDARD (0 changed characters)

1 code page

0.08 seconds assembly time

   2406 lines source file
   2616 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
